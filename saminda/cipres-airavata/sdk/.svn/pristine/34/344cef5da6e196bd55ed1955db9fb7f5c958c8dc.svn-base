<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pise SYSTEM "http://www.phylo.org/dev/rami/PARSER/pise.dtd">
<pise>
  <head>
    <title>DNAdist</title>
    <version>Phylip 3.66</version>
    <description>Compute distance matrix from NS</description>
        <authors>Felsenstein</authors>
    <reference>Felsenstein, J.  2007.  PHYLIP (Phylogeny Inference Package) version 3.682. Distributed by the author.  Department of Genetics, University of Washington, Seattle.</reference>
    <reference>Felsenstein, J.  1989.  PHYLIP -- Phylogeny Inference Package (Version 3.2). Cladistics  5: 164-166.</reference>
    <category>Phylogeny / Alignment</category>
    <!--removed stale link to pasteur -->
    <doclink>http://evolution.genetics.washington.edu/phylip/doc/dnadist.html</doclink>
    <!--***********************************************************************************************************************************************************************************************
		 ***********************************************************************************************************************************************************************************************
	     **    Update by MMiller, 6_8_2008 to include all of the command line options except for the terminal type; cleaned up command line ordering; remode the seqboot    **
		 **    invocation from this interface                                                                                                                                                                                             **
		************************************************************************************************************************************************************************************************
        ************************************************************************************************************************************************************************************************-->
    <!--Settings for DNA Dist:
 ** D  			Distance (F84, Kimura, Jukes-Cantor, LogDet)?  F84 
 ** G          	Gamma distributed rates across sites?  No (yes)
 ** T           Transition/transversion ratio?  2.0 (yes)
 ** C          	One category of substitution rates?  Yes 
 ** W         	Use  for sites?  No
 ** F           Use empirical base frequencies?  Yes
 ** L           Form of distance matrix?  Square
 ** M 			added to the XML (missing in PiseXML) = M    Fixed the XML to respond to the weights or data option   Analyze multiple data sets? 
 ** I 		    added to the XML (missing in PiseXML) = I  Input sequences interleaved?  Yes
 ** 0			Terminal type (IBM PC, ANSI, none)?  = 0 (Not exposed to user, irrelevant) 
 ** 1           Print out the data at start of run  No
 ** 2 			(Ready to implement, when the capability is created; missing in PiseXML) 2   Print indications of progress of run  Yes         -->
 <!--
	Here is how the groups are organized:
	 group -10 = input file ("ln -s infile.phylip infile; ")
	**********The bootstrap option below is removed for swami************ 
	group -5 = Perform a bootstrap before analysis (also submits a second file called <seqboot.params>)
			contents of <seqboot.params> file
					 group 0  = terminal type; hidden parameter
					 group 1  = how many replicates?
					 group 40 = Confirm (hidden)
					 group 50 = Resampling method; Seqboot Random number seed (must be odd); confirm submit]

	 group -1 = weights file includes a weights file
	 group 0 = invoking command, calls for params file
			 contents of <params> file: where does interleaved go?
					 group 0 = terminal type hidden parameter
					 group 1 = distance (D); transition ratio (T, including variable); appears to contain frequencies (F), but does not; Weights Switch (W); Interleaved (I); 
					 group 2 = base frequencies; (contains the entire F command string) ; number of catgories appears to be in this group, but is not.
					 group 3 = category of substitution rates (C); number of categories; rate for each category; categories file; ((! $one_category)? "C\\n$n_categ\\n$categ_rates\\n" : "") 
					 group 5 =  gamma (G); chooses the G flag.
					 group 10 = Multiple data sets (M);
					 group 50 = Confirm
					 group 51 = Coefficient of variation of substitution rate among sites (If gamma) [used to be group 51]
					 group 52 = Fraction of invariant sites (if Gamma) [used to be group 52]


 -->
  </head>
  <command>dnadist</command>
		<parameters>
								 <parameter iscommand="1" ishidden="1" type="String">
								 <name>dnadist</name>
										 <attributes>
												<format>
													 <language>perl</language>
													 <code> "dnadist &lt; params" </code>
												 </format>
												 <group>0</group>
									     </attributes>
								 </parameter>
<!--Changed for SWAMI-->
						   <!-- <parameter ismandatory="1" issimple="1"  type="Sequence"> -->
								 <parameter ismandatory="1" issimple="1" isinput="1" type="Sequence">
 <!--Changed for SWAMI-->
								 <name>infile</name>
										 <attributes>
												 <prompt>Alignment File</prompt>
												 <format>
													 <language>perl</language>
											   <!-- <code>"ln -s $infile infile; "</code> -->
													 <code>"ln -s infile.phylip infile; "</code>
												 </format>
												 <group>-10</group>
												 <seqfmt>
													 <value>12</value>
												 </seqfmt>
												 <pipe>
													 <pipetype>readseq_ok_alig</pipetype>
													 <language>perl</language>
													 <code>1</code>
											 </pipe>
<!-- Added for Swami-->
											  <filenames>infile.phylip</filenames>
<!-- -->
									 </attributes>
								 </parameter>
<!--Added for SWAMI-->
								 <parameter ismandatory="1" issimple="1" type="Excl">
								 <name>interleavedinfile</name>
									 <attributes>
											 <prompt>Input sequences interleaved?</prompt>
											 <vdef><value>yes</value></vdef>
											 <vlist>
													<value>yes</value>
													<label>Yes</label>
													<value>no</value>
													<label>No</label>
											 </vlist>
											 <flist>
											 		<value>yes</value>
													<code>""</code>
													<value>no</value>
													<code>"I//n"</code>
												</flist>
											 <group>1</group>
											 <paramfile>params</paramfile>
									 </attributes>
								 </parameter>
								 <parameter ismandatory="1" issimple="1" type="Switch">
								 <name>printdata</name>
									 <attributes>
										 <prompt>Print out the data at start of run (1)</prompt>
										 <format>
											 <language>perl</language>
											 <code>($value)? "1\\n" : ""</code>
										 </format>
										 <vdef><value>0</value></vdef>
										 <group>1</group>
										 <paramfile>params</paramfile>
									 </attributes>
								 </parameter>
	<!--		*******  This can be implemented when Swami is ready for it ********
								 <parameter ismandatory="1" issimple="1" type="Switch">
								 <name>printintermediatedata</name>
									 <attributes>
										 <prompt>Print indications of progress of run  (2)</prompt>
										 <format>
											 <language>perl</language>
											 <code>($value)? "2\\n" : ""</code>
										 </format>
										 <vdef><value>0</value></vdef>
										 <group>1</group>
										 <paramfile>params</paramfile>
									 </attributes>
								 </parameter> -->
     <parameter type="Paragraph">
		  <paragraph>
		  <name>dnadist_opt</name>
		  <prompt>dnadist options</prompt>
					 <parameters>
							     <parameter type="Excl">
								 <name>distance</name>
									 <attributes>
										 <prompt>Distance (D)</prompt>
										 <vdef><value>F84</value></vdef>
										 <group>1</group>
										  <vlist>
											 <value>F84</value>
											 <label>F84</label>
											 <value>K</value>
											 <label>Kimura 2-parameter</label>
											 <value>JC</value>
											 <label>Jukes-Cantor</label>
											 <value>LogDet</value>
											 <label>LogDet</label>
											 <value>Similarity</value>
											 <label>Similarity table</label>
										 </vlist>
										 <flist>
											 <value></value>
											 <code></code>
											 <value>F84</value>
											 <code></code>
											 <value>K</value>
											 <code>"D\\n"</code>
											 <value>JC</value>
											 <code>"D\\nD\\n"</code>
											 <value>LogDet</value>
											 <code>"D\\nD\\nD\\n"</code>
											 <value>Similarity</value>
											 <code>"D\\nD\\nD\\nD\\n"</code>
										 </flist>
										 <paramfile>params</paramfile>
									 </attributes>
								 </parameter>
								 <!--<parameter type="Integer">-->
								 <parameter type="Float">
								 <name>ratio</name>
									 <attributes>
										 <prompt>Transition/transversion ratio (T)</prompt>
										 <format>
											 <language>perl</language>
											 <code>($value &amp;&amp; $value != $vdef)? "T\\n$value\\n" : ""</code>
										 </format>
										 <vdef><value>2.0</value></vdef>
										 <group>1</group>
										 <paramfile>params</paramfile>
										 <precond>
										 <language>perl</language>
										 <code>$distance eq "F84" || $distance eq "K"</code>
										 </precond>
									 </attributes>
								 </parameter>
								 <parameter type="Excl">
								 <name>gamma</name>
									 <attributes> 
										 <prompt>Gamma distributed rates across sites (G)</prompt>
										 <vdef><value>0</value></vdef>
										 <group>5</group>
										 <vlist>
											 <value>0</value>
											 <label>No</label>
											 <value>1</value>
											 <label>Yes</label>
											 <value>GI</value>
											 <label>Gamma+Invariant</label>
										 </vlist>
										 <flist>
											 <value></value>
											 <code></code>
											 <value>0</value>
											 <code></code>
											 <value>1</value>
											 <code>"G\\n"</code>
											 <value>GI</value>
											 <code>"G\\nG\\n"</code>
											 </flist>
										 <paramfile>params</paramfile>
										 <precond>
											 <language>perl</language>
											 <code>$distance eq "F84" || $distance eq "K" || $distance eq "JC"</code>
										 </precond>
									 </attributes>
								 </parameter>
								 <parameter ismandatory="1" type="Float">
								 <name>variation_coeff</name>
									 <attributes>
										 <prompt>Coefficient of variation of substitution rate among sites (must be positive) (if Gamma)</prompt>
										 <format>
											 <language>perl</language>
											 <code>($value)? "$value\\n" : ""</code>
										 </format>
<!--changed for Swami <group>1010</group> -->
										<group>51</group>
										 <paramfile>params</paramfile>
										 <precond>
											 <language>perl</language>
											 <code>$gamma</code>
										 </precond>
										 <comment>
<value>In gamma distribution parameters, this is 1/(square root of alpha)</value>
										 </comment>
									 </attributes>
								 </parameter>
								 <parameter ismandatory="1" type="Float">
								 <name>invariant_sites</name>
									 <attributes>
										 <prompt>Fraction of invariant sites (if Gamma)</prompt>
										 <format>
											 <language>perl</language>
											 <code>($value)? "$value\\n" : ""</code>
										 </format>
<!--changed for Swami <group>1011</group> -->
										 <group>52</group>
										 <paramfile>params</paramfile>
										 <precond>
											 <language>perl</language>
											 <code>$gamma eq "GI"</code>
										 </precond>
									 </attributes>
								 </parameter>
								 <parameter type="Switch">
								 <name>empirical_frequencies</name>
									 <attributes>
										 <prompt>Use empirical base frequencies (F)</prompt>
										 <vdef><value>1</value></vdef>
										 <format>
											 <language>perl</language>
		  <!-- Swami change -->
									   <!-- <code>($value)? "" : "F\\n"</code> -->
											 <code>($value)? "" : ""</code>
										 </format>
										 <group>1</group>
										 <paramfile>params</paramfile>
									 </attributes>
								 </parameter>
								 <parameter ismandatory="1" type="String">
								 <name>base_frequencies</name>
									 <attributes>  
										 <prompt>Base frequencies for A, C, G, T/U (if not empirical) (separated by space)</prompt>
										 <format>
											 <language>perl</language>
		<!-- Corrected for Swami-->
		<!-- <code>""</code>-->
											 <code>($base_frequencies)? "" : "F\\n$base_frequencies\\n"</code>
		<!---->
										 </format>
										 <group>2</group>
										 <ctrls>
											 <ctrl>
												 <message>Please check your base_frequencies entry, values should be separated by space</message>
												 <language>perl</language>
												 <code>! $base_frequencies =~ /,/</code>
											 </ctrl>
										 </ctrls>
										 <precond>
											 <language>perl</language>
											 <code>! $empirical_frequencies</code>
										 </precond>
										 <paramfile>params</paramfile>
									 </attributes>
								 </parameter>
					 </parameters>
			 </paragraph>
     </parameter>
     <parameter type="Paragraph">
		  <paragraph>
		  <name>categ_opt</name>
		  <prompt>Categories options</prompt>
				 <comment>
 <value>To use this option, uncheck the box, specify the number of categories, and specify the rate associated with each.
  The values cannot be negative but can be zero. These numbers are defined relative to each other, so that if rates for
  three categories are set to 1 : 3 : 2.5 this would have the same meaning as setting them to 2 : 6 : 5.
  The assignment of rates to sites is made by reading a file. It should contain a string of digits 1 through 9.
  A new line or a blank can occur after any character in this string. Thus the categories file might look like this:</value>
<value>122231111122411155</value>
<value>1155333333444</value>
<value>If both user-assigned rate categories and Gamma-distributed rates are allowed,
 the program assumes that the actual rate at a site is the product of the user-assigned category rate and the
 Gamma-distributed rate. This allows you to specify that certain sites have higher or lower rates of change while
 also allowing the program to allow variation of rates in addition to that.
 (This may not always make perfect biological sense: it would be more natural to assume some upper bound to the rate,
 as we have discussed in the Felsenstein and Churchill paper). Nevertheless you may want to use both types of rate
 variation.</value>
				 </comment>
					 <parameters>
								 <parameter type="Switch">
								 <name>one_category</name>
									 <attributes> 
										 <prompt>One category of substitution rates (C)</prompt>
										 <format>
											 <language>perl</language>
											 <code>(! $one_category)? "C\\n$n_categ\\n$categ_rates\\n" : "" </code>
										 </format>
										 <vdef><value>1</value></vdef>
										 <group>3</group>
										 <paramfile>params</paramfile>
										 <precond>
											 <language>perl</language>
											 <code>$distance eq "F84" || $distance eq "K" || $distance eq "JC"</code>
										 </precond>
									 </attributes>
								 </parameter>
								 <parameter ismandatory="1" type="Integer">
								 <name>n_categ</name>
									 <attributes>
										 <prompt>Number of categories (1 to 9)</prompt>
										 <format>
											 <language>perl</language>
											 <code>""</code>
										 </format>
										 <group>2</group>
										 <ctrls>
											 <ctrl>
												 <message>there must be no more than 9 categories</message>
												 <language>perl</language>
												 <code>$value &gt; 9</code>
											 </ctrl>
											 <ctrl>
											 <message>there must be at least one category</message>
											 <language>perl</language>
											 <code>$value &lt; 1</code>
											 </ctrl>
										 </ctrls>
										 <precond>
											 <language>perl</language>
											 <code>! $one_category</code>
										 </precond>
									 </attributes>
								 </parameter>
								 <parameter ismandatory="1" type="String">
								 <name>categ_rates</name>
									 <attributes>
										 <prompt>Rate for each category (separated by commas)</prompt>
										 <format>
											 <language>perl</language>
											 <code>""</code>
										 </format>
										 <group>3</group>
										 <ctrls>
											 <ctrl>
												 <message>The rate must be non-negative and greater than 0</message>
												 <language>perl</language>
												  <code>! $categ_rates =~ /,/</code>
											 </ctrl>
										 </ctrls>
										 <precond>
											 <language>perl</language>
											 <code>! $one_category</code>
										 </precond>
									 </attributes>
								 </parameter>
	 <!-- Swami modification for category file -->
								 <parameter ismandatory="1" type="InFile">
								 <name>categ_file</name>
									 <attributes>
										 <prompt>Categories file </prompt>
										 <format>
											 <language>perl</language>
											 <code>""</code>
										 </format>
										 <group>3</group>
										 <precond>
										 <language>perl</language>
										 <code>! $one_category</code>
										 </precond>
										 <filenames>categories</filenames>
									 </attributes>
								 </parameter>
	  <!-- -->
				 </parameters>
		  </paragraph>
    </parameter>
     <parameter type="Paragraph">
		  <paragraph>
		  <name>weight_opt</name>
		  <prompt>Weight options</prompt>
				 <parameters>
								 <parameter type="Switch">
								 <name>weights</name>
									 <attributes>
										 <prompt>Use weights for sites (W)</prompt>
										 <format>
											 <language>perl</language>
											 <code>($value)? "W\\n" : ""</code>
										 </format>
										 <group>1</group>
										 <paramfile>params</paramfile>
										 <comment>
<value> The W (Weights) option. This allows the user to read in a series of weights that tell how many times each character is to be counted.
 If the weight for a character is zero (0) then that character is effectvely omitted when the tree is evaluated. If it is (1),
 the character is to be counted once.
 A value greater than one means the character is counted as if it were present that many times, a weight of 4 means
 the character is counted 4 times. The values 0-9 give weights 0 through 9, while values A-Z give weights 10 through 35.</value>
<value>
 Weights are used to analyze subsets of characters, and can also be used for resampling of the data as in bootstrap and jackknife
 resampling. For programs that allow weights to be greater than 1, they can also be used to emphasize information from some characters
 more strongly than others. Of course, you must have some rationale for doing this. </value>
<value>Weights are provided as a sequence of digits. For example:</value>
<value>10011111100010100011110001100 </value>
<value>The weights are to be provided in an input file. The weights in it are a simple string of digits or letters. Blanks in the
 weightfile are skipped over and ignored, and new lines are ignored.
</value>
										 </comment>	      
									 </attributes>
								 </parameter>
								 <parameter type="InFile">
								 <name>weights_file</name>
									 <attributes>
										 <prompt>Weights file</prompt>
										 <format>
											 <language>perl</language>
									   <!-- <code>($value)? "ln -s $weights_file weights; " : ""</code> -->
											 <code>($value)? "ln -s weights_file.param weights; " : ""</code>
										 </format>
<!-- read in the weights file, call it weights_file.param; then rename it to "weights" -->
										 <group>-1</group>
										 <precond>
											 <language>perl</language>
											 <code>$weights</code>
										 </precond>
<!-- Added for Swami-->
										 <filenames>weights_file.param</filenames>
 <!-- -->
								     </attributes>
								 </parameter>
				 </parameters>
		  </paragraph>
     </parameter>
	<!-- This option is not supported  in Swami -->
    <!-- <parameter type="Paragraph">
		   <paragraph>
		   <name>bootstrap</name>
		   <prompt>Bootstrap options</prompt>
				 <parameters> 
								 <parameter type="Switch">
								 <name>seqboot</name>
									 <attributes> 
										 <prompt>Perform a bootstrap before analysis</prompt>
										 <format>
											 <language>perl</language>
											 <code>($value)? "seqboot &lt;  seqboot.params &amp;&amp; mv -f outfile infile &amp;&amp;" : ""</code>
										 </format>
										 <vdef><value>0</value></vdef>
										 <group>-5</group>
										 <comment>
<value>By selecting this option, the bootstrap will be performed on your sequence file, without performing
 a separate bootstrap, and submitting multiple sequence files. For this reason the -M option is not offered for this
  program</value>
										 </comment>
									 </attributes>
								 </parameter>
								 <parameter ismandatory="1" type="Excl">
								 <name>method</name>
									 <attributes>
										 <prompt>Resampling methods</prompt>
										 <vdef><value>bootstrap</value></vdef>
										 <group>1</group>
										 <vlist>
											 <value>bootstrap</value>
											 <label>Bootstrap</label>
											 <value>jackknife</value>
											 <label>Delete-half jackknife</label>
											 <value>permute</value>
											 <label>Permute species for each character</label>
										 </vlist>
										 <flist>
											 <value>permute</value>
											 <code>"J\\nJ\\n"</code>
											 <value>bootstrap</value>
											 <code>""</code>
											 <value>jackknife</value>
											 <code>"J\\n"</code>
										 </flist>
										 <comment>
 <value>1. The bootstrap. Bootstrapping was invented by Bradley Efron in 1979, and its use in phylogeny estimation was introduced by Felsenstein, 1985b. It involves creating a new data set by sampling N characters randomly with replacement, so that the resulting data set has the same size as the original, but some characters have been left out and others are duplicated. The random variation of the results from analyzing these bootstrapped data sets can be shown statistically to be typical of the variation that you would get from collecting new data sets. The method assumes that the characters	 evolve independently, an assumption that may not be realistic for many kinds of data.</value>
<value>2. Delete-half-jackknifing. This alternative to the bootstrap involves sampling a random half of the characters,
and including them in the data but dropping the others. The resulting data sets are half the size of the original, and
no characters are duplicated. The random variation from doing this should be very similar to that obtained from the bootstrap.
The method is advocated by Wu (1986).</value>
<value>3. Permuting species within characters. This method of resampling (well, OK, it may not be best to call
it resampling) was introduced by Archie (1989) and Faith (1990; see also Faith and Cranston, 1991). It involves
permuting the columns of the data matrix separately. This produces data matrices that have the same number and kinds
of characters but no taxonomic structure. It is used for different purposes than the bootstrap, as it tests not the
variation around an estimated tree but the hypothesis that there is no taxonomic structure in the data: if a statistic
such as number of steps is significantly smaller in the actual data than it is in replicates that are permuted, then
we can argue that there is some taxonomic structure in the data (though perhaps it might be just a pair of sibling species).</value>
										 </comment>
										 <precond>
											 <language>perl</language>
											 <code>$seqboot</code>
										 </precond>
										 <paramfile>seqboot.params</paramfile>
									 </attributes>
								 </parameter>
								 <parameter ismandatory="1" type="Integer">
								 <name>seqboot_seed</name>
									 <attributes>
										 <prompt>Random number seed (must be odd)</prompt>
										 <format>
										 <language>perl</language>
										 <code>"$value\\n"</code>
										 </format>
	<group> modified for Swami 1000</group>
										 <group>50</group>
										 <ctrls>
											 <ctrl>
												 <message>Random number seed must be odd</message>
												 <language>perl</language>
												 <code>$value &lt;= 0 || (($value % 2) == 0)</code>
											 </ctrl>
										 </ctrls>
										 <precond>
											 <language>perl</language>
											 <code>$seqboot</code>
										 </precond>
										 <paramfile>seqboot.params</paramfile>
									 </attributes>
								 </parameter>
								 <parameter ismandatory="1" type="Integer">
								 <name>replicates</name>
									 <attributes>
										 <prompt>How many replicates</prompt>
										 <format>
										 <language>perl</language>
										 <code>($value &amp;&amp; $value != $vdef)? "R\\n$value\\n" : ""</code>
										 </format>
										 <vdef><value>100</value></vdef>
										 <group>1</group>
										 <ctrls>
											 <ctrl>
												 <message>this server allows no more than 1000 replicates</message>
												 <language>perl</language>
												 <code>$replicates &gt; 1000</code>
											 </ctrl>
										 </ctrls>
										 <precond>
											 <language>perl</language>
											 <code>$seqboot</code>
										 </precond>
										 <paramfile>seqboot.params</paramfile>
									 </attributes>
								 </parameter>
				 </parameters>
		  </paragraph>
     </parameter> -->

<!-- (missing in PiseXML) = M              Multiple,Weights or data?      Analyze multiple data sets?  No-->
 <!-- change for swami <prompt>Multiple Datasets</prompt>	 -->
     <parameter type="Paragraph">
		  <paragraph>
		  <name>bootstrap</name>
		  <prompt>Multiple Datasets: Use Seqboot to create multiple data or weights, Use Consense to get a Consensus tree</prompt>
				 <parameters>
								 <parameter type="Switch">
								 <name>multiple_dataset</name>
									 <attributes>
										 <prompt>Analyze multiple data sets (M)</prompt>
										 <format>
<!--modified to accomodate the weights or data prompt -->
											 <language>perl</language>
											 <code>($value) ? "" : ""</code>
										 </format>
										 <vdef><value>0</value></vdef>
										 <group>9</group>
										 <paramfile>params</paramfile>
										 <comment>
<value>The M (multiple data sets) option will ask you whether you want to use multiple sets of weights (from the weights file)
or multiple data sets from the input file. The ability to use a single data set with multiple weights means that much less disk
space will be used for this input data. The bootstrapping and jackknifing tool Seqboot has the ability to create a weights file
with multiple weights. Note also that when we use multiple weights for bootstrapping we can also then maintain different rate
categories for different sites in a meaningful way. You should not use the multiple data sets option without using multiple weights,
you should not at the same time use the user-defined rate categories option (option C). If you use the multiple data sets option without
using multiple weights, you should not at the same time use the user-defined rate categories option (option C). The reason for this
restriction is: that if you use the M option and use multiple weights, then you have the possibility of associating categories (C)
with sites as well. But if you use multiple data sets rather than multiple weights, then the categories cannot be appropriately associated
with the sites because the sites (if you have bootstrapped) can move around.
Using the program Seqboot, one can take any DNA (or other) data set and make multiple data sets by bootstrapping.
Trees can be produced for all of these using the M option. They will be written on the tree output file if that option is left in force.
The program Consense can take the multi-tree output file and create a majority rule consensus tree that can be used to make confidence intervals.
The present version of the package allows bootstrapping with the use
of Seqboot and Consense. Currently, in SWAMI, Consense must be run separately, rather than invoking them from this interface.</value>
<value>Here is a (very small) sample input file with two five-species data sets: </value>
<value></value>
 <value>5    6</value>
<value>Alpha     CCACCA</value>
<value>Beta      CCAAAA</value>
<value>Gamma     CAACCA</value>
<value>Delta     AACAAC</value>
<value>Epsilon   AACCCA</value>
<value>5    6</value>
<value>Alpha     CACACA</value>
<value>Beta      CCAACC</value>
<value>Gamma     CAACAC</value>
<value>Delta     GCCTGG</value>
<value>Epsilon   TGCAAT</value>
										 </comment>
									 </attributes>
								 </parameter>
								 <parameter ismandatory="1" type="Excl">
								 <name>weightsordata</name>
									 <attributes>
										 <prompt>Multiple data sets or multiple weights? </prompt>
										 <vdef><value>data</value></vdef>
										 <vlist>
												 <value>data</value>
												 <label>Data</label>
												 <value>weights</value>
												 <label>Weights</label>
										 </vlist>
										 <flist>
										 		 <value>data</value>
												 <code>"M\\nD\\n$datasets_nb\\n"</code>
												 <value>weights</value>
												 <code>"M\\nW\\n$datasets_nb\\n"</code>
										 </flist>
<!-- this is labelled group 9, but it is delivered in group 10 as part of the /m command -->
										 <group>10</group>
										 <paramfile>params</paramfile>
										 <precond>
											 <language>perl</language>
											 <code>$multiple_dataset</code>
										 </precond>
									 </attributes>
								 </parameter>
								 <parameter ismandatory="1" type="Integer">
								 <name>datasets_nb</name>
									 <attributes>
										 <prompt>How many data sets?</prompt>
										 <format>
											 <language>perl</language>
											 <code>""</code>
										 </format>
<!-- this is labelled group 9, but it is delivered in group 10 as part of the /m command -->
										 <group>9</group>
										 <paramfile>params</paramfile>
										 <precond>
											 <language>perl</language>
											 <code>$multiple_dataset</code>
										 </precond>
										 <ctrls>
											 <ctrl>
											     <message>there must be no more than 1000 datasets for this server</message>
												 <language>perl</language>
												 <code>$value &gt; 1000</code>
											 </ctrl>
									     </ctrls>
									 </attributes>
								 </parameter>
<!-- removed for Swami; this is not a valid parameter for  DNAdist    -->
<!--								 <parameter ismandatory="1" type="Integer">
								 <name>multiple_seed</name>
									 <attributes>
										 <prompt>Random number seed for multiple dataset (must be odd)</prompt>
										 <format>
											 <language>perl</language>
											 <code>""</code>
										 </format>
										 <ctrls>
											 <ctrl>
												 <message>Random number seed must be odd</message>
												 <language>perl</language>
												 <code>$value &lt;= 0 || (($value % 2) == 0)</code>
											 </ctrl>
										 </ctrls>
										 <precond>
											 <language>perl</language>
											 <code>$:multiple_dataset</code>
										 </precond>
										 <paramfile>params</paramfile>	      
									 </attributes>
								 </parameter>	 --> 
	<!-- not valid for swami	
		  <parameter type="Switch">
	    <name>consense</name>
	    <attributes>
	      <prompt>Compute a consensus tree</prompt>
	      <format>
		<language>perl</language>
		<code>($value) ? "; cp -f infile infile.kitsch; cp -f outtree outtree.kitsch; mv -f outfile outfile.kitsch; mv -f outtree intree; consense &lt; consense.params; cp -f outtree outtree.consense; cp -f outfile outfile.consense; mv -f outtree.kitsch outtree; mv -f infile.kitsch infile; mv -f outfile.kitsch outfile" : ""</code>
	      </format>
	      <vdef><value>0</value></vdef>
	      <group>10</group>
	      <precond>
		<language>perl</language>
		<code>$multiple_dataset &amp;&amp; $print_treefile</code>
	      </precond>
	    </attributes>
	  </parameter>
	-->
				 </parameters>
		 </paragraph>
	</parameter>
     <parameter type="Paragraph">
		  <paragraph>
		  <name>output</name>
		  <prompt>Output options</prompt>
				 <parameters>
								 <parameter type="Switch">
								 <name>matrix_form</name>
									 <attributes>
										 <prompt>Lower-triangular distance matrix (L)</prompt>
										 <format>
											 <language>perl</language>
											 <code>($value)? "L\\n" : ""</code>
										 </format>
										 <vdef><value>0</value></vdef>
										 <group>1</group>
										 <paramfile>params</paramfile>
										 <comment>
<value>The output file contains on its first line the number of species. The distance matrix is then printed in
 standard form, with each species starting on a new line with the species name, followed by the distances to the species
 in order. These continue onto a new line after every nine distances. If the L option is used, the matrix or distances is
 in lower triangular form, so that only the distances to the other species that precede each species are printed. Otherwise
 the distance matrix is square with zero distances on the diagonal. In general the format of the distance matrix is such
 that it can serve as input to any of the distance matrix programs.</value>

<value>If the C (Categories) option is used a table of the relative rates of expected substitution at each category of
 sites is printed, and a listing of the categories each site is in.</value>

<value>Then follow the equilibrium frequencies of the four bases. If the Jukes-Cantor or Kimura distances are used,
 these will necessarily be 0.25 : 0.25 : 0.25 : 0.25. The output then shows the transition/transversion ratio that
 was specified or used by default. In the case of the Jukes-Cantor distance this will always be 0.5.
 The transition-transversion parameter (as opposed to the ratio) is also printed out: this is used within the program
 and can be ignored. There then follow the data sequences, with the base sequences printed in groups of ten bases along
 the lines of the Genbank and GBMAM formats.</value>
<value>The distances printed out are scaled in terms of expected numbers of substitutions, counting both transitions and
 transversions but not replacements of a base by itself, and scaled so that the average rate of change, averaged over all
 sites analyzed, is set to 1.0 if there are multiple categories of sites. This means that whether or not there are multiple
 categories of sites, the expected fraction of change for very small branches is equal to the branch length. Of course,
 when a branch is twice as long this does not mean that there will be twice as much net change expected along it, since
 some of the changes may occur in the same site and overlie or even reverse each other. The branch lengths estimates
 here are in terms of the expected underlying numbers of changes. That means that a branch of length 0.26 is 26 times
 as long as one which would show a 1% difference between the nucleotide sequences at the beginning and end of the branch. But we would not expect the sequences at the beginning and end of the branch to be 26% different, as there would be some overlaying of changes.
</value>
<value>&#169;Copyright 1980-2007. University of Washington.</value>
										 </comment>
									 </attributes>
								 </parameter>
				 </parameters>
		  </paragraph>
     </parameter>
<!--*********** returns all parameters for diagnosis **********************
								 <parameter type="Results">
								 <name>all_files</name>
									 <attributes>
										 <filenames>*</filenames>
									 </attributes>
								 </parameter>
-->

								 <parameter type="Results">
								 <name>outfile</name>
									 <attributes>
										 <filenames>outfile</filenames>
											 <pipe>
												 <pipetype>phylip_dist</pipetype>
												 <language>perl</language>
												 <code>1</code>
											 </pipe>
									 </attributes>
								 </parameter>

								 <parameter type="Results">
								 <name>params</name>
									 <attributes>
										 <filenames>params</filenames>
									 </attributes>
								 </parameter>
								 <parameter ishidden="1" type="String">
								 <name>confirm</name>
									 <attributes>
										 <format>
											 <language>perl</language>
											 <code>"y\\n"</code>
										 </format>
	<!--<group>1000</group> -->
										 <group>50</group>
										 <paramfile>params</paramfile>
									 </attributes>
								 </parameter>
	<!--terminal type is hidden from user selection  -->
								 <parameter ishidden="1" type="String">
								 <name>terminal_type</name>
									 <attributes>
										 <format>
											 <language>perl</language>
											 <code>"0\\n"</code>
										 </format>
	<!--<group>-1</group> -->
										 <group>0</group>
										 <paramfile>params</paramfile>
									 </attributes>
								 </parameter>
	<!-- not supported in Swami -->
	<!--							 <parameter ishidden="1" type="String">
								 <name>multiple_dataset</name>
									 <attributes>
										 <format>
											 <language>perl</language>
	   use the Multi option, specify data; and ask for this many replicates 
											 <code>"M\\nD\\n$replicates\\n"</code>
										 </format>
										 <group>1</group>
										 <precond>
										 <language>perl</language>
										 <code>$seqboot</code>
										 </precond>
										 <paramfile>params</paramfile>
	   add a control to prevent simultaneous invocation of M in two ways....
									 </attributes>
								 </parameter>
								 <parameter ishidden="1" type="String">
								 <name>seqboot_confirm</name>
									 <attributes>
										 <format>
											 <language>perl</language>
											 <code>"y\\n"</code>
										 </format>
		<group>100</group> 
										 <group>40</group>
										 <precond>
											 <language>perl</language>
											 <code>$seqboot</code>
										 </precond>
										 <paramfile>seqboot.params</paramfile>
									 </attributes>
								 </parameter>
								 <parameter ishidden="1" type="String">
								 <name>seqboot_terminal_type</name>
									 <attributes>
										 <format>
											 <language>perl</language>
											 <code>"0\\n"</code>
										 </format>
		<group>-1</group>
										 <group>0</group>
										 <precond>
											 <language>perl</language>
											 <code>$seqboot</code>
										 </precond>
										 <paramfile>seqboot.params</paramfile>
									 </attributes>
								 </parameter>
-->
								 <parameter type="Results">
								 <name>tmp_params</name>
									 <attributes>
										 <filenames>*.params</filenames>
									 </attributes>
								</parameter>
		</parameters>
</pise>
