<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE pise SYSTEM "http://www.phylo.org/dev/rami/PARSER/pise.dtd">

<pise>

  <head>
    <title>Mix</title>
    <version>Phylip 3.66</version>
    <description>Mixed method parsimony</description>
        <authors>Felsenstein</authors>
    <reference>Felsenstein, J.  2007.  PHYLIP -- Phylogeny Inference Package (Version 3.682). Distributed by the author.  Department of Genetics, University of Washington, Seattle.</reference>
    <reference>Felsenstein, J.  1989.  PHYLIP -- Phylogeny Inference Package (Version 3.2). Cladistics  5: 164-166.</reference>
	<category>Phylogeny / Alignment</category>
    <doclink>http://bioweb.pasteur.fr/docs/gensoft-evol.html#PHYLIP</doclink>
  </head>


  <command>mix</command>
  <parameters>
    
    <parameter iscommand="1" ishidden="1" type="String">
      <name>mix</name>
      <attributes>
	<format>
	  <language>perl</language>
	  <code> "mix &lt; params" </code>
	</format>
	<group>0</group>
      </attributes>
    </parameter>
    
	<!-- <parameter ismandatory="1" issimple="1"  type="InFile"> -->
    <parameter ismandatory="1" issimple="1" isinput="1" type="InFile">
      <name>infile</name>
      <attributes>
	<prompt>Input File</prompt>
	<format>
	  <language>perl</language>
	<!-- <code>"ln -s $infile infile; "</code> -->
	   <code>""</code>
	</format>
	<group>-10</group>
	<comment>
	  <value>Example input file:</value>
	  <value>&#xA0;&#xA0;&#xA0;&#xA0;5&#xA0;&#xA0;&#xA0;&#xA0;6</value>
	  <value>Alpha&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;110110</value>
	  <value>Beta&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;110000</value>
	  <value>Gamma&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;100110</value>
	  <value>Delta&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;001001</value>
	  <value>Epsilon&#xA0;&#xA0;&#xA0;001110</value>
	</comment>
	<!-- Added for Swami -->
	<filenames>infile</filenames>
	<!-- -->
      </attributes>
    </parameter>

    <parameter type="Paragraph">
      <paragraph>
	<name>mix_opt</name>
	<prompt>Mix options</prompt>
	<parameters>

	  <parameter type="Switch">
	    <name>use_mixed</name>
	    <attributes>
	      <prompt>Use Mixture method (X)</prompt>
	      <vdef>
		<value>0</value>
	      </vdef>
	      <format>
		<language>perl</language>
		<code>($value)? "X\\n" : ""</code>
	      </format>
	      <group>1</group>
	      <paramfile>params</paramfile>
	      <comment>
		<value>Mix is a general parsimony program that carries out the Wagner and Camin-Sokal parsimony methods in
		 mixture, where each character can have its method specified separately. The program defaults to carrying out
		 Wagner parsimony.</value>

<value>The Camin-Sokal parsimony method explains the data by assuming that changes 0 --> 1 are allowed but not changes
 1 --> 0. Wagner parsimony allows both kinds of changes. (This under the assumption that 0 is the ancestral state,
 though the program allows reassignment of the ancestral state, in which case we must reverse the state numbers 0 and
 1 throughout this discussion). The criterion is to find the tree which requires the minimum number of changes. The
 Camin-Sokal method is due to Camin and Sokal (1965) and the Wagner method to Eck and Dayhoff (1966) and to Kluge and
 Farris (1969).</value>

<value>Here are the assumptions of these two methods: </value>

<value>Ancestral states are known (Camin-Sokal) or unknown (Wagner). </value>
<value>Different characters evolve independently. </value>
<value>Different lineages evolve independently. </value>
<value>Changes 0 --> 1 are much more probable than changes 1 --> 0 (Camin-Sokal) or equally probable (Wagner). </value>
<value>Both of these kinds of changes are a priori improbable over the evolutionary time spans involved in the differentiation of the group in question.</value> 
<value>Other kinds of evolutionary event such as retention of polymorphism are far less probable than 0 --> 1 changes. </value>
<value>Rates of evolution in different lineages are sufficiently low that two changes in a long segment of the tree are far less probable than one change in a short segment. </value>
<value>That these are the assumptions of parsimony methods has been documented in a series of papers of mine:
 (1973a, 1978b, 1979, 1981b, 1983b, 1988b). For an opposing view arguing that the parsimony methods make no substantive
 assumptions such as these, see the papers by Farris (1983) and Sober (1983a, 1983b), but also read the exchange between
 Felsenstein and Sober (1986).</value>
<value>To use the Mixture method, uncheck the box, and upload a file containing one letter for each character. 
 These letters are C or S if the  character is to be reconstructed according to Camin-Sokal parsimony.
 The letters are W  or ? if the character is to be reconstructed according to Wagner parsimony. So if there are
 10 characters the line giving the mixture might look like this:</value>
		<value>Mixture   WWWCC WWCWC</value>
	     <value>Blank spaces, and line breaks are ignored.</value></comment>
	    </attributes>
	  </parameter>
	 
<!-- Added for Swami-->	  
    <parameter   type="InFile">
      <name>mixture_file</name>
      <attributes>
	<prompt>Input Mixture File</prompt>
     <precond>
		<language>perl</language>
		<code>$use_mixed</code>
	 </precond>
	<format>
	  <language>perl</language>
	   <code>""</code>
	</format>
	<group>-99</group>
	<filenames>mixture</filenames>
      </attributes>
    </parameter>
<!-- -->

	  <parameter ismandatory="1" type="Excl">
	    <name>parsimony_method</name>
	    <attributes>
	      <precond>
		<language>perl</language>
		<code>! $use_mixed</code>
	      </precond>
	      <prompt>Parsimony method (P)</prompt>
	      <format>
		<language>perl</language>
		<code>($value eq "camin")? "P\\n" : "" </code>
	      </format>
	      <vdef><value>neighbor</value></vdef>
	      <group>1</group>
	      <vlist>
		<value>wagner</value>
		<label>Wagner</label>
		<value>camin</value>
		<label>Camin-Sokal</label>
	      </vlist>
	      <paramfile>params</paramfile>
	      <comment><value>The user can specify for each character which parsimony method is in effect. This is done by providing an input mixture file, whose default name = mixture. It contains a line or lines with and one letter for each character. These letters are C or S if the character is to be reconstructed according to Camin-Sokal parsimony, W or ? if the character is to be reconstructed according to Wagner parsimony. So if there are 20 characters the line giving the mixture might look like this:</value>
	      <value>WWWCC WWCWC</value>

<value>Note that blanks in the seqence of characters (after the first ones that are as long as the species names) will be ignored, and the information can go on to a new line at any point. So this could equally well have been specified by </value>

<value>WW</value>
<value>CCCWWCWC</value></comment>
	      <comment>
		<value>Only if Use Mixed method is disabled.</value>
	      </comment>
	    </attributes>
	  </parameter>

	  <parameter type="Switch">
	    <name>use_ancestral_state</name>
	    <attributes>
	      <prompt>Use ancestral states in input file (A)</prompt>
	      <format>
		<language>perl</language>
		<code>($value)? "A\\n" : ""</code>
	      </format>
	      <group>1</group>
	      <paramfile>params</paramfile>
	      <comment>
		<value>The A (Ancestral states) option. This specifies the ancestral states for each character. An ancestral
		 states input file is read, whose default name = ancestors. It contains a line or lines giving the ancestral
		 states for each character. These may be 0, 1 or ?, the latter indicating that the ancestral state is unknown.
		 If the A option is invoked, the ancestor is not to be counted as one of the species.</value>

<value>An example is: </value>

<value>001??11 </value>

<value>The ancestor information can be continued to a new line and can have blanks between any of the characters.
</value>
	      </comment>
	    </attributes>
	  </parameter>
	  

	  <parameter type="InFile">
	    <name>ancestral_state_file</name>
	    <attributes>
	      <prompt>Ancestors state file</prompt>
	      <format>
		<language>perl</language>
		<code>""</code>
	      </format>
	      <group>1</group>
	     <filenames>ancestors</filenames>
		 <precond>
			<language>perl</language>
			<code>$use_ancestral_state</code>
		 </precond>
	    </attributes>
	  </parameter>

	  
	</parameters>
      </paragraph>

    </parameter>

    <parameter type="Paragraph">
      <paragraph>
	<name>jumble_opt</name>
	<prompt>Randomize options</prompt>
	<parameters>
	  
	  <parameter type="Switch">
	    <name>jumble</name>
	    <attributes>
	      <prompt>Randomize (jumble) input order (J)</prompt>
	      <format>
		<language>perl</language>
		<code>($value)? "j\\n$jumble_seed\\n$times\\n" : "" </code>
	      </format>
	      <vdef><value>0</value></vdef>
	      <group>20</group>
	      <paramfile>params</paramfile>
		  
		  <!-- Added for Swami-->
		  <precond>
			<language>perl</language>
			<code>$value</code>
		  </precond>
		  <!-- -->
		  
	      <comment>
	      <value>The J (Jumble) option. In most tree construction programs, the search of different trees depends on
	       the order of input of species. The J option tells the program to use a random number generator to choose the
	       input order of species. If you select Jumble, you must provide a "seed" for the random number generator. The
	       seed should be an integer between 1 and be of form 4n+1. Each different seed leads to a different sequence
	       of addition of species. By simply changing the random number seed and re-running the programs one can look
	       for other, and better trees.</value>

			<value>Using the Jumble option, you must specify how many times you want to restart the process. The value 10 causes
			 ten different orders of species to be used in constructing the trees, and the results printed out will reflect this
			 entire search process (that is, the best trees found among all 10 runs will be printed out, not the best trees from
			 each individual run).
			</value>
			</comment>
	    </attributes>
	  </parameter>
	  
	  <parameter ismandatory="1" type="Integer">
	    <name>jumble_seed</name>
	    <attributes>
	      <prompt>Random number seed (must be odd)</prompt>
	      <format>
		<language>perl</language>
		<code>""</code>
	      </format>
	      <group>19</group>
	      <ctrls>
		<ctrl>
		  <message>Random number seed must be odd</message>
		  <language>perl</language>
		  <code>$value &lt;= 0 || (($value % 2) == 0)</code>
		</ctrl>
	      </ctrls>
	      <precond>
		<language>perl</language>
		<code>$jumble</code>
	      </precond>
	    </attributes>
	  </parameter>

	  <parameter type="Integer">
	    <name>times</name>
	    <attributes>
	      <prompt>Number of times to jumble</prompt>
	      <format>
		<language>perl</language>
		<code>""</code>
	      </format>
	      <vdef><value>1</value></vdef>
	      <group>19</group>
	    </attributes>
	  </parameter>

	</parameters>
      </paragraph>
      
    </parameter>

    <parameter type="Paragraph">
      <paragraph>
	<name>user_tree_opt</name>
	<prompt>User tree options</prompt>
	<parameters>

	  <parameter type="Switch">
	    <name>user_tree</name>
	    <attributes>
	      <prompt>Use User tree (default: no, search for best tree) (U)</prompt>
	      <format>
		<language>perl</language>
		<code>($value)? "U\\n" : "" </code>
	      </format>
	      <vdef><value>0</value></vdef>
	      <group>1</group>
	      <ctrls>
		<ctrl>
		  <message>you cannot randomize (jumble) your dataset and give a user tree at the same time</message>
		  <language>perl</language>
		  <code>$user_tree &amp;&amp; $jumble</code>
		</ctrl>
	      </ctrls>
	      <paramfile>params</paramfile>
	      <comment>
	      <value>The U (User tree) option. This option toggles between the default setting, which allows the program to
	       search for the best tree, and the User tree setting, which reads a tree or trees ("user trees") from an input
	       tree file. The input tree file default name is intree.</value>

<value>((Alligator,Bear),((Cow,(Dog,Elephant)),Ferret));</value>
<value>((Alligator,Bear),(((Cow,Dog),Elephant),Ferret));</value>
<value>((Alligator,Bear),((Cow,Dog),(Elephant,Ferret)));</value>
<value>User-defined trees must be given as rooted trees with two-way splits (bifurcations).</value>
<value>You must then enter the number of trees submitted.</value>
<value>In using the user tree option, check the pattern of parentheses carefully. The programs do not always detect
 whether the tree makes sense, and if it does not there will probably be a crash (hopefully, but not inevitably, with
 an error message indicating the nature of the problem). Trees written out by programs are typically in the proper form.
 </value>
</comment>
	    </attributes>
	  </parameter>

	  <parameter type="InFile">
	    <name>tree_file</name>
	    <attributes>
	      <prompt>User Tree file</prompt>
		<format>
		<language>perl</language>
		<!--<code>($value)? "cat $tree_file &gt;&gt; infile; " : ""</code>-->
		<code>""</code>
	      </format>
	      <group>-1</group>
	      <comment>
		<value>Give a tree whenever the infile does not already contain the tree.</value>
	      </comment>
	      <precond>
		<language>perl</language>
		<code>$user_tree</code>
	      </precond>
		  <!-- Added for Swami -->
		  <filenames>intree</filenames>
		  <!-- -->
	    </attributes>
	  </parameter>
<!--	  
	  <parameter ismandatory="1" type="Integer">
	    <name>tree_nb</name>
	    <attributes>
	      <prompt>How many tree(s) in the User Tree file</prompt>
	      <format>
		<language>perl</language>
		<code>"echo $value &gt;&gt; infile; "</code>
	      </format>
	      <vdef><value>1</value></vdef>
	      <group>-2</group>
	      <comment>
		<value>Give this information whenever the infile does not already contain the tree.</value>
	      </comment>
	      <precond>
		<language>perl</language>
		<code>$tree_file</code>
	      </precond>
	    </attributes>
	  </parameter>
-->	  
	</parameters>
      </paragraph>
      
    </parameter>

    <parameter type="Paragraph">
      <paragraph>
	<name>bootstrap</name>
	<prompt>Multiple Dataset Options</prompt>
	<parameters>

	  <parameter type="Switch">
	    <name>multiple_dataset</name>
	    <attributes>
	      <prompt>Analyze multiple data sets (M)</prompt>
	      <format>
		<language>perl</language>
		<code>($value)? "M\\nD\\n$datasets_nb\\n" : ""</code>
	      </format>
	      <vdef><value>0</value></vdef>
	      <group>10</group>
	      <paramfile>params</paramfile>
	      <comment>
	      <value>The M (Multiple data sets) option allows bootstrapping.
	       Using the program Seqboot, one can take any DNA, protein, restriction sites, gene frequency or binary
	       character data set and make multiple data sets by bootstrapping. Trees can be produced for all of these
	       using the M option. They will be written on the tree output file if that option is left in force. The
	       program Consense can take the multi-tree output file ands create a majority rule consensus tree that can
	       be used to make confidence intervals. The present version of the package allows bootstrapping with the use
	       of Seqboot and Consense and the M option.</value>

<value>Here is a (very small) sample input file with two five-species data sets: </value>

<value>&#xA0;&#xA0;&#xA0;&#xA0;5&#xA0;&#xA0;&#xA0;6</value>
<value>Alpha&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;110110</value>
<value>Beta&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;110000</value>
<value>Gamma&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;100110</value>
<value>Delta&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;001001C</value>
<value>Epsilon&#xA0;&#xA0;&#xA0;001110</value>
<value>&#xA0;&#xA0;&#xA0;&#xA0;5&#xA0;&#xA0;&#xA0;6</value>
<value>Alpha&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;110110</value>
<value>Beta&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;110000</value>
<value>Gamma&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;100110</value>
<value>Delta&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;001001C</value>
<value>Epsilon&#xA0;&#xA0;&#xA0;001110</value>
</comment>
	    </attributes>
	  </parameter>

	  <parameter ismandatory="1" type="Integer">
	    <name>datasets_nb</name>
	    <attributes>
	      <prompt>How many data sets</prompt>
	      <format>
		<language>perl</language>
		<code>""</code>
	      </format>
	      <group>9</group>
	      <ctrls>
		<ctrl>
		  <message>enter a value &gt; 0 </message>
		  <language>perl</language>
		  <code>($value &gt; 1000) || ($value &lt; 0)</code>
		</ctrl>
	      </ctrls>
	      <precond>
		<language>perl</language>
		<code>$multiple_dataset</code>
	      </precond>
	    </attributes>
	  </parameter>
	  
	  <parameter type="Switch">
	    <name>consense</name>
	    <attributes>
	      <prompt>Compute a consensus tree</prompt>
	      <format>
		<language>perl</language>
		<code>($value) ? "; cp infile infile.mix; cp outtree outtree.mix; cp outfile outfile.mix; mv outtree intree; consense &lt; consense.params; cp outtree outtree.consense; cp outfile outfile.consense; mv outtree.mix outtree; mv infile.mix infile; mv outfile.mix outfile" : ""</code>
	      </format>
	      <vdef><value>0</value></vdef>
	      <group>10</group>
	      <precond>
		<language>perl</language>
		<code>$multiple_dataset &amp;&amp; $print_treefile</code>
	      </precond>
	    </attributes>
	  </parameter>
	  
	</parameters>
      </paragraph>
    </parameter>

    <parameter type="Paragraph">
      <paragraph>
	<name>output</name>
	<prompt>Output options</prompt>
	<parameters>
	  
	  <parameter type="Switch">
	    <name>print_tree</name>
	    <attributes>
	      <prompt>Print out tree (3)</prompt>
	      <format>
		<language>perl</language>
		<code>($value)? "" : "3\\n"</code>
	      </format>
	      <vdef><value>1</value></vdef>
	      <group>1</group>
	      <comment>
		<value>Tells the program to print a semi-graphical picture of the tree in the outfile.</value>
	      </comment>
	      <paramfile>params</paramfile>
	    </attributes>
	  </parameter>

	  <parameter type="Switch">
	    <name>print_step</name>
	    <attributes>
	      <prompt>Print out steps in each character (4)</prompt>
	      <format>
		<language>perl</language>
		<code>($value)? "4\\n" : ""</code>
	      </format>
	      <vdef><value>0</value></vdef>
	      <group>1</group>
	      <paramfile>params</paramfile>
	    </attributes>
	  </parameter>
	  
	  <parameter type="Switch">
	    <name>print_states</name>
	    <attributes>
	      <prompt>Print states at all nodes of tree (5)</prompt>
	      <format>
		<language>perl</language>
		<code>($value)? "5\\n" : ""</code>
	      </format>
	      <vdef><value>0</value></vdef>
	      <group>1</group>
	      <paramfile>params</paramfile>
	    </attributes>
	  </parameter>
	  
	  <parameter type="Switch">
	    <name>print_treefile</name>
	    <attributes>
	      <prompt>Write out trees onto tree file (6)</prompt>
	      <format>
		<language>perl</language>
		<code>($value) ? "" : "6\\n"</code>
	      </format>
	      <vdef><value>1</value></vdef>
	      <group>1</group>
	      <comment>
		<value>Tells the program to save the tree in a Newick treefile.</value>
	      </comment>
	      <paramfile>params</paramfile>
	    </attributes>
	  </parameter>
	  
	  <parameter type="Switch">
	    <name>printdata</name>
	    <attributes>
	      <prompt>Print out the data at start of run (1)</prompt>
	      <format>
		<language>perl</language>
		<code>($value)? "1\\n" : ""</code>
	      </format>
	      <vdef><value>0</value></vdef>
	      <group>1</group>
	      <paramfile>params</paramfile>
	    </attributes>
	  </parameter>
	  
	  <parameter type="Switch">
	    <name>indent_tree</name>
	    <attributes>
	      <prompt>Indent treefile</prompt>
	      <format>
		<language>perl</language>
		<code>($value)? " &amp;&amp; indenttree -o outtree.indent outtree" : "" </code>
	      </format>
	      <vdef><value>0</value></vdef>
		  		<!--<group>1000</group>-->
	      <group>99</group>
	    </attributes>
	  </parameter>

	</parameters>
      </paragraph>

    </parameter>

    <parameter type="Paragraph">
      <paragraph>
	<name>pars_opt</name>
	<prompt>Parsimony options</prompt>
	<parameters>
	  
	  <parameter type="Switch">
	    <name>use_threshold</name>
	    <attributes>
	      <prompt>Use Threshold parsimony (T)</prompt>
	      <format>
		<language>perl</language>
		<code>($value)? "T\\n$threshold\\n" : ""</code>
	      </format>
	      <vdef><value>0</value></vdef>
	      <group>3</group>
	      <paramfile>params</paramfile>
	      <comment><value>The T (Threshold) option. This sets a threshold for the parsimony programs such that if the
	       number of steps counted in a character is higher than the threshold, it will be taken to be the threshold
	       value rather than the actual number of steps. The default is a threshold so high that it will never be
	       surpassed (in which case the steps will simply be counted). If you select the T option, you must also supply
	       a threshold. This will be a positive real number greater than 1. The T option is an important and
	       underutilized one: it is, for example, the only way in the Phylip package to do a compatibility analysis
	       when there are missing data. It is a method of de-weighting characters that evolve rapidly.</value>
	       </comment>
	    </attributes>
	  </parameter>
	  
	  <parameter ismandatory="1" type="Integer">
	    <name>threshold</name>
	    <attributes>
	      <prompt>Threshold value (if use threshold parsimony)</prompt>
	      <format>
		<language>perl</language>
		<code>"" </code>
	      </format>
	      <group>2</group>
	      <precond>
		<language>perl</language>
		<code>$use_threshold</code>
	      </precond>
	      <ctrls>
		<ctrl>
		  <message>Please enter a numeric value for threshold, greater than 1</message>
		  <language>perl</language>
		  <code>($threshold !~ /^\d+(\.\d+)?$/) || ($threshold &lt; 1)</code>
		</ctrl>
	      </ctrls>
	      <paramfile>params</paramfile>
	    </attributes>
	  </parameter>

	</parameters>
      </paragraph>

    </parameter>

    <parameter type="Paragraph">
      <paragraph>
	<name>other_options</name>
	<prompt>Other options</prompt>
	<parameters>
	  
	  <parameter type="Integer">
	    <name>outgroup</name>
	    <attributes>
	      <prompt>Outgroup root (default, use as outgroup species 1) (O)</prompt>
	      <format>
		<language>perl</language>
		<code>($value &amp;&amp; $value != $vdef)? "o\\n$value\\n" : "" </code>
	      </format>
	      <vdef><value>1</value></vdef>
	      <group>1</group>
	      <paramfile>params</paramfile>
	      	<comment>
		    <value> The O (Outgroup) option is valid only if the tree is not rooted by the Ancestral States option.
		    It specifies which species is on the line leading to the root of the tree. 
		    For example, if the outgroup is a species "Mouse" then the root of the tree will be placed in the middle of the
		    branch connected to this species, with Mouse branching off on one side of the root and the lineage leading
		    to the rest of the tree on the other. When selected, the number of the outgroup must be identified (the species are
		    numbered in the order they occur in the input file). Entering 6 causes the sixth species in the data set
		    to be taken as the outgroup (the sixth in the first data set if there are multiple data sets).
		    Outgroup-rooting will not be attempted if the data have already established a root for the
		    tree, such as from a user-defined tree. The inferred tree as printed out is still an unrooted tree,
		    though the outgroup is connected to the bottommost node so that it is easy to visually convert the tree
		    into rooted form.</value>
			<value>&#169;Copyright 1980-2007. University of Washington.</value>
		    </comment>
		     
	      <ctrls>
		<ctrl>
		  <message>Please enter a value greater than 0</message>
		  <language>perl</language>
		  <code>$value &lt; 1</code>
		</ctrl>
	      </ctrls>
	    </attributes>
	  </parameter>
	  
	</parameters>
      </paragraph>
      
    </parameter>

    <parameter type="Results">
      <name>outfile</name>
      <attributes>
	<filenames>outfile</filenames>
      </attributes>
    </parameter>
    
    <parameter type="Results">
      <name>treefile</name>
      <attributes>
	<precond>
	  <language>perl</language>
	  <code>$print_treefile</code>
	</precond>
	<filenames>outtree</filenames>
	<pipe>
	  <pipetype>phylip_tree</pipetype>
	  <language>perl</language>
	  <code>1</code>
	</pipe>
      </attributes>
    </parameter>
    
    <parameter type="Results">
      <name>indented_treefile</name>
      <attributes>
	<precond>
	  <language>perl</language>
	  <code>$print_treefile &amp;&amp; $indent_tree</code>
	</precond>
	<filenames>outtree.indent</filenames>
      </attributes>
    </parameter>
    
    <parameter type="Results">
      <name>params</name>
      <attributes>
	<filenames>params</filenames>
      </attributes>
    </parameter>
    
    <parameter ishidden="1" type="String">
      <name>confirm</name>
      <attributes>
	<format>
	  <language>perl</language>
	  <code>"y\\n"</code>
	</format>
	<!--<group>1000</group>-->
	<group>99</group>
	<paramfile>params</paramfile>
      </attributes>
    </parameter>
    
    <parameter ishidden="1" type="String">
      <name>terminal_type</name>
      <attributes>
	<format>
	  <language>perl</language>
	  <code>"0\\n"</code>
	</format>
	<!--<group>-1</group>-->
	<group>0</group>
	<paramfile>params</paramfile>
      </attributes>
    </parameter>
 <!--  
    <parameter type="Results">
      <name>tmp_params</name>
      <attributes>
	<filenames>*.params</filenames>
      </attributes>
    </parameter>
-->
    <parameter ishidden="1" type="String">
      <name>consense_confirm</name>
      <attributes>
        <format>
          <language>perl</language>
          <code>"Y\\n"</code>
        </format>
		<!--<group>1000</group>-->
        <group>99</group>
        <precond>
          <language>perl</language>
          <code>$consense</code>
        </precond>
        <paramfile>consense.params</paramfile>
      </attributes>
    </parameter>

    <parameter ishidden="1" type="String">
      <name>consense_terminal_type</name>
      <attributes>
        <format>
          <language>perl</language>
          <code>"T\\n"</code>
        </format>
		<!--<group>-2</group>-->
        <group>0</group>
        <precond>
          <language>perl</language>
          <code>$consense</code>
        </precond>
        <paramfile>consense.params</paramfile>
      </attributes>
    </parameter>

    <parameter type="Results">
      <name>consense_outfile</name>
      <attributes>
        <precond>
          <language>perl</language>
          <code>$consense</code>
        </precond>
        <filenames>outfile.consense</filenames>
      </attributes>
    </parameter>
    
    <parameter type="Results">
      <name>consense_treefile</name>
      <attributes>
        <precond>
        <language>perl</language>
          <code>$consense</code>
        </precond>
        <filenames>outtree.consense</filenames>
      </attributes>
    </parameter>
    
  </parameters>
</pise>
