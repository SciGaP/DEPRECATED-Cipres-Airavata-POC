<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE pise SYSTEM "http://www.phylo.org/dev/rami/PARSER/pise2.dtd">
<pise>
	<head>
		<title>RAxML-HPC BlackBox</title>
		<version>7.6.3</version>
		<description>Phylogenetic tree inference using maximum likelihood/rapid bootstrapping on XSEDE.</description>
		<authors>Alexandros Stamatakis</authors>
		<reference>Stamatakis A. RAxML-VI-HPC: maximum likelihood-based phylogenetic analyses with thousands of taxa and mixed models.Bioinformatics. 2006 Nov 1;22(21):2688-90</reference>
		<category>Phylogeny / Alignment</category>
		<doclink>http://icwww.epfl.ch/~stamatak/index-Dateien/countManual7.0.0.php  </doclink>
	</head>
	
	<command>raxmlhpc2bb</command>
<!--
	This file was created to reproduce the Black Box configuration of RAXML using only command line parameters offered by Alexis.

	Note: values must be passed in for invariable, empirical, dna, and matrix, even if the precond prevents them from being set, even when the default value is the empty
	string.  For example, if we're passed invariable = empty string, then the format code for the model parameter is OK, but if we are passed a parameter map that doesn't include 
	invariable, when PiseCommandRenderer. restituteFormat tries to replace variables for model's code and it finds a reference to a parameter that doesn't exist it clobbers
	the whole code string.
-->
<!-- 

This is the output of -h command for raxml 7.2.3

	raxmlHPC[-SSE3|-PTHREADS|-PTHREADS-SSE3] -->
<!-- the options available through the black box interface are 

Protein sequences  -> activates Substitution matrix (vdef = JTT) and Use empirical base frequencies

Outgroup

Constraint

Binary backbone

Use a mixed/partioned model?

Maximum likelihood search (-f a)

-->
<!--


##################################(added on 12/31/2009)######################################################################

	
from alexis:
> 
> Specifically, here is what I think is true (and I plan to write on our interface):
> 
> For RAxML versions 7.1.0 and later, the same flag GTRGAMMA (which 
> creates the command line -m GTRGAMMA -x -f a) causes GTRGAMMA to be 
> used both during the rapid bootstrapping AND inference of the best 
> tree. This takes much longer than the previous method,

Correct.

> where GTRCAT is used to conduct the bootstrapping phase. In other 
> words, if you want to run a bootstrapping experiment, choosing the model GTRCAT (-m GTRCAT -x -f a) is identical to 
	choosing GTRGAMMA in RAxML 7.0.4 and below.

Exactly.

> In other words, the GTRCAT switch causes GTRCAT to be used during the rapid bootstrapping, but the program then 
switches to GTRGAMMA for the ML search.

Yes, but only in the very end, where an attempt is made to further improve the current ML tree using a 
	more thorough version of SPR moves.

> (BUT: I don't know what this means: 
	"Final tree might be evaluated under GTRGAMMA, depending on the tree search option."

For rapid bootstrapping the final ML tree will always be evaluated under GAMMA.

> The GTRMIX option (which conducted inference under GRTCAT and calculated best tree under GTRGAMMA) is no longer offered for RAxML 7.1.0 and above. 

Exactly.

> (was gtrmix the same as bootstrapping with gtrgamma in the past? 

Yes.

> how should people who used that option accomplish the same analysis?
> Was this not a useful option?)

It was a useful option, GTRCAT now essentially does was GTRMIX used to do, I just designed the program like that, to keep users from inappropriately using CAT.

############################################################################################################################
User request for -f x

I have been using raxml a fair bit recently and was wondering if you might be able to add a feature please?
I'd like to be able to export a distance matrix.  I don't know the exact syntax for that, but the 7.0.4 manual has -f x: at the bottom of page 9.

Also, it might avoid some confusion if there is some comment in the section on using a starting tree (Supply a starting tree (-t))that this is not available when doing rapid bootstrapping as raxml just gives an error message without really saying why it gave an error.

#############################################################################################################################
1/19/2010
	mamiller added logic to help the program run well using the hybrid option
	
##############################################################################################################################
-->
<!-- 3/15/2012 added -p value, upgrade to 7.3.0 -->
<!-- 4/11/2013 update to 7.4.4, no changes in the interface -->
	
	<parameters>
		<!-- new logic for the command line delivery revides by mamiller, 1/21/2010, based on new logic from Wayne Pfeiffer:

For example, suppose -N nnn is specified with nnn < 20.  What I intended was the following.  Use one node with

. 8 Pthreads **only if** -x xxx -f a is specified & nchar >= 2,000or . 2 MPI processes and 4 Pthreads in all other cases.

The other cases are

   -x -f a with nchar < 1,000
   -x -f d any

There is a similar dichotomy between 8 and 4 Pthreads for larger values of nnn.
So here is the complete specification for nnn a number.

			the logic considers four cases: 
			1. the -f a -N nnn option is used, this selection implies -x  (hybridlogic1-3b); binning is based on nchar and boostop thresholds.
			2. whenever the -N option is used to specify a number of bootstraps or identical runs to conduct, where -f d is the analysis (hybridlogic5-7b)
				the logic change is to accomodate the fact that a best tree is not calculated, which is not efficient under mpi.
			3. the case where automatic bootstoppiong is used: a programmatic tools halts bootstrapping (hybridlogic8)
			4. all other analyses (-y, -f [other option] (hybridlogic8b)
			In the first two cases, the number of chars and the value of -N is considered, the logic is identical, but I spilt them into
			two groups because it made it easier for me, and presumably anyone who follows me. These run the hybrid code EXCEPT
			the first case in each allows for using the pthreads only. 
			In the third case, pthreads only code is used, and this is also true for the fourth case. 
The logic is constructed  in pairs of cases, based on thresholds. Each threshold case is accompanied by a scheduler element.  The precond for each logic scheduler element is necessarily identical to the mate that precedes it-->	
<!-- invisible parameters -->			
<!-- section 1, logic -->
<!-- hybridlogic1  (revised 1/21/2010)
				For nnn < 20, use one node with
				8 Pthreads (no MPI) if and only if -xxx -f a is specified & nchar >= 2,000 (pthreads only)	or
				2 MPI processes and 4 Pthreads in all other cases, when  -x xxx -f a with nchar < 2,000,
 --> 
<!-- the first section considers only the cases where -f a is checked, and where bootstraps (=N, bootstop) are specified,  these are binned as a matrix of 
      bootstrap number and nchars -->

<!-- Start  -N  = 100 -->	
					<parameter ishidden="1" type="String">
						<name>raxmlhpc_hybridlogic3</name>
						<attributes>
							<format>
								<language>perl</language>
								<code>"raxmlHPC-HYBRID -T 6 "</code>
							</format>
							<group>0</group>
						</attributes>
					</parameter>
<!--* If -N nnn is specified with nnn >= 50, run the hybrid parallel version of RAxML on two nodes of Trestles using
10 MPI processes and 6 threads per process. That is, use nodes=2:ppn=5, -np 10, and -T 6.-->
							
					<parameter ishidden="1" type="String">
						<name>raxmlhpc_hybridlogic3_scheduler</name>
						<attributes>
							<paramfile>scheduler.conf</paramfile>
							<format>
								<language>perl</language>
								<code>
									"jobtype=mpi\\n" .
									"mpi_processes=10\\n" .
									"threads_per_process=6\\n" .
									"node_exclusive=1\\n" .
									"nodes=2\\n"
								</code>
								</format>
							<group>0</group>
						</attributes>
					</parameter>
<!-- Stop  -N  =100 -->	
			
<!-- end of hidden params Section 1 -->				
<!-- Begin hidden params Section 2 -->
<!--required input file -->
					<parameter ismandatory="1" issimple="1" isinput="1" type="InFile">
						<name>infile</name>
						<attributes>
							<prompt>Sequences File (relaxed phylip format) (-s)</prompt>
							<format>
								<language>perl</language>
								<code>" -s infile"</code>
							</format>
							<group>1</group>
							<filenames>infile</filenames>
						</attributes>
					</parameter>
		
<!-- required setting of hidden -p value version 7.3.0 -->
<!--PARSIMONY SEED VALUE FOR CONSTANT STARTING TREE-->

					<parameter type="Integer" issimple="1"  ismandatory="1" ishidden="1">
						<name>parsimony_seed_val</name>
						<attributes>
							<prompt>Enter a random seed value for parsimony inferences (gives reproducible results from random starting tree)</prompt>
							<format>
								<language>perl</language>
								<code> " -p 12345"</code>
							</format>
							<group>2</group>
						</attributes>
					</parameter>
					
<!-- -n argument to specify output file suffix is required -->
					<parameter type="String" ishidden="1">
						<name>outsuffix</name>
						<attributes>
						<format>
							<language>perl</language>
							<code>" -n result"</code>
						</format>
						<group>1</group>
						</attributes>
					</parameter>
		
<!-- this sets -x, which is always true for the black box-->
					<parameter type="String" ismandatory="1" ishidden="1" issimple="1">
						<name>bootstrap_seed</name>
						<attributes>
							<format>
								<language>perl</language>
								<code>"-x 12345"</code>
							</format>
							<group>2</group>
						</attributes>
					</parameter>
		
<!-- Bootstrap iterations are fixed at 100  -->
					<parameter type="String" ismandatory="1" ishidden="1">
						<name>bootstop</name>
						<attributes>
							<format>
								<language>perl</language>
								<code>" -N 100"</code>
							</format>
							<group>2</group>
							<precond>
								<language>perl</language>
								<code>!$use_bootstopping</code>
							</precond>
						</attributes>
					</parameter>
					
<!-- Set the model for Nucleotide sequences  -->
<!--           NUCLEOTIDES:

                "-m GTRCAT"         : GTR + Optimization of substitution rates + Optimization of site-specific
                                      evolutionary rates which are categorized into numberOfCategories distinct 
                                      rate categories for greater computational efficiency.  Final tree might be evaluated
                                      under GTRGAMMA, depending on the tree search option
  NOT SUPPORTED "-m GTRCAT_FLOAT"   : Same as above but uses single-precision floating point arithmetics instead of double-precision
                                      Usage only recommend for testing, the code will run slower, but can save almost 50% of memory.
                                      If you have problems with phylogenomic datasets and large memory requirements you may give it a shot.
                                      Keep in mind that numerical stability seems to be okay but needs further testing.
  NOW SUPPORTED "-m GTRCATI"        : GTR + Optimization of substitution rates + Optimization of site-specific
                                      evolutionary rates which are categorized into numberOfCategories distinct 
                                      rate categories for greater computational efficiency.  Final tree might be evaluated
                                      under GTRGAMMAI, depending on the tree search option -->
                
					<parameter type="String" issimple="1" ishidden="1">
						<name>dna_gtrcat</name>
						<attributes>
							<prompt>Use GTRCAT for the bootstrapping phase, and GTRGAMMA for the final tree inference (default)</prompt>
							<format>
								<language>perl</language>
								<code>"-m GTRCAT$invariable"</code>
							</format>
							<group>2</group>
							<precond>
								<language>perl</language>
								<code>$datatype eq "dna"</code>
							</precond>
						</attributes>
					</parameter>	
					
<!--   AMINO ACIDS:

                "-m PROTCATmatrixName[F]"         : specified AA matrix + Optimization of substitution rates + Optimization of site-specific
                                                    evolutionary rates which are categorized into numberOfCategories distinct 
                                                    rate categories for greater computational efficiency.   Final tree might be evaluated
                                                    automatically under PROTGAMMAmatrixName[f], depending on the tree search option
                "-m PROTCATmatrixName[F]_FLOAT"   : PROTCAT with single precision arithmetics, same cautionary notes as for GTRCAT_FLOAT apply
                "-m PROTCATImatrixName[F]"        : specified AA matrix + Optimization of substitution rates + Optimization of site-specific
                                                    evolutionary rates which are categorized into numberOfCategories distinct 
                                                    rate categories for greater computational efficiency.   Final tree might be evaluated
                                                    automatically under PROTGAMMAImatrixName[f], depending on the tree search option
                "-m PROTGAMMAmatrixName[F]"       : specified AA matrix + Optimization of substitution rates + GAMMA model of rate 
                                                    heterogeneity (alpha parameter will be estimated)
                "-m PROTGAMMAmatrixName[F]_FLOAT" : PROTGAMMA with single precision arithmetics, same cautionary notes as for GTRCAT_FLOAT apply
                "-m PROTGAMMAImatrixName[F]"      : Same as PROTGAMMAmatrixName[F], but with estimate of proportion of invariable sites 

                Available AA substitution models: DAYHOFF, DCMUT, JTT, MTREV, WAG, RTREV, CPREV, VT, BLOSUM62, MTMAM, LG, GTR
                With the optional "F" appendix you can specify if you want to use empirical base frequencies
                Please note that for mixed models you can in addition specify the per-gene AA model in
                the mixed model file (see manual for details). Also note that if you estimate AA GTR parameters on a partitioned
                dataset, they will be linked (estimated jointly) across all partitions to avoid over-parameterization -->
   
<!-- cat is the default in black box -->             		
					<parameter type="String" ishidden="1" issimple="1">
						<name>prot_sub_model</name>
						<attributes>
							<precond>
								<language>perl</language>
								<code>$datatype eq "protein"</code>
							</precond>
							<format>
								<language>perl</language>
								<code>"-m PROTCAT$invariable$prot_matrix_spec$empirical"</code>
							</format>
							<group>2</group>
						</attributes>
					</parameter> 
		
<!-- Parameters with visible controls start here -->
		<parameter type="Float" issimple="1" ismandatory="1">
			<name>runtime</name>
			<attributes>
				<group>1</group>
				<paramfile>scheduler.conf</paramfile>
				<prompt>Maximum Hours to Run (click here for help setting this correctly)</prompt>
				<vdef>
					<value>0.25</value>
				</vdef>
				<comment>
<value>Estimate the maximum time your job will need to run. We recommend testimg initially with a &lt; 0.5hr test run because Jobs set for 0.5 h or less depedendably run immediately in the "debug" queue. 
Once you are sure the configuration is correct, you then increase the time. The reason is that jobs &gt; 0.5 h are submitted to the "normal" queue, where jobs configured for 1 or a few hours times may
run sooner than jobs configured for the full 168 hours. 
</value>
				</comment>
				<ctrls>
					<ctrl>
						<message>Maximum Hours to Run must be less than 168</message>
						<language>perl</language>
						<code>$runtime &gt; 168.0</code>
					</ctrl>
				</ctrls>
				<warns>
					<warn>
						<message>The job will run on 64 processors as configured. If it runs for the entire configured time, it will consume 64 x $runtime cpu hours</message>
						<language>perl</language>
						<code>$runtime ne 0 </code>
					</warn>
				</warns>
				<format>
					<language>perl</language>
					<code>"runhours=$value\\n"</code>
				</format>
			</attributes>
		</parameter>
		
<!-- **************** commented out, no longer needed *******************-->
<!-- user enters nchar parameter this will help decide how to run -->
<!--		<parameter type="Integer" issimple="1">
			<name>nchars</name>
			<attributes>
				<prompt>Number of chars in your dataset</prompt>
				<comment>
					<value>
						Knowing the number of characters in your dataset helps us determine the most efficient way to run raxml.
						We need to know the number of characters per row in the input data matrix.
					</value>
				</comment>
				<vdef>
					<value>1000</value>
				</vdef>
				<ctrls>
					<ctrl>
						<message>Please enter a value for the number of characters in your data matrix</message>
						<language>perl</language>
						<code>!defined $nchars</code>
					</ctrl>
					<ctrl>
						<message>The number of characters in the matrix must 1 or greater.</message>
						<language>perl</language>
						<code>$nchars &lt; 1</code>
					</ctrl>
				</ctrls>
				<group>15</group>
			</attributes>
		</parameter> -->

<!-- is it protein or dna input ? -->
					<parameter type="Excl" issimple="1" ismandatory="1">
						<name>datatype</name>
						<attributes>
							<prompt>Sequence Type</prompt>
							<vlist>
								<value>protein</value>
								<label>Protein</label>
								<value>dna</value>
								<label>Nucleotide</label>
							</vlist>
							<vdef>
								<value>dna</value>
							</vdef>
							<group>2</group>
						</attributes>
					</parameter>
					
<!-- outgroup (-o) -->
					<parameter type="String" issimple="1">
						<name>outgroup</name>
						<attributes>
							<prompt>Outgroup (one or more comma-separated outgroups, see comment for syntax)</prompt>
							<format>
								<language>perl</language>
								<code>(defined $value)? " -o $value " : "" </code>
							</format>
							<group>10</group>
							<comment>
<value>The correct syntax for the box is outgroup1,outgroup2,outgroupn. If white space is introduced (e.g. outgroup1, outgroup2, outgroupn) the program will fail with the message
"Error, you must specify a model of substitution with the '-m' option"
</value>					
							</comment>
						</attributes>
					</parameter>
					
<!-- constraint (-g) -->
		
					<parameter type="InFile" issimple="1">
						<name>constraint</name>
						<attributes>
							<precond>
								<language>perl</language>
								<code>!defined $binary_backbone &amp;&amp; !$use_bootstopping</code>
							</precond>
							<prompt>Constraint (-g)</prompt>
							<filenames>constraint.tre</filenames>
							<format>
								<language>perl</language>
					<!-- 
						parameters of type Results are always processed so we need to check
						whether we actually got a value entered.
					-->
								<code>(defined $value) ? "-g constraint.tre" : ""</code>
							</format>
							<group>2</group>
							<comment>
<value> This option allows you to specify an incomplete or comprehensive multifurcating constraint tree for the RAxML
search in NEWICK format. Initially, multifurcations are resolved randomly. If the tree is incomplete (does not contain
all taxa) the remaining taxa are added by using the MP criterion. Once a comprehensive (containing all taxa) bifurcating
tree is computed, it is further optimized under ML respecting the given constraints. Important: If you specify a 
non-comprehensive constraint, e.g., a constraint tree that does not contain all taxa, RAxML will assume that any taxa
that not found in the constraint topology are unconstrained, i.e., these taxa can be placed in any part of the tree.  As
an example consider an alignment with 10 taxa: Loach, Chicken, Human, Cow, Mouse, Whale, Seal, Carp, Rat, Frog.  If, for
example you would like Loach, Chicken, Human, Cow to be monophyletic you would specify the constraint tree as follows: </value>
<value> ((Loach, Chicken, Human, Cow),(Mouse, Whale, Seal, Carp, Rat, Frog)); </value>
<value> Moreover, if you would like Loach, Chicken, Human, Cow to be monophyletic and in addition Human, Cow to be 
monophyletic within that clade you could specify: </value>
<value> ((Loach, Chicken, (Human, Cow)),(Mouse, Whale, Seal, Carp, Rat, Frog)); </value>
<value> If you specify an incomplete constraint: </value>
<value> ((Loach, Chicken, Human, Cow),(Mouse, Whale, Seal, Carp)); </value>
<value> the two groups Loach, Chicken, Human, Cow and Mouse, Whale, Seal, Carp will be monophyletic, while Rat and Frog can
end up anywhere in the tree.  </value>
				</comment>
						</attributes>
					</parameter>
		
		<!-- binary backbone (-r) -->
					<parameter type="InFile" issimple="1">
						<name>binary_backbone</name>
						<attributes>
							<precond>
								<language>perl</language>
								<code>!defined $constraint</code>
							</precond>
							<prompt>Binary Backbone (-r)</prompt>
							<filenames>binary_backbone.tre</filenames>
							<format>
								<language>perl</language>
					<!-- 
						parameters of type Results are always processed so we need to check
						whether we actually got a value entered.
					-->
								<code>(defined $value) ? " -r binary_backbone.tre" : ""</code>
							</format>
							<group>2</group>
							<comment>
<value>This option allows you to pass a binary/bifurcating constraint/backbone tree in NEWICK format to RAxML. Note that using this option only makes sense if this tree contains fewer taxa than the input alignment. The remaining taxa will initially be added by using the MP criterion. Once a comprehensive tree with all taxa has been obtained it will be  optimized under ML respecting the restrictions of the constraint tree.
</value>
							</comment>
						</attributes>
					</parameter>
		
<!-- Optional mixed  model file -->
<!-- If user doesn't enter a value the partition parameter won't be in the map that the web app sends the command renderer 
	(which evaluates the perl for parameters that are present), so we don't need to worry about making the format code conditional
	 since this parameter just won't be evaluated. Command renderer evaluates 3 types of parameters: 
	1) those that appear in the map coming from the gui, those that are	hidden, 3) those that are of type OutFile or Result. -->
					<parameter type="InFile" issimple="1">
						<name>partition</name>
						<attributes>
							<prompt>Use a mixed/partitioned model? (-q)</prompt>
							<format>
								<language>perl</language>
								<code>" -q part"</code>
							</format>
							<group>2</group>
							<filenames>part</filenames>
							<comment>
					<value>The multipleModelFileName parameter (-q) allows you to upload a file that specifies the regions of your alignment for which an individual model of nucleotide substitution should be estimated. This will typically be used to infer trees for long (in terms of base pairs) multi-gene alignments. For example, if -m GTRGAMMA is used, individual alpha-shape parameters, GTR-rates, and empirical base frequencies will be estimated and optimized for each partition. Since Raxml can now handle mixed Amino Acid and DNA alignments, you must specify the data type in the partition file, before the partition name. For DNA, this means you have to add DNA to each line in the partition. For AA data you must specify the transition matrices for each partition: 
The AA substitution model must be the first entry in each line and must be separated by a comma from the gene name, just like the DNA token above. You can not assign different models of rate heterogeneity to different partitions, i.e. it will be CAT or CATI. for all partitions. Finally, if you have a concatenated DNA and AA alignments, with DNA data at positions 1 - 500 and AA data at 501-1000 with the WAG model the partition file should look as follows: DNA, gene1 = 1-500; WAG, gene2 = 501-1000. For more help see http://phylobench.vital-it.ch/raxml-bb/index.php?help=model.
</value>
							</comment>
						</attributes>
					</parameter>

		<!-- If user doesn't enter a value, the parameter won't be in the map that the web app sends the command renderer (which evaluates the perl for parameters that are present), so we don't need to worry about making the format code conditional; if null, this parameter just won't be evaluated. Command renderer evaluates 3 types of parameters: 1) those that appear in the map coming from the gui, those that are hidden, 3) those that are of type OutFile or Result. -->
					<parameter type="InFile" issimple="1">
						<name>exclude_file</name>
						<attributes>
							<prompt>Create an input file that excludes the range of positions specifed in this file (-E)</prompt>
							<format>
								<language>perl</language>
								<code>" -E excl"</code>
							</format>
							<group>2</group>
				<filenames>excl</filenames>
				<comment>
					<value>This option is used to excludes specific positions in the matrix. For example, uploading a file
					that contains the text: 100-200 300-400 will create a file that excludes all columns between positions
					100 and 200 as well as all columns between positions 300 and 400. Note that the boundary numbers (positions 100, 200, 300, 
					and 400) will also be excluded. To exclude a single column write (100-100). This option does not 
					run an analysis but just prints an alignment file without the excluded columns. Save this file to your 
					data area, and then run the real analysis. If you use a mixed model, an appropriately adapted model file 
					will also be written. The ntax element of the phylip files is automatically corrected Example: raxmlHPC -E excl
						-s infile -m GTRCAT -q part -n TEST. In this case the files with columns excluded will be named
						infile.excl and part.excl. </value>
				</comment>
						</attributes>
					</parameter>	

		<!-- Estimate proportion of invariable sites, mlsearch is a precondition  -->
		<!-- The control should be of type switch, but I need the value of the parameter
		to be either "I" or "", so I made it type Excl instead. -->
		<!-- enabled 1/20/2010 based on its inclusion in the black box -->
		
		<parameter type="Excl" issimple="1" ismandatory="1">
			<name>invariable</name>
			<attributes>
				<prompt>Estimate proportion of invariable sites (GTRGAMMA + I)</prompt>
				<precond>
					<language>perl</language>
					<code>$mlsearch</code>
				</precond>
				<vlist>
					<value>I</value>
					<label>yes</label>
					<value></value>
					<label>no</label>
				</vlist>
				<vdef>
					<value></value>
				</vdef>
				<group>2</group>
			</attributes>
		</parameter>		 
		
				<parameter type="Excl" ismandatory="1" issimple="1">
						<name>prot_matrix_spec</name>
						<attributes>
							<prompt>Protein Substitution Matrix</prompt>
							<precond>
								<language>perl</language>
								<code>$datatype eq "protein"</code>
							</precond>
							<vlist>
								<value>DAYHOFF</value>
								<label>DAYHOFF</label>
								<value>DCMUT</value>
								<label>DCMUT</label>
								<value>JTT</value>
								<label>JTT</label>
								<value>MTREV</value>
								<label>MTREV</label>
								<value>WAG</value>
								<label>WAG</label>
								<value>RTREV</value>
								<label>RTREV</label>
								<value>CPREV</value>
								<label>CPREV</label>
								<value>VT</value>
								<label>VT</label>
								<value>BLOSUM62</value>
								<label>BLOSUM62</label>
								<value>MTMAM</value>
								<label>MTMAM</label>
								<value>LG</value>
								<label>LG</label>
								<value>GTR</value>
								<label>GTR</label>
							</vlist>
							<vdef>
								<value>JTT</value>
							</vdef>
							<comment>
<value>Note: FLOAT and invariable sites (I) options are not exposed here. If you require this option, please contact mmiller@sdsc.edu.</value>
<value>-m PROTCATmatrixName: analyses using the specified AA matrix + Optimization of substitution rates + Optimization of site-specific evolutionary rates which are categorized into numberOfCategories distinct rate categories for greater computational efficiency. Final tree might be evaluated automatically under PROTGAMMAmatrixName[f], depending on the tree search option.
</value>
<value>-m PROTGAMMAmatrixName[F] anyses use the specified AA matrix + Optimization of substitution rates + GAMMA model of rate heterogeneity (alpha parameter will be estimated)</value>
<value>Available AA substitution models: DAYHOFF, DCMUT, JTT, MTREV, WAG, RTREV, CPREV, VT, BLOSUM62, MTMAM, LG, GTR. You can specify if you want to use empirical base frequencies. Please note that for mixed models you can in addition specify the per-gene AA model in the mixed model file (see manual for details). Also note that if you estimate AA GTR parameters on a partitioned dataset, they will be linked (estimated jointly) across all partitions to avoid over-parametrization.</value>
							</comment>
						</attributes>
					</parameter>

<!-- Empirical Base Frequencies -->
<!-- datatype=protein is a precondition, adds -F to end of -m model string; switch isnt used because it adds a 0! -->		
		<parameter issimple="1" type="Excl" ismandatory="1">
			<name>empirical</name>
			<attributes>
				<prompt>Use empirical base frequencies?</prompt>
				<precond>
					<language>perl</language>
					<code>$datatype eq "protein"</code>
				</precond>
				<vlist>
					<value>F</value>
					<label>yes</label>
					<value></value>
					<label>no</label>
				</vlist>
				<vdef>
					<value></value>
				</vdef>
				<group>2</group>
				<comment>
<value>The empirical base frequency command is relevant for the protein datatype, and is used as a suffix to the -m model string PROTGAMMA_____
</value>
					
				</comment>
			</attributes>
		</parameter>
					
<!-- Do maximum likelihood search after bootstrap -->
					<parameter type="Switch" issimple="1">
						<name>mlsearch</name>
						<attributes>
							<prompt>Find best tree using maximum likelihood search</prompt>
							<format>
								<language>perl</language>
								<code> ($value)?" -f a ":""</code>
							</format>
							<vdef>
								<value>1</value>
							</vdef>
							<group>2</group>
							<comment>
								<value>Tell RAxML to conduct a Rapid Bootstrap analysis (-x) and search for the best-scoring ML tree in one single program run.
								</value>
							</comment>
						</attributes>
					</parameter>
		
<!-- Activate programmatic bootstopping -->					
					<parameter type="Switch" issimple="1" ismandatory="1">
						<name>use_bootstopping</name>
						<attributes>
							<prompt>Let RAxML halt bootstrapping automatically (HIGHLY recommended)</prompt>
							<vdef>
								<value>1</value>
							</vdef>
							<format>
								<language>perl</language>
								<code>($value)? "-N autoMRE":""</code>
							</format>
							<ctrls>
								<ctrl>
									<message>Sorry, you cant use automatic bootstopping with a constraint tree</message>
									<language>perl</language>
									<code>$use_bootstopping &amp;&amp; defined $constraint</code>
								</ctrl>
							</ctrls>
							<comment>
<value>This option instructs Raxml to automatically halt bootstrapping when certain criteria are met, instead of specifying the number of bootstraps for an analysis. The exact criteria are specified/configured using subsequent entry fields.</value>
							</comment>
						</attributes>
					</parameter>
					
<!-- selecting bootstopping is not supported -->
					
<!-- 	[-k] 		Specifies that bootstrapped trees should be printed with branch lengths. The bootstraps will run a bit longer, because model parameters will be optimized at 
					the end of each run under GAMMA or GAMMA+P-Invar respectively. DEFAULT: OFF (old version said Use with CATMIX/PROTMIX or GAMMA/GAMMAI., check on this)-->

					<parameter type="Switch" issimple="1">
						<name>printbrlength</name>
						<attributes>
							<prompt>Print branch lengths (-k)</prompt>
							<format>
								<language>perl</language>
								<code> ($value)?" -k":""</code>
							</format>
							<vdef>
								<value>0</value>
							</vdef>
							<group>2</group>
							<comment>
								<value>	The -k option causes bootstrapped trees to be printed with branch lengths. 
The bootstraps will require a bit longer to run under this option because model parameters will be optimized at 
					the end of each run under GAMMA or GAMMA+P-Invar respectively.
								</value>
							</comment>
						</attributes>
					</parameter>
									
					

<!-- a priori bootstopping (-I) is not supported -->	
		
	 	<parameter type="Results">
				<name>all_outputfiles</name>
				<attributes>
					<filenames>*</filenames>
				</attributes>
			</parameter>		

	</parameters>
</pise>
