<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pise SYSTEM "http://www.phylo.org/dev/rami/PARSER/pise.dtd">
<pise>
  <head>
	<title>Dollop</title>
	<version>Phylip 3.66</version>
	<description>Dollo and Polymorphism Parsimony</description>
	<authors>Felsenstein</authors>
	<reference>Felsenstein, J. 2007.  PHYLIP -- Phylogeny Inference Package (Version 3.682). Distributed by the author.  Department of Genetics, University of Washington, Seattle.</reference>
	<reference>Felsenstein, J.  1989.  PHYLIP -- Phylogeny Inference Package (Version 3.2). Cladistics  5: 164-166.</reference>
	<category>Phylogeny / Alignment</category>
<!--             UPDATE STALE LINK <doclink>http://bioweb.pasteur.fr/docs/gensoft-evol.html#PHYLIP        </doclink>-->
	<doclink>http://evolution.genetics.washington.edu/phylip/doc/dollop.html</doclink>
  </head>
  <command>dollop</command>
  <parameters>
<!-- This file was updated 6/2008 to fix the nultiple option, and elminate a requirement to specify the number of trees in the input User Tree file -->
											<parameter iscommand="1" ishidden="1" type="String">
											<name>dollop</name>
												<attributes>
													<format>
														<language>perl</language>
														<code> "dollop &lt; params" </code>
													</format>
													<group>0</group>
												</attributes>
											</parameter>
											<!-- <parameter ismandatory="1" issimple="1"  type="InFile"> -->
											<parameter ismandatory="1" issimple="1" isinput="1" type="InFile">
											<name>infile</name>
												<attributes>
													<prompt>Input File</prompt>
													<format>
														<language>perl</language>
													<!-- <code>"ln -s $infile infile; "</code> -->
														<code>""</code>
													</format>
													<group>-10</group>
													<comment>
		  <value>Example input file:</value>
		  <value>&#xA0;&#xA0;&#xA0;&#xA0;5&#xA0;&#xA0;&#xA0;&#xA0;6</value>
		  <value>Alpha&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;110110</value>
		  <value>Beta&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;110000</value>
		  <value>Gamma&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;100110</value>
		  <value>Delta&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;001001</value>
		  <value>Epsilon&#xA0;&#xA0;&#xA0;001110</value>
													</comment>
	<!-- Added for Swami -->
													<filenames>infile</filenames>
	<!-- -->
												</attributes>
											</parameter>
				<parameter type="Paragraph">
					<paragraph>
						<name>dollop_opt</name>
						<prompt>Dollop options</prompt>
							<parameters>
											<parameter type="Switch">
											<name>dollop_method</name>
												<attributes>
													<prompt>Use Parsimony method (P)</prompt>
													<vdef>
														<value>0</value>
													</vdef>
													<format>
														<language>perl</language>
														<code>($value)? "P\\n" : ""</code>
													</format>
													<group>1</group>
													<paramfile>params</paramfile>
													<comment>
	      <value>The Dollo parsimony method (default value) was first suggested in print by Le Quesne (1974) and was
	       first well-specified by Farris (1977). It allows up to one forward change0-->1 and as many reversions
	       1-->0 as are necessary to explain the pattern of states seen. The program attempts to minimize the number
	       of 1-->0 reversions necessary. The assumptions of this method are in effect:</value>
		  <value>1. We know which state is the ancestral one(state 0).</value>
		  <value>2. The characters are evolving independently.</value>
		  <value>3. Different lineages evolve independently.</value>
		  <value>4. The probability of a forward change (0-->1) is small over the evolutionary times involved.</value>
		  <value>5. The probability of a reversion (1-->0) is also small, but still far larger than the probability of a forward change, so that many reversions are easier to envisage than even one extra forward change.</value>
		  <value>6. Retention of polymorphism for both states (0 and 1) is highly improbable.</value>
		  <value>7. The lengths of the segments of the true tree are not so unequal that two changes in a long segment are as
probable as one in a short segment.</value>
		  <value>One problem can arise when using additive binary recoding to represent a multistate character as a
		  series of two-state characters. Unlike the Camin-Sokal, Wagner, and Polymorphism methods, the Dollo method
		  can reconstruct ancestral states which do not exist. An example is given in Felsenstein's 1979 paper. It
		  will be necessary to check the output to make sure that this has not occurred.</value>
		  <value>The polymorphism parsimony method was first used by me, and the results published (without a clear specification of the method) by Inger (1967). The method was independently published by Farris (1978a) and by Felsenstein (1979). The method assumes that we can explain the pattern of states by no more than one origination (0-->1) of state 1, followed by retention of polymorphism along as many segments of the tree as are necessary, followed by loss of state 0 or of state 1 where necessary. The program tries to minimize the total number of polymorphic characters, where each polymorphism is counted once for each segment of the tree in which it is retained. The assumptions of the polymorphism parsimony method are in effect:</value>
		  <value>1. The ancestral state (state 0) is known in each character. </value>
		  <value>2. The characters are evolving independently of each other. </value>
          <value>3. Different lineages are evolving independently. </value>
          <value>4. Forward change (0-->1) is highly improbable over the length of time involved in the evolution of the group. </value>
          <value>5. Retention of polymorphism is also improbable, but far more probable that forward change, so that we can more easily envisage much polymorhism than even one additional forward change. </value>
		  <value>6. Once state 1 is reached, reoccurrence of state 0 is very improbable, much less probable than multiple retentions of polymorphism. </value>
	      <value>7. The lengths of segments in the true tree are not so unequal that we can more easily envisage retention events occurring in both of two long segments than one retention in a short segment. </value> 
		  <value>That these are the assumptions of parsimony methods has been documented in a series of papers of mine: (1973a, 1978b, 1979, 1981b, 1983b, 1988b). For an opposing view arguing that the parsimony methods make no substantive assumptions such as these, see the papers by Farris (1983) and Sober (1983a, 1983b), but also read the exchange between Felsenstein and Sober (1986).</value>
	      </comment>
												</attributes>
											</parameter>
											<parameter type="Switch">
											<name>use_ancestral_state</name>
												<attributes>
													<prompt>Use ancestral states in input file (A)</prompt>
													<format>
														<language>perl</language>
														<code>($value)? "A\\n" : ""</code>
													</format>
													<group>1</group>
													<paramfile>params</paramfile>
													<comment>
		<value>The A (Ancestral states) option. This indicates that we are specifying the ancestral states for each
		 character. In the menu the ancestors (A) option must be selected. An ancestral states input file is read,
		 whose default name is ancestors. It contains a line or lines giving the ancestral states for each character.
		 These may be 0, 1 or ?, the latter indicating that the ancestral state is unknown. </value>
		<value>An example is: </value>
		<value>001??11 </value>
		<value>The ancestor information can be continued to a new line and can have blanks between any of the characters
		 in the same way that species character data can. The program will infer, for any character whose ancestral
		 state is unknown ("?") whether the ancestral state 0 or 1 will give the best tree. If these are tied, then it
		 may not be possible for the program to infer the state in the internal nodes, and these will all be printed
		 as ".". If this has happened and you want to know more about the states at the internal nodes, you will find
		 helpful to use Dolmove to display the tree and examine its interior states, as the algorithm in Dolmove shows
		 all that can be known in this case about the interior states, including where there is and is not amibiguity.
		 The algorithm in Dollop gives up more easily on displaying these states.</value>
												</comment>
												</attributes>
											</parameter>
<!-- Added for Swami -->
											<parameter type="InFile">
											<name>ancestral_state_file</name>
												<attributes>
													<prompt>Ancestors state filefile</prompt>
													<format>
														<language>perl</language>
														<code>""</code>
													</format>
													<group>1</group>
													<filenames>ancestors</filenames>
													<precond>
														<language>perl</language>
														<code>$use_ancestral_state</code>
													</precond>
												</attributes>
											</parameter>
<!-- -->
							</parameters>
					</paragraph>
				</parameter>
				<parameter type="Paragraph">
					<paragraph>
						<name>jumble_opt</name>
						<prompt>Randomize options</prompt>
							<parameters>
											<parameter type="Switch">
											<name>jumble</name>
												<attributes>
													<prompt>Randomize (jumble) input order (J)</prompt>
													<format>
														<language>perl</language>
														<code>($value)? "j\\n$jumble_seed\\n$times\\n" : "" </code>
													</format>
													<vdef><value>0</value></vdef>
													<group>20</group>
													<paramfile>params</paramfile>
													<comment>
<value>The J (Jumble) option. In most tree construction programs, the search of different trees depends on the order of input of species. The J option tells the program to use a random number generator to choose the input order of species. If you select Jumble, you must provide a "seed" for the random number generator. The seed should be an integer between 1 and be of form 4n+1. Each different seed leads to a different sequence of addition of species. By simply changing the random number seed and re-running the programs one can look for other, and better trees.</value>
<value>Using the Jumble option, you must specify how many times you want to restart the process. The value 10 causes ten different orders of species to be used in constructing the trees, and the results printed out will reflect this entire search process (that is, the best trees found among all 10 runs will be printed out, not the best trees from each individual run).</value>
													</comment>
												</attributes>
											</parameter>
											<parameter ismandatory="1" type="Integer">
											<name>jumble_seed</name>
												<attributes>
													<prompt>Random number seed (must be odd)</prompt>
													<format>
														<language>perl</language>
														<code>""</code>
													</format>
													<group>19</group>
													<ctrls>
														<ctrl>
															<message>Random number seed must be odd</message>
															<language>perl</language>
															<code>$value &lt;= 0 || (($value % 2) == 0)</code>
														</ctrl>
													</ctrls>
													<precond>
														<language>perl</language>
														<code>$jumble</code>
													</precond>
												</attributes>
											</parameter>
											<parameter type="Integer">
											<name>times</name>
												<attributes>
													<prompt>Number of times to jumble</prompt>
													<format>
														<language>perl</language>
														<code>""</code>
													</format>
													<vdef><value>1</value></vdef>
													<group>19</group>
												</attributes>
											</parameter>
							</parameters>
					</paragraph>
				</parameter>
				<parameter type="Paragraph">
					<paragraph>
						<name>user_tree_opt</name>
						<prompt>User tree options</prompt>
							<parameters>
											<parameter type="Switch">
											<name>user_tree</name>
												<attributes>
													<prompt>Use User tree (default: no, search for best tree) (U)</prompt>
													<format>
														<language>perl</language>
														<code>($value)? "U\\n" : "" </code>
													</format>
													<vdef>
														<value>0</value>
													</vdef>
													<group>5</group>
													<comment>
<value>The U (User tree) option. This option toggles between the default setting, which allows the program to
search for the best tree, and the User tree setting, which reads a tree or trees ("user trees") from an input
tree file. The input tree file default name is intree.</value>
<value>((Alligator,Bear),((Cow,(Dog,Elephant)),Ferret));</value>
<value>((Alligator,Bear),(((Cow,Dog),Elephant),Ferret));</value>
<value>((Alligator,Bear),((Cow,Dog),(Elephant,Ferret)));</value>
		<value>Multifurcating trees are permitted. You must then enter the number of trees submitted. In using the
		 user tree option, check the pattern of parentheses carefully. The programs do not always detect whether
		 the tree makes sense, and if it does not there will probably be a crash (hopefully, but not inevitably,
		 with an error message indicating the nature of the problem). Trees written out by programs are typically
		 in the proper form.
</value>
													</comment>
													<ctrls>
														<ctrl>
															<message>you cannot randomize (jumble) your dataset and give a user tree at the same time</message>
															<language>perl</language>
															<code>$user_tree &amp;&amp; $jumble</code>
														</ctrl>
													</ctrls>
													<paramfile>params</paramfile>
												</attributes>
										</parameter>
										<parameter type="InFile">
											<name>tree_file</name>
												<attributes>
													<prompt>User Tree file</prompt>
													<format>
														<language>perl</language>
<!-- <code>($value)? "cat $tree_file &gt;&gt; infile; " : ""</code> -->
														<code>"" </code>
													</format>
<!-- Added Swami -->
													<filenames>intree</filenames> 
<!-- -->
													<group>-1</group>
													<comment>
														<value>Specify your tree file.</value>
													</comment>
													<precond>
														<language>perl</language>
														<code>$user_tree</code>
													</precond>
												</attributes>
											</parameter>
<!-- ADDED FOR Swami, in case tree file has multiple trees -->
											<parameter ismandatory="1" type="Integer">
											<name>tree_jumble_seed</name>
												<attributes>
													<prompt>Random number seed (must be odd)</prompt>
													<format>
														<language>perl</language>
														<code>""</code>
													</format>
													<group>4</group>
													<ctrls>
														<ctrl>
															<message>Random number seed must be odd</message>
															<language>perl</language>
															<code>$value &lt;= 0 || (($value % 2) == 0)</code>
														</ctrl>
													</ctrls>
													<precond>
														<language>perl</language>
														<code>$user_tree</code>
													</precond>
												</attributes>
											</parameter>	 
<!-- PHYLIP no longer requires this parameter-->
<!--	  
	  <parameter ismandatory="1" type="Integer">
	    <name>tree_nb</name>
	    <attributes>
	      <prompt>How many tree(s) in the User Tree file</prompt>
	      <format>
		<language>perl</language>
		<code>"echo $value &gt;&gt; intree; "</code>
	      </format>
	      <vdef><value>1</value></vdef>
	      <group>-2</group>
	      <comment> 
		<value>Give this information whenever the infile does not already contain the tree.</value>
	      </comment>
	      <precond>
		<language>perl</language>
		<code>$user_tree</code>
	      </precond>
	    </attributes>
	  </parameter>
-->	   
							</parameters>
					</paragraph>
				</parameter>
     <parameter type="Paragraph">
		  <paragraph>
		  <name>bootstrap</name>
		  <prompt>Multiple Datasets: </prompt>
				 <parameters>
								 <parameter type="Switch">
								 <name>multiple_dataset</name>
									 <attributes>
										 <prompt>Analyze multiple data sets (M), e.g. from Seqboot; infer Consensus Trees with the output using Consense</prompt>
										 <format>
<!--modified to accomodate the weights or data prompt -->
											 <language>perl</language>
<!---changed for Swami
											 <code>($value) ? "M\\n$weightsordata$datasets_nb\\n$multi_seed\\n$multi_times\\n" : ""</code>
-->
											 <code>($value) ? "" : ""</code>
										 </format>
										 <vdef><value>0</value></vdef>
<!-- changed for swami					 <group>10</group>                                -->
										 <group>9</group>
										 <paramfile>params</paramfile>
										 <comment>
<value>The M (Multiple data sets) option allows bootstrapping. The M (multiple data sets option) will ask you whether you want to use multiple sets of weights (from the weights file) or multiple data sets. The ability to use a single data set with multiple weights means that much less disk space will be used for this input data. The bootstrapping and jackknifing tool Seqboot has the ability to create a weights file with multiple weights.  The present version of the package allows bootstrapping with the useof Seqboot and Consense. Currently, in SWAMI, these programs must be run separately, rather than invoking it from this interface.</value>
<value>Here is a (very small) sample input file with two five-species data sets: </value>
<value></value>
 <value>5    6</value>
<value>Alpha     CCACCA</value>
<value>Beta      CCAAAA</value>
<value>Gamma     CAACCA</value>
<value>Delta     AACAAC</value>
<value>Epsilon   AACCCA</value>
<value>5    6</value>
<value>Alpha     CACACA</value>
<value>Beta      CCAACC</value>
<value>Gamma     CAACAC</value>
<value>Delta     GCCTGG</value>
<value>Epsilon   TGCAAT</value>
										 </comment>
									 </attributes>
								 </parameter>
								 <parameter ismandatory="1" type="Excl">
								 <name>weightsordata</name>
									 <attributes>
										 <prompt>Multiple data sets or multiple weights? (type D or W)</prompt>
										 <format>
											 <language>perl</language>
											 <code>""</code>
										 </format>
										 <vdef><value>data</value></vdef>
										 <vlist>
												 <value>data</value>
												 <label>Data</label>
												 <value>weights</value>
												 <label>Weights</label>
										 </vlist>
										 <flist>
										 		 <value>data</value>
												 <code>"M\\nD\\n$datasets_nb\\n$multi_seed\\n$multi_times\\n"</code>
												 <value>weights</value>
												 <code>"M\\nW\\n$datasets_nb\\n$multi_seed\\n$multi_times\\n"</code>
										 </flist>
<!-- this is labelled group 9, but it is delivered in group 10 as part of the /m command <group>9</group> -->
										 <group>10</group>
										 <precond>
											 <language>perl</language>
											 <code>$multiple_dataset</code>
										 </precond>
										 <paramfile>params</paramfile>
									 </attributes>
								 </parameter>
								 <parameter ismandatory="1" type="Integer">
								 <name>datasets_nb</name>
									 <attributes>
										 <prompt>How many data sets?</prompt>
										 <format>
											 <language>perl</language>
											 <code>""</code>
										 </format>
<!-- this is labelled group 9, but it is delivered in group 10 as part of the /m command <group>9</group>-->
										 <group>9</group>
										 <ctrls>
											 <ctrl>
											     <message>there must be no more than 1000 datasets for this server</message>
												 <language>perl</language>
												 <code>$value &gt; 1000</code>
											 </ctrl>
									     </ctrls>
										 <precond>
											 <language>perl</language>
											 <code>$multiple_dataset</code>
										 </precond>
										 <paramfile>params</paramfile>
									</attributes>
								</parameter>
<!-- fix the M option -->
								<parameter ismandatory="1" type="Integer">
								<name>multi_seed</name>
									<attributes>
										<prompt>Random number seed (must be odd)</prompt>
										<format>
											<language>perl</language>
											<code>""</code>
										</format>
										<group>9</group>
										<ctrls>
											<ctrl>
												<message>Random number seed must be odd</message>
												<language>perl</language>
												<code>$value &lt;= 0 || (($value % 2) == 0)</code>
											</ctrl>
										</ctrls>
										<precond>
											<language>perl</language>
											<code>$multiple_dataset</code>
										</precond>
										<paramfile>params</paramfile>
									</attributes>
								</parameter>
								<parameter type="Integer">
								<name>multi_times</name>
									<attributes>
										<prompt>Number of times to jumble</prompt>
										<format>
											<language>perl</language>
											<code>""</code>
										</format>
										<vdef><value>1</value></vdef>
										<group>9</group>
										<precond>
											<language>perl</language>
											<code>$multiple_dataset</code>
										</precond>
										<paramfile>params</paramfile>
									</attributes>
								</parameter>
					</parameters>
			</paragraph>
		</parameter>
<!--	changed for swami original but incorrect, doesnt allow weights or data choice	
		<parameter type="Paragraph">
					<paragraph>
						<name>multiple_dataset_options</name>
						<prompt>Multiple Dataset Options</prompt>
							<parameters>
													<parameter type="Switch">
														<name>multiple_dataset</name>
															<attributes>
																<prompt>Analyze multiple data sets (M)</prompt>
																<format>
																	<language>perl</language>
																	<code>($value)? "M\\nD\\n$datasets_nb\\n" : ""</code>
																</format>
																<vdef><value>0</value></vdef>
																<group>10</group>
																<paramfile>params</paramfile>
																<comment>
<value>The M (Multiple data sets) option. This option is included to allow bootstrapping. Using the program Seqboot, one can take any DNA, protein, restriction sites, gene frequency or binary character data set and make multiple data sets by bootstrapping. Trees can be produced for all bootstrapped data sets using the M option. 
			These can be written to the tree output file if that option is left in force. 
			The multi-tree output file can be routed to the program Consense to create a majority rule consensus tree
			that can be used to make confidence intervals. The present version of the package allows bootstrapping
			with Seqboot and Consense.</value>
			<value>Here is a (very small) sample input file with two five-species data sets:</value> 
			<value>&#xA0;&#xA0;&#xA0;&#xA0;5&#xA0;&#xA0;&#xA0;6</value>
			<value>Alpha&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;110110</value>
			<value>Beta&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;110000</value>
			<value>Gamma&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;100110</value>
			<value>Delta&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;001001C</value>
			<value>Epsilon&#xA0;&#xA0;&#xA0;001110</value>
			<value>&#xA0;&#xA0;&#xA0;&#xA0;5&#xA0;&#xA0;&#xA0;6</value>
			<value>Alpha&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;110110</value>
			<value>Beta&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;110000</value>
			<value>Gamma&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;100110</value>
			<value>Delta&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;001001C</value>
			<value>Epsilon&#xA0;&#xA0;&#xA0;001110</value>
			<value>The program can take multiple weights instead of multiple data sets.
			It can do bootstrapping by reading in one data set,
			together with a file of weights that show how the characters (or sites) are to be reweighted in each bootstrap sample.
			Thus a site that is omitted in a bootstrap sample has effectively been given weight 0, while a site that has been
			duplicated has effectively been given weight 2. The required weights file can be produced using Seqboot,
			by setting the option to produce a wieghts file instead instead of producing a file of multiple data sets. 
			It can be saved and used as the input weights file.</value>
			<value>The main use of this option will be to allow all of the methods in these programs to be bootstrapped.
			Using the program Seqboot one can take any DNA, protein, restriction sites, gene frequency or binary character
			data set and make multiple data sets by bootstrapping.
			Trees can be produced for all of these using the M option.
			They will be written to the tree output file if that option is left in force.
			The program Consense can be used to create a majority rule consensus tree which can be used to make confidence intervals.</value>
																</comment>
															</attributes>
													</parameter>
													<parameter ismandatory="1" type="Integer">
														<name>datasets_nb</name>
															<attributes>
																<prompt>How many data sets</prompt>
																<format>
																	<language>perl</language>
																	<code>""</code>
																</format>
																<group>9</group>
																<ctrls>
																	<ctrl>
																		<message>enter a value &gt; 0 ; there must be no more than 1000 datasets for this server</message>
																		<language>perl</language>
																		<code>($value &gt; 1000) || ($value &lt; 0)</code>
																	</ctrl>
																</ctrls>
																<precond>
																	<language>perl</language>
																	<code>$multiple_dataset</code>
																</precond>
															</attributes>
														</parameter>
														<parameter ismandatory="1" type="Integer">
														<name>multi_seed</name>
															<attributes>
																<prompt>Random number seed (must be odd)</prompt>
																<format>
																	<language>perl</language>
																	<code>""</code>
																</format>
																<group>9</group>
																<ctrls>
																	<ctrl>
																		<message>Random number seed must be odd</message>
																		<language>perl</language>
																		<code>$value &lt;= 0 || (($value % 2) == 0)</code>
																	</ctrl>
																</ctrls>
																<precond>
																	<language>perl</language>
																	<code>$multiple_dataset</code>
																</precond>
																<paramfile>params</paramfile>
															</attributes>
														</parameter>
														<parameter type="Integer">
														<name>multi_times</name>
															<attributes>
																<prompt>Number of times to jumble</prompt>
																<format>
																	<language>perl</language>
																	<code>""</code>
																</format>
																<vdef><value>1</value></vdef>
																<group>9</group>
																<precond>
																	<language>perl</language>
																	<code>$multiple_dataset</code>
																</precond>
																<paramfile>params</paramfile>
															</attributes>
														</parameter> -->
<!--	  Consensus tree computation is not supported by SWAMI -->
<!--	  												<parameter type="Switch">
															<name>consense</name>
																<attributes>
																	<prompt>Compute a consensus tree</prompt>
																	<format>
																		<language>perl</language>
																		<code>($value) ? "; cp infile infile.dollop; cp outtree outtree.dollop; cp outfile outfile.dollop; mv outtree intree; consense &lt; consense.params; cp outtree outtree.consense; cp outfile outfile.consense; mv outtree.dollop outtree; mv infile.dollop infile; mv outfile.dollop outfile" : ""</code>
																	</format>
																	<vdef><value>0</value></vdef>
																	<group>10</group>
																	<precond>
																		<language>perl</language>
																		<code>$multiple_dataset &amp;&amp; $print_treefile</code>
																	</precond>
																</attributes>
															</parameter>
							</parameters>
				</paragraph> 	 
			</parameter>-->
				<parameter type="Paragraph">
					<paragraph>
						<name>output</name>
						<prompt>Output options</prompt>
							<parameters>
														<parameter type="Switch">
															<name>print_tree</name>
															<attributes>
																<prompt>Print out tree (3)</prompt>
																<format>
																	<language>perl</language>
																	<code>($value)? "" : "3\\n"</code>
																</format>
																<vdef><value>1</value></vdef>
																<group>1</group>
																<comment>
<value>Tells the program to print a semi-graphical picture of the tree in the outfile.</value>
																</comment>
																<paramfile>params</paramfile>
															</attributes>
														</parameter>
														<parameter type="Switch">
															<name>print_step</name>
																<attributes>
																	<prompt>Print out steps in each character (4)</prompt>
																	<format>
																		<language>perl</language>
																		<code>($value)? "4\\n" : ""</code>
																	</format>
																	<vdef><value>0</value></vdef>
																	<group>1</group>
																	<paramfile>params</paramfile>
																</attributes>
														</parameter>
														<parameter type="Switch">
															<name>print_states</name>
																<attributes>
																	<prompt>Print states at all nodes of tree (5)</prompt>
																	<format>
																		<language>perl</language>
																		<code>($value)? "5\\n" : ""</code>
																	</format>
																	<vdef><value>0</value></vdef>
																	<paramfile>params</paramfile>
																	<group>1</group>
																</attributes>
														</parameter>
														<parameter type="Switch">
															<name>print_treefile</name>
																<attributes>
																	<prompt>Write out trees onto tree file (6)</prompt>
																	<format>
																		<language>perl</language>
																		<code>($value) ? "" : "6\\n"</code>
																	</format>
																	<vdef><value>1</value></vdef>
																	<group>1</group>
																	<comment>
<value>Tells the program to save the tree in a treefile (a standard representation of trees where the tree is specified by a nested pairs of parentheses, enclosing names and separated by commas).</value> 	
																	</comment>
																	<paramfile>params</paramfile>
																</attributes>
														</parameter>
														<parameter type="Switch">
															<name>printdata</name>
																<attributes>
																	<prompt>Print out the data at start of run (1)</prompt>
																	<format>
																		<language>perl</language>
																		<code>($value)? "1\\n" : ""</code>
																	</format>
																	<vdef><value>0</value></vdef>
																	<group>1</group>
																	<paramfile>params</paramfile>
																</attributes>
														</parameter>
														<parameter type="Switch">
															<name>indent_tree</name>
															<attributes>
																<prompt>Indent treefile</prompt>
																<format>
																	<language>perl</language>
																	<code>($value)? " &amp;&amp; indenttree -o outtree.indent outtree" : "" </code>
																</format>
																<vdef><value>0</value></vdef>
<!--<group>1000</group>-->
																<group>99</group>
															</attributes>
														</parameter>
						</parameters>
					</paragraph>
				</parameter>
				<parameter type="Paragraph">
					<paragraph>
						<name>pars_opt</name>
						<prompt>Parsimony options</prompt>
							<parameters>
														<parameter type="Switch">
															<name>use_threshold</name>
																<attributes>
																	<prompt>Use Threshold parsimony (T)</prompt>
																	<format>
																		<language>perl</language>
																		<code>($value)? "T\\n$threshold\\n" : ""</code>
																	</format>
																	<vdef><value>0</value></vdef>
																	<group>3</group>
																	<paramfile>params</paramfile>
																</attributes>
														</parameter>
														<parameter ismandatory="1" type="Integer">
															<name>threshold</name>
																<attributes>
																	<prompt>Threshold value (if use threshold parsimony)</prompt>
																	<format>
																		<language>perl</language>
																		<code>"" </code>
																	</format>
																	<precond>
																		<language>perl</language>
																		<code>$use_threshold</code>
																	</precond>
																	<ctrls>
																		<ctrl>
																			<message>You must enter a numeric value greater than 1</message>
																			<language>perl</language>
																			<code>($threshold !~ /^\d+(\.\d+)?$/) || ($threshold &lt; 1)</code>
																		</ctrl>
																	</ctrls>
																	<group>2</group>
																	<paramfile>params</paramfile>
																	<comment>
	      <value>Setting T at or below 1.0 but above 0 causes the criterion to become compatibility rather
	       than polymorphism parsimony. There is no advantage to using this program instead of MIX to do a compatibility
	       method. Setting the threshold value higher brings about an intermediate between the Dollo or polymorphism
	       parsimony methods and the compatibility method. Since the Dollo and polymorphism methods produces a rooted
	       tree, the user-defined trees required by the U option have two-way forks at each level.</value>
	       <value>By using a threshold value of 1.0 or lower, but above 0, one can obtain a rooted
	       (or, if the A option is used with ancestral states of "?", unrooted) compatibility criterion, but there
	       is no particular advantage to using this program for that instead of MIX. Higher threshold values are of
	       course meaningful and provide intermediates between Dollo and compatibility methods.</value>
 <value>&#169;Copyright 1980-2007. University of Washington.</value>
																	</comment>
																</attributes>
														</parameter>
							</parameters>
				</paragraph>
				</parameter>
											<parameter type="Results">
															<name>outfile</name>
																<attributes>
																	<filenames>outfile</filenames>
																</attributes>
														</parameter>
											<parameter type="Results">
															<name>treefile</name>
																<attributes>
																	<precond>
																		<language>perl</language>
																		<code>$print_treefile</code>
																	</precond>
																	<filenames>outtree</filenames>
																	<pipe>
																		<pipetype>phylip_tree</pipetype>
																			<language>perl</language>
																			<code>1</code>
																	</pipe>
																</attributes>
														</parameter>
											<parameter type="Results">
															<name>indented_treefile</name>
																<attributes>
																	<precond>
																		<language>perl</language>
																		<code>$print_treefile &amp;&amp; $indent_tree</code>
																	</precond>
																	<filenames>outtree.indent</filenames>
																</attributes>
														</parameter>
											<parameter type="Results">
															<name>params</name>
																<attributes>
																	<filenames>params</filenames>
																</attributes>
														</parameter>
											<parameter ishidden="1" type="String">
															<name>confirm</name>
																<attributes>
																	<format>
																		<language>perl</language>
																		<code>"y\\n"</code>
																	</format>
<!--<group>1000</group>-->
																	<group>99</group>
																	<paramfile>params</paramfile>
																</attributes>
															</parameter>
											<parameter ishidden="1" type="String">
																<name>terminal_type</name>
																	<attributes>
																		<format>
																			<language>perl</language>
																			<code>"0\\n"</code>
																		</format>
<!--<group>-1</group>-->
																		<group>0</group>
																		<paramfile>params</paramfile>
																	</attributes>
															</parameter>
											<parameter type="Results">
																<name>tmp_params</name>
																	<attributes>
																		<filenames>*.params</filenames>
																	</attributes>
															</parameter>
<!-- consense removed for swami -->
<!--
											<parameter ishidden="1" type="String">
																<name>consense_confirm</name>
																	<attributes>
																		<format>
																			<language>perl</language>
																			<code>"Y\\n"</code>
																		</format> -->
<!--<group>1000</group>-->
<!-- consesne removed for swami																	<group>99</group>
																		<precond>
																			<language>perl</language>
																			<code>$consense</code>
																		</precond>
																		<paramfile>consense.params</paramfile>
																	</attributes>
															</parameter>
											<parameter ishidden="1" type="String">
																<name>consense_terminal_type</name>
																	<attributes>
																		<format>
																			<language>perl</language>
																			<code>"T\\n"</code>
																		</format> -->
<!--<group>-2</group>-->
<!-- consense removed for swami 
																		<group>0</group>
																		<precond>
																			<language>perl</language>
																			<code>$consense</code>
																		</precond>
																		<paramfile>consense.params</paramfile>
																	</attributes>
															</parameter>
											<parameter type="Results">
																<name>consense_outfile</name>
																	<attributes>
																		<precond>
																			<language>perl</language>
																			<code>$consense</code>
																		</precond>
																		<filenames>outfile.consense</filenames>
																	</attributes>
															</parameter>
											<parameter type="Results">
																<name>consense_treefile</name>
																	<attributes>
																		<precond>
																			<language>perl</language>
																			<code>$consense</code>
																		</precond>
																		<filenames>outtree.consense</filenames>
																	</attributes>
															</parameter>
-->
	</parameters>
</pise>
