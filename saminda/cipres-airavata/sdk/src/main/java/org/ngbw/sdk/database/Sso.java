/*
 * Sso.java
 */
package org.ngbw.sdk.database;


import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.TreeSet;
import org.ngbw.sdk.database.User;

import org.ngbw.sdk.WorkbenchCIPRES;
import org.ngbw.sdk.WorkbenchException;
import org.ngbw.sdk.common.util.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;


/**
 *
 * @author Terri Liebowitz Schwartz
 *
 */
public class Sso extends Row implements Comparable<Sso> {
	private static final Log log = LogFactory.getLog(Sso.class.getName());
	private static String accountingPeriodStart = null;

	private static final String TABLE_NAME = "sso";
	private static final String COLUMN_NAMES =
		TABLE_NAME + ".SSO_ID, " + 			// SSO_ID is the primary, auto inc key
		TABLE_NAME + ".USER_ID, " +
		TABLE_NAME + ".SSO_USERNAME " ;

	private LongColumn m_ssoId = new LongColumn(TABLE_NAME + ".SSO_ID", false);
	private LongColumn m_userId = new LongColumn(TABLE_NAME + ".USER_ID", false);
	private StringColumn m_ssoUsername = new StringColumn(TABLE_NAME + ".SSO_USERNAME", false, 255);

	// constructors
	public Sso()
	{
		super(TABLE_NAME);
	}

	public Sso(long ssoId) throws IOException, SQLException
	{
		super(TABLE_NAME);
		m_ssoId.assignValue(ssoId);
		refresh();
	}

	private Sso(ResultSet row) throws IOException, SQLException
	{
		super(TABLE_NAME);
		populate(row);
	}


	// public methods

	public long getSsoId()
	{
		return m_ssoId.getValue();
	}

	public long getUserId()
	{
		return m_userId.getValue();
	}

	public void setUserId(long userId)
	{
		m_userId.setValue(userId);
	}

	public String getSsoUsername()
	{
		return m_ssoUsername.getValue();
	}

	public void setSsoUsername(String username)
	{
		m_ssoUsername.setValue(username);
	}

	public User getUser() throws IOException, SQLException
	{
		return new User(m_userId.getValue());
	}


	public static List<Sso> findAllSso() throws IOException, SQLException
	{
		Connection dbConn = ConnectionManager.getConnectionSource().getConnection();
		PreparedStatement selectStmt = null;
		ResultSet userRows = null;

		try {
			selectStmt = dbConn.prepareStatement("SELECT " + COLUMN_NAMES + " FROM " + TABLE_NAME);

			userRows = selectStmt.executeQuery();

			List<Sso> users = new ArrayList<Sso>();

			while (userRows.next())
				users.add(new Sso(userRows));

			return users;
		}
		finally {
			if (userRows != null)
				userRows.close();

			if (selectStmt != null)
				selectStmt.close();

			dbConn.close();
		}
	}

	public static Sso findSsoBySsoUsername(String username) throws IOException, SQLException
	{
		return findSso(new StringCriterion("SSO_USERNAME", username));
	}

	public static void addAccount(User user, String iplantName) throws IOException, SQLException
	{
		log.debug("Adding linkage for iplant user " + iplantName + " and cipres user " + user.getUsername());
		Sso sso  = new Sso();
		sso.setSsoUsername(iplantName);
		sso.setUserId(user.getUserId());

		log.debug("sso username is " + sso.getSsoUsername());
		sso.save();
	}




	public boolean isNew()
	{
		return m_ssoId.isNull();
	}

	@Override
	public boolean equals(Object other)
	{
		if (other == null)
			return false;

		if (this == other)
			return true;

		if (other instanceof Sso == false)
			return false;

		Sso otherUser = (Sso) other;

		if (isNew() || otherUser.isNew())
			return false;

		return getSsoId() == otherUser.getSsoId();
	}

	@Override
	public int hashCode()
	{
		return (new Long(getSsoId())).hashCode();
	}

	public int compareTo(Sso other)
	{
		if (other == null)
			throw new NullPointerException("other");

		if (this == other)
			return 0;

		if (isNew())
			return -1;

		if (other.isNew())
			return 1;

		return (int) (getSsoId() - other.getSsoId());
	}


	// package methods

	Criterion getKey()
	{
		return new SimpleKey(m_ssoId);
	}

	void save(Connection dbConn) throws IOException, SQLException
	{
		List<Column<?>> colList = new ArrayList<Column<?>>();

		if (isNew()) {
			colList.add(m_userId);
			colList.add(m_ssoUsername);

			insert(dbConn, new AutoGeneratedKey(m_ssoId), colList);
		}
		else {
			if (m_userId.isModified())
				colList.add(m_userId);
			if (m_ssoUsername.isModified())
				colList.add(m_ssoUsername);

			update(dbConn, colList);
		}
	}

	void delete(Connection dbConn) throws IOException, SQLException
	{
		if (isNew())
			throw new WorkbenchException("Not persisted");

		delete(dbConn, m_ssoId.getValue());

		m_ssoId.reset();
	}

	static void delete(Connection dbConn, long ssoId) throws SQLException
	{
		PreparedStatement deleteStmt = dbConn.prepareStatement("DELETE FROM " + TABLE_NAME + " WHERE SSO_ID = ?");

		try {
			deleteStmt.setLong(1, ssoId);

			deleteStmt.executeUpdate();
		}
		finally {
			deleteStmt.close();
		}
	}

	void refresh(Connection dbConn) throws IOException, SQLException
	{
		select(dbConn, COLUMN_NAMES);
	}


	protected void populate(ResultSet row) throws IOException, SQLException
	{
		m_ssoId.assignValue(row, 1);
		m_userId.assignValue(row, 2);
		m_ssoUsername.assignValue(row, 3);

		//super.populate(row, 4);
	}


	// private methods


	private static Sso findSso(Criterion key) throws IOException, SQLException
	{
		StringBuilder stmtBuilder = new StringBuilder("SELECT " + COLUMN_NAMES + " FROM " + TABLE_NAME + " WHERE ");

		stmtBuilder.append(key.getPhrase());

		Connection dbConn = ConnectionManager.getConnectionSource().getConnection();
		PreparedStatement selectStmt = null;
		ResultSet userRow = null;

		try {
			selectStmt = dbConn.prepareStatement(stmtBuilder.toString());

			key.setParameter(selectStmt, 1);

			userRow = selectStmt.executeQuery();

			if (!userRow.next())
				return null;

			return new Sso(userRow);
		}
		finally {
			if (userRow != null)
				userRow.close();

			if (selectStmt != null)
				selectStmt.close();

			dbConn.close();
		}
	}

}
