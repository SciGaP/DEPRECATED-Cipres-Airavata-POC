/*
 * UserItemDataRecord.java
 */
package org.ngbw.sdk.database;


import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.EnumMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.ngbw.sdk.WorkbenchException;
import org.ngbw.sdk.core.types.RecordFieldType;
import org.ngbw.sdk.core.types.RecordType;


/**
 *
 * @author Roland H. Niedner
 * @author Paul Hoover
 *
 */
public class UserItemDataRecord extends Row implements DataRecord, Comparable<UserItemDataRecord> {

	private static final String TABLE_NAME = "data_records";
	private static final String COLUMN_NAMES = TABLE_NAME + ".RECORD_ID, " + TABLE_NAME + ".USERDATA_ID, " + TABLE_NAME + ".RECORD_TYPE";

	private LongColumn m_recordId = new LongColumn(TABLE_NAME + ".RECORD_ID", false);
	private LongColumn m_userDataId = new LongColumn(TABLE_NAME + ".USERDATA_ID", false);
	private StringColumn m_recordType = new StringColumn(TABLE_NAME + ".RECORD_TYPE", false, 100);
	private Map<RecordFieldType, RecordField> m_fields;


	// constructors


	public UserItemDataRecord(RecordType type, Set<RecordFieldType> fields, UserDataItem owner)
	{
		this(type, owner);

		for (Iterator<RecordFieldType> types = fields.iterator() ; types.hasNext() ; ) {
			RecordFieldType fieldType = types.next();

			m_fields.put(fieldType, new RecordField(fieldType));
		}
	}

	public UserItemDataRecord(RecordType type, Map<RecordFieldType, Object> values, UserDataItem owner)
	{
		this(type, owner);

		for (Iterator<Map.Entry<RecordFieldType, Object>> entries = values.entrySet().iterator() ; entries.hasNext() ; ) {
			Map.Entry<RecordFieldType, Object> entry = entries.next();
			RecordFieldType fieldType = entry.getKey();

			m_fields.put(fieldType, new RecordField(fieldType, entry.getValue()));
		}
	}

	public UserItemDataRecord(DataRecord other, UserDataItem owner)
	{
		this(other.getRecordType(), owner);

		for (Iterator<RecordField> fields = other.getFields().iterator() ; fields.hasNext() ; ) {
			RecordField field = fields.next();

			m_fields.put(field.getFieldType(), new RecordField(field));
		}
	}

	public UserItemDataRecord(long recordId) throws IOException, SQLException
	{
		super(TABLE_NAME);

		m_recordId.assignValue(recordId);

		refresh();
	}

	UserItemDataRecord(DataRecord other)
	{
		this(other.getRecordType());

		for (Iterator<RecordField> fields = other.getFields().iterator() ; fields.hasNext() ; ) {
			RecordField field = fields.next();

			m_fields.put(field.getFieldType(), new RecordField(field));
		}
	}

	private UserItemDataRecord(RecordType type)
	{
		super(TABLE_NAME);

		m_recordType.setValue(type.toString());
		m_fields = new EnumMap<RecordFieldType, RecordField>(RecordFieldType.class);
	}

	private UserItemDataRecord(RecordType type, UserDataItem owner)
	{
		this(type);

		if (!owner.isNew())
			setUserDataId(owner.getUserDataId());
	}

	private UserItemDataRecord(Connection dbConn, ResultSet row) throws IOException, SQLException
	{
		super(TABLE_NAME);

		populate(row);

		m_fields = getRecordFields(dbConn);
	}


	// public methods


	public long getRecordId()
	{
		return m_recordId.getValue();
	}

	public long getUserDataId()
	{
		return m_userDataId.getValue();
	}

	public RecordType getRecordType()
	{
		return RecordType.valueOf(m_recordType.getValue());
	}

	public List<RecordField> getFields()
	{
		return new ArrayList<RecordField>(m_fields.values());
	}

	public RecordField getField(RecordFieldType field)
	{
		return m_fields.get(field);
	}

	public boolean isNew()
	{
		return m_recordId.isNull();
	}

	@Override
	public boolean equals(Object other)
	{
		if (other == null)
			return false;

		if (this == other)
			return true;

		if (other instanceof UserItemDataRecord == false)
			return false;

		UserItemDataRecord otherRecord = (UserItemDataRecord) other;

		if (isNew() || otherRecord.isNew())
			return false;

		return getRecordId() == otherRecord.getRecordId();
	}

	@Override
	public int hashCode()
	{
		return (new Long(getRecordId())).hashCode();
	}

	public int compareTo(UserItemDataRecord other)
	{
		if (other == null)
			throw new NullPointerException("other");

		if (this == other)
			return 0;

		if (isNew())
			return -1;

		if (other.isNew())
			return 1;

		return (int) (getRecordId() - other.getRecordId());
	}


	// package methods


	void setUserDataId(Long userDataId)
	{
		m_userDataId.setValue(userDataId);
	}

	Criterion getKey()
	{
		return new SimpleKey(m_recordId);
	}

	void save(Connection dbConn) throws IOException, SQLException
	{
		if (isNew()) {
			List<Column<?>> colList = new ArrayList<Column<?>>();

			colList.add(m_userDataId);
			colList.add(m_recordType);

			insert(dbConn, new AutoGeneratedKey(m_recordId), colList);

			PreparedStatement insertStmt = dbConn.prepareStatement("INSERT INTO record_fields (RECORD_ID, RECORD_FIELD, VALUE) VALUES (?, ?, ?)");

			try {
				for (Iterator<RecordField> fields = m_fields.values().iterator() ; fields.hasNext() ; ) {
					RecordField field = fields.next();

					m_recordId.setParameter(insertStmt, 1);
					insertStmt.setString(2, field.getFieldType().toString());
					insertStmt.setString(3, field.getValueAsString());

					insertStmt.addBatch();
				}

				insertStmt.executeBatch();
			}
			finally {
				insertStmt.close();
			}
		}
		else {
			PreparedStatement updateStmt = dbConn.prepareStatement("UPDATE record_fields SET VALUE = ? WHERE RECORD_ID = ? AND RECORD_FIELD = ?");

			try {
				for (Iterator<RecordField> fields = m_fields.values().iterator() ; fields.hasNext() ; ) {
					RecordField field = fields.next();

					if (field.isModified()) {
						updateStmt.setString(1, field.getValueAsString());
						m_recordId.setParameter(updateStmt, 2);
						updateStmt.setString(3, field.getFieldType().toString());

						updateStmt.addBatch();
					}
				}

				updateStmt.executeBatch();
			}
			finally {
				updateStmt.close();
			}
		}
	}

	void delete(Connection dbConn) throws IOException, SQLException
	{
		if (isNew())
			throw new WorkbenchException("Not persisted");

		delete(dbConn, m_recordId.getValue());

		m_recordId.reset();
	}

	void refresh(Connection dbConn) throws IOException, SQLException
	{
		select(dbConn, COLUMN_NAMES);

		m_fields = getRecordFields(dbConn);
	}

	static List<UserItemDataRecord> findDataRecords(Criterion key) throws IOException, SQLException
	{
		StringBuilder stmtBuilder = new StringBuilder("SELECT " + COLUMN_NAMES + " FROM " + TABLE_NAME + " WHERE ");

		stmtBuilder.append(key.getPhrase());

		Connection dbConn = ConnectionManager.getConnectionSource().getConnection();
		PreparedStatement selectStmt = null;
		ResultSet recordRows = null;

		try {
			selectStmt = dbConn.prepareStatement(stmtBuilder.toString());

			key.setParameter(selectStmt, 1);

			recordRows = selectStmt.executeQuery();

			List<UserItemDataRecord> records = new ArrayList<UserItemDataRecord>();

			while (recordRows.next())
				records.add(new UserItemDataRecord(dbConn, recordRows));

			return records;
		}
		finally {
			if (recordRows != null)
				recordRows.close();

			if (selectStmt != null)
				selectStmt.close();

			dbConn.close();
		}
	}

	static void delete(Connection dbConn, long recordId) throws SQLException
	{
		deleteRecordFields(dbConn, recordId);

		PreparedStatement deleteStmt = dbConn.prepareStatement("DELETE FROM " + TABLE_NAME + " WHERE RECORD_ID = ?");

		try {
			deleteStmt.setLong(1, recordId);

			deleteStmt.executeUpdate();
		}
		finally {
			deleteStmt.close();
		}
	}


	// protected methods


	protected void populate(ResultSet row) throws IOException, SQLException
	{
		m_recordId.assignValue(row, 1);
		m_userDataId.assignValue(row, 2);
		m_recordType.assignValue(row, 3);
	}


	// private methods


	private Map<RecordFieldType, RecordField> getRecordFields(Connection dbConn) throws IOException, SQLException
	{
		PreparedStatement selectStmt = dbConn.prepareStatement("SELECT RECORD_FIELD, VALUE FROM record_fields WHERE RECORD_ID = ?");
		ResultSet fieldRows = null;

		try {
			m_recordId.setParameter(selectStmt, 1);

			fieldRows = selectStmt.executeQuery();

			Map<RecordFieldType, RecordField> fields = new EnumMap<RecordFieldType, RecordField>(RecordFieldType.class);

			while (fieldRows.next()) {
				RecordFieldType type = RecordFieldType.valueOf(fieldRows.getString(1));

				fields.put(type, new RecordField(type, fieldRows.getString(2)));
			}

			return fields;
		}
		catch (ParseException parseErr) {
			throw new AssertionError(parseErr);
		}
		finally {
			if (fieldRows != null)
				fieldRows.close();

			selectStmt.close();
		}
	}

	private static void deleteRecordFields(Connection dbConn, long recordId) throws SQLException
	{
		PreparedStatement deleteStmt = dbConn.prepareStatement("DELETE FROM record_fields WHERE RECORD_ID = ?");

		try {
			deleteStmt.setLong(1, recordId);

			deleteStmt.executeUpdate();
		}
		finally {
			deleteStmt.close();
		}
	}
}
