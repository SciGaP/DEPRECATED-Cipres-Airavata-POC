/*
 * ExampleRow.java
 */
package org.ngbw.sdk.database;


import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;
import java.util.Date;

import org.ngbw.sdk.WorkbenchException;


/**
 *
 * Here's an example of a Java object that represents a row from a 
 * database table. It's pretty basic, the only columns are a primary key 
 * and a foreign key to the tasks table.
 * 
 * @author Paul, Luci, Juliane
 *
 */
public class ExampleRow extends Row implements Comparable<ExampleRow> 
{

	private static final String TABLE_NAME = "example_table";
	private static final String COLUMN_NAMES = TABLE_NAME + ".EXAMPLE_ID, " + TABLE_NAME + ".TASK_ID, " + TABLE_NAME + ".ACTUAL_DATE_TIME";

	private final LongColumn m_exampleId = new LongColumn(TABLE_NAME + ".EXAMPLE_ID", false);
	private final LongColumn m_taskId = new LongColumn(TABLE_NAME + ".TASK_ID", false);
	private final DateColumn m_atualDateTime = new DateColumn(TABLE_NAME + ".ACTUAL_DATE_TIME", false);


	// constructors


	/**
	 * @param exampleId
	 * @throws IOException
	 * @throws SQLException
	 */
	public ExampleRow(long exampleId) throws IOException, SQLException
	{
		super(TABLE_NAME);

		m_exampleId.assignValue(exampleId);

		refresh();
	}
	public ExampleRow() throws IOException, SQLException
	{
		super(TABLE_NAME);
	}


	// public methods


	/**
	 * @return
	 */
	public long getStatisticId()
	{
		return m_exampleId.getValue();
	}

	/**
	 * @return
	 */
	public long getTaskId()
	{
		return m_taskId.getValue();
	}

	/**
	 * @param taskId
	 */
	public void setTaskId(Long taskId)
	{
		m_taskId.setValue(taskId);
	}
	
	/**
	 * @param actualDateTime
	 */
	
	public void getActualDateTime(Date actualDateTime)
	{
		m_atualDateTime.getValue();
	}
	
	/**
	 * @param actualDateTime
	 */
	
	public void setActualDateTime(Date actualDateTime)
	{
		m_atualDateTime.setValue(actualDateTime);
	}

	/**
	 * @return
	 * @throws IOException
	 * @throws SQLException
	 */
	public Task getTask() throws IOException, SQLException
	{
		if (m_taskId.isNull())
			return null;

		return new Task(m_taskId.getValue());
	}

	/**
	 * @param task
	 */
	public void setTask(Task task)
	{
		if (task != null && !task.isNew())
			setTaskId(task.getTaskId());
		else
			setTaskId(null);
	}
	

	/**
	 * Indicates whether or not the object has been persisted.
	 *
	 * @return <code>true</code> if the object has not been persisted
	 */
	public boolean isNew()
	{
		return m_exampleId.isNull();
	}

	/**
	 * @param other
	 * @return
	 */
	@Override
	public boolean equals(Object other)
	{
		if (other == null)
			return false;

		if (this == other)
			return true;

		if (other instanceof ExampleRow == false)
			return false;

		ExampleRow otherRow = (ExampleRow) other;

		// an object that hasn't been persisted can only be equal to itself
		if (isNew() || otherRow.isNew())
			return false;

		return getStatisticId() == otherRow.getStatisticId();
	}

	/**
	 *
	 * @return
	 */
	@Override
	public int hashCode()
	{
		return (new Long(getStatisticId())).hashCode();
	}

	/**
	 *
	 * @param other
	 * @return
	 */
	public int compareTo(ExampleRow other)
	{
		if (other == null)
			throw new NullPointerException("other");

		if (this == other)
			return 0;

		if (isNew())
			return -1;

		if (other.isNew())
			return 1;

		return (int) (getStatisticId() - other.getStatisticId());
	}


	// package methods


	/**
	 * Returns a <code>Criterion</code> object that describes the primary key of the record
	 * that the object represents.
	 *
	 * @return a <code>Criterion</code> object that describes the primary key
	 */
	Criterion getKey()
	{
		return new SimpleKey(m_exampleId);
	}

	/**
	 * Saves the current state of the object to the database. If the object has not yet been persisted,
	 * new records are inserted in the appropriate tables. If the object has been persisted, then any
	 * changes are written to the backing tables. Only those values that have changed are written, and
	 * if the state of the object is unchanged, the method does nothing.
	 *
	 * @param dbConn a <code>Connection</code> object that will be used to communicate with the database
	 * @throws IOException
	 * @throws SQLException
	 */
	void save(Connection dbConn) throws IOException, SQLException
	{
		List<Column<?>> colList = new ArrayList<Column<?>>();

		if (isNew()) {
			colList.add(m_taskId);
			colList.add(m_atualDateTime); //necessary to save the value in the NEW column ACTUAL_DATE_TIME

			insert(dbConn, new AutoGeneratedKey(m_exampleId), colList);
		}
		else {
			if (m_taskId.isModified())
				colList.add(m_taskId);
			if (m_atualDateTime.isModified()) //necessary to save the value in the NEW column ACTUAL_DATE_TIME
				colList.add(m_atualDateTime);

			update(dbConn, colList);
		}
	}

	/**
	 * @param dbConn a <code>Connection</code> object that will be used to communicate with the database
	 * @throws IOException
	 * @throws SQLException
	 */
	void delete(Connection dbConn) throws IOException, SQLException
	{
		if (isNew())
			throw new WorkbenchException("Not persisted");

		delete(dbConn, m_exampleId.getValue());

		m_exampleId.reset();
	}

	/**
	 * @param dbConn a <code>Connection</code> object that will be used to communicate with the database
	 * @throws IOException
	 * @throws SQLException
	 */
	void refresh(Connection dbConn) throws IOException, SQLException
	{
		select(dbConn, COLUMN_NAMES);
	}

	/**
	 * @param dbConn a <code>Connection</code> object that will be used to communicate with the database
	 * @param exampleId
	 * @throws IOException
	 * @throws SQLException
	 */
	public void delete(Connection dbConn, long exampleId) throws SQLException
	{
		PreparedStatement deleteStmt = dbConn.prepareStatement("DELETE FROM " + TABLE_NAME + " WHERE EXAMPLE_ID = ?");

		try {
			deleteStmt.setLong(1, exampleId);

			deleteStmt.executeUpdate();
		}
		finally {
			deleteStmt.close();
		}
	}


	// protected methods

	/**
	 * @param row
	 * @throws SQLException
	 */
	protected void populate(ResultSet row) throws SQLException
	{
		m_exampleId.assignValue(row, 1);
		m_taskId.assignValue(row, 2);
	}
	
	
	
	//-------------------GET TIME---------------------	
	
	public Date actualDateWithJavaUtilDate()
	{
		Date x_actualDateWithJavaUtilDate = new Date();
		return x_actualDateWithJavaUtilDate;
	}
	
	//------------------GET TIME ---------------------
}




