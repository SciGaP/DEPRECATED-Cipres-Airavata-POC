<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pise SYSTEM "http://www.phylo.org/dev/rami/PARSER/pise.dtd">

<!-- Created for Swami by Mark Miller, around March 8, 2009. -->
<!--Note that The EMBOSS programs can read sequences from various sequence databases provided the sequence is referred to in the form database:entry.
	This format is known as a USA (Uniform Sequence Address). 
	Further information on USA's can be found on the EMBOSS website.
	You can see the databases we have set up for you using the program showdb: -->
<pise>

<head>
   <title>ePESTfind</title>
   <version>EMBOSS 6.0.0</version>
   <description>Finds PEST motifs as potential proteolytic cleavage sites.</description>
   <authors>Michael K. Schuster and Martin Grabner</authors>
   <category>Protein Sequence</category>
</head>

<command>epestfind</command>

<parameters>

   <!--   General qualifiers:
   -auto				boolean    Turn off prompts
   -warning			boolean    Report warnings
   -error				boolean    Report errors
   -fatal				boolean    Report fatal errors
   -die				boolean    Report deaths
-->
    <parameter ishidden="1" iscommand="1" type="String">
		<name>init</name>
		<attributes>
			<format>
				<language>perl</language>
				<code>"epestfind  -error -auto -fatal -die"</code>
			</format>
			<group>0</group>
		  </attributes>
	</parameter>

    <parameter ismandatory="1" issimple="1" isinput="1" type="Sequence">
		<name>seq_file</name>
		<attributes>
			<prompt>Sequence File</prompt>
			<format>
				<language>perl</language>
				<code>"-sequence seq_infile.txt" </code>
			</format>
			<group>1</group>
			<filenames>seq_infile.txt</filenames>
		</attributes>
    </parameter>
    
    <!--    "-sequence" associated qualifiers CANT MAKE THESE WORK --> 
<!--	-snucleotide1		boolean		Sequence is nucleotide
		-sprotein1			boolean		Sequence is protein  -->
<!--	
 					<parameter ismandatory="1" type="Excl">
						<name>nuc_or_prot</name>
						<attributes>
							<prompt>Type of Sequence Used</prompt>
							<format>
								<language>perl</language>
								<code>"-$value"</code>
							</format>
							<vdef>
								<value>sprotein1</value>
							</vdef>
							<vlist>
								<value>sprotein1</value>
								<label>Protein</label>
								<value>snucleotide1</value>
								<label>Nucleic Acid</label>
							</vlist>
							<group>4</group>
						</attributes>
					</parameter> -->

<!-- -window	Minimal distance between positively charged amino acids.	Integer 2 or more	10 -->
	<parameter issimple="1" type="Integer">
		<name>min_dist</name>
		<attributes>
			<prompt>Minimum distance between positively charged amino acids (-window)</prompt>
			<format>
				<language>perl</language>
				<code>"-window $value"</code>
			</format>
			<vdef>
				<value>10</value>
			</vdef>
			<group>2</group>
		</attributes>
	</parameter>

<!-- -threshold	Threshold value to discriminate weak from potential PEST motifs. Valid PEST motifs are discriminated into 'poor' and 'potential' motifs depending on this threshold score. By default, the default value is set to +5.0 based on experimental data. Alterations are not recommended since significance is a matter of biology, not mathematics.	Number from -55.00 to 55.00	+5.0-->
	  
	<parameter type="Float">
		<name>threshold_value</name>
		<attributes>
			<prompt>Threshold value to discriminate weak from potential PEST motifs. (-threshold)</prompt>
			<format>
				<language>perl</language>
				<code>"-threshold $value"</code>
			</format>
			<vdef>
				<value>5.0</value>
			</vdef>
			<ctrls>
				<ctrl>
					<message>Please select a value between -55.00 and 55.00</message>
					<language>perl</language>
					<code>$value &gt; 55.00 || $value &lt; -55.00 </code>
				</ctrl>
			</ctrls>
			<group>3</group>
			<comment>
<value>Threshold value to discriminate weak from potential PEST motifs. Valid PEST motifs are discriminated into 'poor' and 'potential' motifs depending on this threshold score. By default, the default value is set to +5.0 based on experimental data. Alterations are not recommended since significance is a matter of biology, not mathematics.	Allowed values are from -55.00 to 55.00</value>
			</comment>
	    </attributes>
	</parameter> 
	
	<parameter type="Paragraph">
		<paragraph>
			<name>choose_aa_params</name>
			<prompt>Set Amino Acid Parameters</prompt>
				<parameters>
<!--############################################################################################
   TESTME    -aadata	File of amino acid properties and molecular masses.	Any string is accepted	Eamino.dat

Data files 
The physico-chemical properties of the residues are read from the EMBOSS data file 'Eamino.dat'. 

This file can be copied into your current directory and inspected or altered by using the application 'embossdata -fetch'. Another file can be specified using the qualifier '-aadata'. 

EMBOSS data files are distributed with the application and stored in the standard EMBOSS data directory, which is defined by the EMBOSS environment variable EMBOSS_DATA. 

To see the available EMBOSS data files, run: 

% embossdata -showall

To fetch one of the data files (for example 'Exxx.dat') into your current directory for you to inspect or modify, run: 

% embossdata -fetch -file Exxx.dat

Users can provide their own data files in their own directories. Project specific files can be put in the current directory, or for tidier directory listings in a subdirectory called ".embossdata". Files for all 

EMBOSS runs can be put in the user's home directory, or again in a subdirectory called ".embossdata". 

The directories are searched in the following order: 

_	. (your current directory) 
_	.embossdata (under your current directory) 
_	~/ (your home directory) 
_	~/.embossdata 

###############################################################################################-->
<!-- dont think we need this; this will be found by default -->
<!--	 <parameter ishidden="1">
	    <name>usedefault_aadata</name>
	    <attributes>
			<format>
				<language>perl</language>
				<code>"-aadata Eamino.dat"</code>
			</format>
			<precond>
				<language>perl</language>
				<code>!$usemy_aadata</code>
			</precond>
		  <group>3</group>
	    </attributes>
	  </parameter> -->
					<parameter type="Switch">
						<name>usemy_aadata</name>
						<attributes>
							<prompt>Provide a custom file of amino acid properties and molecular masses. (-aadata)</prompt>
							<vdef>
								<value>0</value>
							</vdef>
							<comment>
<value>File of amino acid properties and molecular masses.	Any test data is accepted, so be careful when changing this parameter</value>
							</comment>
							<group>4</group>
						</attributes>
					</parameter>
				
					<parameter type="InFile">
						<name>my_aadata_upload</name>
						<attributes>
							<prompt>File of amino acid properties and molecular masses. (-aadata)</prompt>
							<filenames>my_eamino.dat</filenames>
							<precond>
								<language>perl</language>
								<code>$usemy_aadata</code>
							</precond>
							<format>
								<language>perl</language>
								<code>"-aadata my_eamino.dat"</code>
							</format>
							<comment>
<value>File of amino acid properties and molecular masses.	See the ePESTfind help page for the format of this file.</value>
							</comment>
							<group>5</group>
						</attributes>
					</parameter>
	
				</parameters>
		</paragraph>
	</parameter>
		
<!--	begin advanced parameters that aren't prompted
-[no]potential	Decide whether potential PEST motifs should be printed.
-[no]poor	Decide whether poor PEST motifs should be printed.	
-invalid	Decide whether invalid PEST motifs should be printed.	
-[no]map	Decide whether PEST motifs should be mapped to sequence. -->

<parameter type="Paragraph">
	<paragraph>
		<name>print_options</name>
		<prompt>Print Options</prompt>
				<parameters>
					<parameter type="Switch">
						<name>no_potential</name>
						<attributes>
							<prompt>Should potential PEST motifs should be printed? (-potential)</prompt>
							<format>
								<language>perl</language>
								<code>($value) ? " -potential" :""</code>
							</format>
							<vdef>
								<value>1</value>
							</vdef>
							<group>6</group>
							<comment>
<value>All retreived motifs are considered "potential"; potential is further divided into valid and poor, depending on the whether they score above or below the user specified "threshold", respectively</value>
							</comment>
						</attributes>
					</parameter>
	
					<parameter type="Switch">
						<name>no_poor</name>
						<attributes>
							<prompt>Should poor PEST motifs should be printed? (-poor)</prompt>
								<format>
									<language>perl</language>
									<code>($value) ? " -poor" :""</code>
								</format>
								<vdef>
									<value>1</value>
								</vdef>
								<group>7</group>
								<comment>
<value>Poor motifs score below the user specified "threshold"</value>
								</comment>
						</attributes>
					</parameter>
	
					<parameter type="Switch">
						<name>no_invalid</name>
						<attributes>
							<prompt>Should invalid PEST motifs should be printed? (-invalid)</prompt>
							<format>
								<language>perl</language>
									<code>($value) ? " -invalid" :""</code>
									</format>
								<vdef>
									<value>0</value>
								</vdef>
								<group>8</group>
								<comment>
<value>By default, the algorithm requires that all 'valid' PEST regions contain at least one proline (P), one acidic amino acid [aspartate (D) or glutamate (E)] and at least one serine (S) or threonine(T). Sequences that do not meet these criteria are classified as 'invalid' PEST motifs. This parameter can be used to show the invalud motifs that were excluded.</value>
								</comment>
						</attributes>
					</parameter>
	
					<parameter type="Switch">
						<name>no_map</name>
						<attributes>
							<prompt>Should potential PEST motifs be mapped to the sequence? (-potential)</prompt>
							<format>
								<language>perl</language>
								<code>($value) ? " -map" :""</code>
							</format>
							<vdef>
								<value>1</value>
							</vdef>
							<group>9</group>
							<comment>
<value></value>
							</comment>
						</attributes>
					</parameter>
<!-- end of advanced parameters that aren't prompted-->
				</parameters>
		</paragraph>
	</parameter>

	<parameter type="Paragraph">
		<paragraph>
			<name>seq_associated_params</name>
			<prompt>Sequence associated parameters</prompt>
				<parameters>
					
<!--   -sbegin1 integer  First residue used, def=seq length  -->
					<parameter type="Integer">
						<name>sbegin1</name>
						<attributes>
							<prompt>First residue to use</prompt>
							<format>
								<language>perl</language>
								<code>(defined $value)? " -sbegin $value":""</code>
							</format>
							<group>10</group>
						</attributes>
					</parameter>

<!--   -send1 integer    Last residue used, def=seq length  -->
					<parameter type="Integer">
						<name>send1</name>
						<attributes>
							<prompt>Last residue to use</prompt>
							<format>
								<language>perl</language>
								<code>(defined $value)? " -send1 $value":""</code>
							</format>
							<group>11</group>
						</attributes>
					</parameter>
									
<!--   -sreverse1  boolean   Reverse (if DNA)  -->	
<!--					<parameter type="Switch">
						<name>reverse_comp</name>
						<attributes>
							<prompt>Use Reverse Complement also (if DNA)</prompt>
							<format>
								<language>perl</language>
								<code>($value) ? "-sreverse1":""</code>
							</format>
							<vdef>
								<value>0</value>
							</vdef>
							<precond>
								<language>perl</language>
								<code>$nuc_or_prot eq "snucleotide1"</code>
							</precond>
							<group>4</group>
						</attributes>
					</parameter>  -->
<!-- 	-slower1		boolean		Make lower case -->
<!--	-supper1		boolean		Make upper case -->
<!--	-sformat1		string     	Input sequence format -->
<!--	-sdbname1	string		Database name -->
<!--	-sid1				string     	Entryname -->
<!--	-ufo1				string		UFO features -->
<!--	-fformat1		string		Features format -->
<!--	-fopenfile1		string		Features file name -->

				</parameters>
		</paragraph>
	</parameter>
	
	
<!-- -graph	Graph type	EMBOSS has a list of known devices, including postscript, ps, hpgl, hp7470, hp7580, meta, colourps, cps, xwindows, x11, tektronics, tekt, tek4107t, tek, none, null, text, data, xterm, png	EMBOSS_GRAPHICS value, or x11-->	
	<parameter type="Paragraph">
		<paragraph>
			<name>out_associated_params</name>
				<prompt>Output configuration parameters</prompt>
				<parameters>

<!--   "-graph" associated qualifiers
   -gtitle      	string	Graph title
   -gsubtitle	string	Graph subtitle
   -gxtitle		string	Graph x axis title
   -gytitle		string	Graph y axis title
   -goutfile		string	Output file for non interactive displays-->
   
   <!-- [-outfile] (Parameter 2)	Name of file to which results will be written.	Output file	<sequence>.pestfind -->	
					
					<parameter ismandatory="1" type="Excl">
						<name>sort_order</name>
						<attributes>
							<format>
								<language>perl</language>
								<code>" -order $value" </code>
							</format>
							<vlist>
								<value>length</value>
								<label>Length</label>
								<value>position</value>
								<label>Position</label>
								<value>score</value>
								<label>Score</label>
							</vlist>
							<vdef>
								<value>score</value>
							</vdef>
							<group>13</group>
						</attributes>
					</parameter>
   
					<parameter ismandatory="1" type="Excl">
						<name>graph_type</name>
						<attributes>
							<prompt>Output Graph type (-graph)</prompt>
							<vlist>
								<value>postscript</value>
								<label>PostScript</label>
	<!--							<value>text</value>
								<label>Text</label> -->
								<value>png</value>
								<label>.png</label>
								<value>none</value>
								<label>None</label>
							</vlist>
							<vdef>
								<value>png</value>
							</vdef>
							<flist>
								<value>postscript</value>
								<code>"-graph postscript -goutfile outfile"</code>
<!--								<value>text</value>
								<code>"-graph text -goutfile outfile"</code>-->
								<value>png</value> 
								<code>"-graph png -goutfile outfile"</code>
								<value>none</value>
								<code>"-graph none"</code>
							</flist>
							<group>14</group>
						</attributes>
					</parameter>
   
<!--    -gtitle      	string	Graph title   -->
 <!--		not working yet
			<parameter type="String">
						<name>gtitle_input</name>
						<attributes>
							<prompt>Graph title</prompt>
							<format>
								<language>perl</language>
								<code>"-gtitle $value"</code>
							</format>
							<group>15</group>
						</attributes>
					</parameter> -->
					
<!--    -gsubtitle	string	Graph subtitle  -->
 					<parameter type="String">
						<name>gsubtitle_input</name>
						<attributes>
							<prompt>Graph subtitle</prompt>
							<format>
								<language>perl</language>
								<code>"-gsubtitle $value"</code>
							</format>
							<group>16</group>
						</attributes>
					</parameter>

<!--    -gxtitle	string	Graph x axis title  -->
 <!-- not working yet					<parameter type="String">
						<name>gxtitle_input</name>
						<attributes>
							<prompt>Graph X-axis title</prompt>
							<format>
								<language>perl</language>
								<code>"-gxtitle $value"</code>
							</format>
							<group>17</group>
						</attributes>
					</parameter> -->
						
<!--    -gytitle	string	Graph y axis title  -->
 <!-- not working yet
					<parameter type="String">
						<name>gytitle_input</name>
						<attributes>
							<prompt>Graph y-axis title</prompt>
							<format>
								<language>perl</language>
								<code>"-gytitle $value"</code>
							</format>
							<group>18</group>
						</attributes>
					</parameter> -->
					 
				</parameters>
			</paragraph>
		</parameter>  
<!-- output files  -->

		<parameter type="Results">
			<name>all_commandline</name>
			<attributes>
				<filenames>Commandline</filenames>
			</attributes>
		</parameter> 
		
		<parameter ishidden="1" type="OutFile">
			<name>seqout_file</name>
			<attributes>
				<format>
					<language>perl</language>
					<code>" -outfile seqout_file.txt" </code>
				</format>
				<group>13</group>
				<filenames>seqout_file.txt</filenames> 
			</attributes>
		</parameter>
		
		<parameter type="Results">
			<name>outputfile</name>
			<attributes>
				<filenames>*.ps *.png</filenames>
			</attributes>
		</parameter>
		

  </parameters>
</pise> 

