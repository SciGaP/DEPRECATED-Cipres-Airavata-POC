<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE pise SYSTEM "http://www.phylo.org/dev/rami/PARSER/pise2.dtd">
<pise>
	<head>
		<title>DPPDIV on XSEDE</title>
		<version>1.0</version>
		<description>Estimating species divergence times and lineage-specific substitution rates on a fixed topology run on XSEDE</description>
		<authors>Tracy Heath, Tomás Flouri, Alexandros Stamatakis</authors>
		<reference>Heath, T. (2012) A hierarchical Bayesian model for calibrating estimates of species divergence times. Systematic Biology, 61:793-809.</reference>
		<reference>Flouri, T. and Stamatakis, A. (2012) An Improvement to DPPDIV. Heidelberg Institute for Theoretical Studies, Exelixis-RRDR-2012-7.</reference>
		<reference>Darriba, D., Aberer, A.J., Flouri, T., Izquierdo-Carrasco, F., and Stamatakis, A. (2013) Boosting the performance of Bayesian divergence time estimation with the
Phylogenetic Likelihood Library </reference>
		<category>Phylogeny / </category>
<!--		<doclink>http://icwww.epfl.ch/~stamatak/index-Dateien/countManual7.0.0.php</doclink> -->
	</head>
	<command>dppdiv</command>
	
<parameters>
<!--          

The argument for specifying the prior mean number of categories is "-pm",
	so to specify a prior mean of 6, you would set "-pm 6". 
The shape parameter is equal to 2.0 by default, but if you wish to set it,
the argument is "-hsh" 
	
The help menu will also give you the arguments for specifying files. And for a detailed example of file formats, execute the program with the "-hf" argument: 
> dppdiv -hf
	 
So, to set up the analysis on the mouse lemur dataset as in the Heath et al (2012) paper, 
here are the commands: 
	
> dppdiv -in lemurs.dat -tre lemurs.phy -cal lemurs.cal -out lemur_dppdiv -pm 6 -npr 3 -n 3000000 -sf 100 -pf 100 -soft 


The arguments for the files are: 
-in <sequences file> 
-tre <tre file> 
-cal <list of calibrations> 
	
Additional specifications: 
-npr <run under the birth-death prior> 
-n <number of iterations for chain> 
-sf <chain sample frequency> 
-pf <frequency printed to screen> 
-soft <sets the flag for allowing for soft, uniform calibrations> 
I am in the process of writing more extensive documentation, so hopefully that will be available soon. Let me know if you have anymore questions. 
Cheers! 
Tracy

[mmiller@trestles-login2 gnu]$ dppdiv-par -hf
*****

File formats:

Tree file (newick format)

(((T1,T2),T3),(T4,T5));



Data file (phylip format)

5 10
T1      TTCTTAGATT
T2      TTATTAGATT
T3      TTCCCAGATT
T4      TTGCTAGATT
T5      TTGCTAGATT


Node Calibration file
-U = uniform with min and max bounds
-E = offset exponential with min age

3
-E      root    25.01
-U      T1      T3      14.22   20.532
-E      T4      T5      4.773


*****
        $ dppdiv -in datafile.dat -out file -tre tree.phy -n 10000 -sf 10
not supported:***                -h    : print this menu
not supported:***                -hf   : display example file formats
                -in   : Input file name **
                -out  : output file name prefix [out]
                -tre  : tree file name **
	
                -pm   : prior mean of number of rate categories [= 3.0]
                -ra   : shape for gamma on rates [= 2.0]
                -rb   : scale for gamma om rates [= 4.0]
                -hsh  : shape for gamma hyper prior on alpha concentration parameter [= 2.0]
                -hsc  : scale for gamma hyper prior on alpha concentration parameter [calculted from prior
mean on categories]
                -n    : Number of MCMC cycles [= 1000000]
                -pf   : print frequency [= 100]
                -sf   : sample frequency [= 100]
                -s1   : seed 1 (use this if you only pass in one seed)
                -s2   : seed 2
                -ubl  : use input branch lengths
                -snm  : single node move is turned on
                -rdn  : random-order node moves
                -offm : turn off a given move (1,2,3,4,5,6)
                -rnp  : return 0.0 for lnl, run under prior
                -cal  : file name with internal node calibratons
                -vb   : print moves to .info.out file
                -npr  : 1=uniform, 2=yule, 3=cbd, 4=cbd fix with given vals
                -bdr  : inital diversificaton rate (lambda - mu)
                -bda  : inital relative death rate (mu / lambda)
                -soft : turn on soft bounds on calibrated nodes
                -clok : run under strict clock (and estimate substiution rate)
                -urg  : run under uncorrelated gamma-distributed rates
                -exhp : all calibrated nodes are offset exponential and this also turns on the hyperprior o
n the exp rates
                -dphp : all cal nodes have a DPM hyperprior this also gets a value for the expecte # of cal
ibration clusters
                -ghp  : hyperprior on calibrations from a gamma
                ** required -->

<!-- the code was updated, with a new parallel version made available by Alexis et al.
	 This new version replaces openmp with mpi and pthreads versions. The pthreads versions have approximately 100%
	 parallel efficiency for sequence data above 10,000 characters. So this interface will direct use of pthreads 
	
	 According to Diego Darriba, 
	 "You can use the pthreads version after compiling with the appropriate Makefile, 
	 running with -T argument for setting the number of threads ("dppdiv-pthreads -h" 
	 gives some advice about this):
     ./dppdiv-pthreads -T [number_of_threads] <args>

     For the mpi version, set the "machines" file with the names of the hosts you want to use and run it
	 as follows:
     mpiexec -np [number_of_processes] ./dppdiv-mpi <args>

     If you are used to execute mpi programs, you should not have any problem with this."
	
 	 Based on performance data, anything with more than 5000 characters will get about 60% parallel
	 efficiency up to 32 cores anyway. Anything smaller maybe should be run on no more than 16 processors.
     For large data sets, though, we might need to increase the number of nodes for memory reasons.
-->

<!-- Invoke the run  --> 
					<parameter ishidden="1" type="String">
						<name>invoke_run</name>
						<attributes>
							<format>
								<language>perl</language>
								<code>"dppdiv-pthreads -T 16"</code>
							</format> 
							<group>0</group>
						</attributes>
					</parameter>	
		
<!-- Specify the number of threads and one node in the scheduler file -->
<!-- if the number is small, in production we will add 
	 a statement to run job on trestles in the shared queue-->		
					<parameter ishidden="1" type="String">
						<name>dppdiv_logic1_scheduler</name>
						<attributes>
							<paramfile>scheduler.conf</paramfile>
							<format>
								<language>perl</language>
								<code>
<!-- these jobs are run on trestles -->
<!--  							        "threads_per_process=$thread_number\\n" .
									"nodes=1\\n" -->
								</code> 
							</format>
							<group>0</group>
						</attributes>
					</parameter>
				
<!--            -in   : Input file name **
                -out  : output file name prefix [out]
                -tre  : tree file name **  --> 
<!-- required input file -->
					<parameter ismandatory="1" issimple="1" isinput="1" type="InFile">
						<name>infile</name>
						<attributes>
							<prompt>Sequences File (relaxed phylip format) (-in)</prompt>
							<format>
								<language>perl</language>
								<code>" -in infile.txt"</code>
							</format>
							<group>1</group>
							<filenames>infile.txt</filenames>
						</attributes>
					</parameter>
		
<!-- run the tree file -->
					<parameter ishidden="1" type="String">
						<name>tree_file</name>
						<attributes>
							<format>
								<language>perl</language>
								<code>"-tre tree.tre"</code>
							</format>
							<group>2</group>
						</attributes>
					</parameter>

<!-- run the calibration file if present -->
					<parameter ishidden="1" type="String">
						<name>cal_file</name>
						<attributes>
							<format>
								<language>perl</language>
								<code>"-cal infile.cal"</code>
							</format>
							<precond>
								<language>perl</language>
								<code>defined $upload_calfile</code>
							</precond>
							<group>4</group>
						</attributes>
					</parameter>	
		
<!-- retrun results -->
					<parameter type="Results">
						<name>all_outputfiles</name>
						<attributes>
						<filenames>*</filenames>
						</attributes>
					</parameter>
	
<!--	        -pm   : prior mean of number of rate categories [= 3.0]
                -ra   : shape for gamma on rates [= 2.0]
                -rb   : scale for gamma om rates [= 4.0]
                -hsh  : shape for gamma hyper prior on alpha concentration parameter [= 2.0]
                -hsc  : scale for gamma hyper prior on alpha concentration parameter [calculted from prior
mean on categories]
                -n    : Number of MCMC cycles [= 1000000]
                -pf   : print frequency [= 100]
                -sf   : sample frequency [= 100]
                -s1   : seed 1 (use this if you only pass in one seed)
                -s2   : seed 2
                -ubl  : use input branch lengths
                -snm  : single node move is turned on
                -rdn  : random-order node moves
                -offm : turn off a given move (1,2,3,4,5,6)
                -rnp  : return 0.0 for lnl, run under prior
                -cal  : file name with internal node calibratons
                -vb   : print moves to .info.out file
                -npr  : 1=uniform, 2=yule, 3=cbd, 4=cbd fix with given vals
                -bdr  : inital diversificaton rate (lambda - mu)
                -bda  : inital relative death rate (mu / lambda)
                -soft : turn on soft bounds on calibrated nodes
                -clok : run under strict clock (and estimate substiution rate)
                -urg  : run under uncorrelated gamma-distributed rates
                -exhp : all calibrated nodes are offset exponential and this also turns on the hyperprior o
n the exp rates
                -dphp : all cal nodes have a DPM hyperprior this also gets a value for the expecte # of cal
ibration clusters
                -ghp  : hyperprior on calibrations from a gamma -->
	
<!-- Parameters with visible controls start here -->
<!-- Begin Simple Parameters -->
<!-- Set Max hours -->
		<parameter type="Float" issimple="1" ismandatory="1">
			<name>runtime</name>
			<attributes>
				<group>1</group>
				<paramfile>scheduler.conf</paramfile>
				<prompt>Maximum Hours to Run (click here for help setting this correctly)</prompt>
				<vdef>
					<value>0.25</value>
				</vdef>
				<format>
					<language>perl</language>
					<code>"runhours=$value\\n"</code>
				</format>
				<ctrls>
					<ctrl>
						<message>Maximum Hours to Run must be less than 168</message>
						<language>perl</language>
						<code>$runtime &gt; 168</code>
					</ctrl>
					<ctrl>
						<message>Maximum Hours to Run must be greater than 0</message>
						<language>perl</language>
						<code>$runtime &lt; 0</code>
					</ctrl>
					<ctrl>
						<message>Please Enter a Value for Maximum Hours to Run</message>
						<language>perl</language>
						<code>!defined $runtime </code>
					</ctrl>
				</ctrls>
<!-- added by mamiller to provide feedback on number of cpu hrs to be consumed -->
							<warns>
								<warn>
									<message>The job will run on 16 processors as configured. If it runs for the entire configured time, it will consume 16 x $runtime cpu hours</message>
									<language>perl</language>
									<code>$runtime &gt; 0</code>
								</warn>
							</warns>
							<comment> 
<value>Estimate the maximum time your job will need to run. We recommend testimg initially with a &lt; 0.5hr test run because Jobs set for 0.5 h or less depedendably run immediately in the "debug" queue. 
Once you are sure the configuration is correct, you then increase the time. The reason is that jobs &gt; 0.5 h are submitted to the "normal" queue, where jobs configured for 1 or a few hours times may
run sooner than jobs configured for the full 168 hours. 
</value>
							</comment>
			</attributes>
		</parameter>
		
<!-- upload the tree file -->					
					<parameter type="InFile" issimple="1" ismandatory="1">
						<name>upload_treefile</name> 
						<attributes>
							<group>2</group>
							<prompt>Tree file</prompt>
							<filenames>tree.tre</filenames>
							<ctrls>
								<ctrl>
									<message>Please select a Newick Tree file for your run</message>
									<language>perl</language>
									<code>!defined $upload_treefile</code>
								</ctrl>
							</ctrls>
							<comment>
								<value>
The Newick tree must contain confidence values.					
								</value>
							</comment>
						</attributes>
					</parameter>
		
<!-- Define the number of characters  -->
<!-- all jobs run on 16 threads 
		<parameter type="Integer" issimple="1" ismandatory="1">
			<name>num_characters</name>
			<attributes>
				<prompt>How many characters in your matrix?</prompt>
				<ctrls>
					<ctrl>
						<message>Please enter a value for the number of characters in your matrix</message>
						<language>perl</language>
						<code>!defined $num_characters</code>
					</ctrl>  
				</ctrls>
				<comment>
<value>The value entered here will help determine how to run this job efficiently</value>
				</comment>
			</attributes>
		</parameter>	-->	
		
<!-- Set the number of threads -->
<!--	all jobs 16 threads  -->
		<parameter type="String" issimple="1" ishidden="1">
			<name>thread_number</name>
			<attributes>
				<paramfile>scheduler.conf</paramfile>
				<format>
					<language>perl</language>
					<code>
						"threads_per_process=16\\n" 
					</code>
				</format>
			</attributes>
		</parameter> 


<!-- simple params -n : Number of MCMC cycles [= 1000000] -->
		<parameter ishidden="0" issimple="1" type="Integer">
			<name>mcmc_cycles</name>
			<attributes>
				<prompt>Number of mcmc cycles</prompt>
				<format>
					<language>perl</language>
					<code>"-n $value"</code>
				</format>
				<vdef>
					<value>1000000</value>
				</vdef>
				<group>6</group>
			</attributes>
		</parameter>
		
<!--               -pf   : print frequency [= 100]           -->
		<parameter ishidden="0" issimple="1" type="Integer">
			<name>print_freq</name>
			<attributes>
				<prompt>Print frequency</prompt>
				<format>
					<language>perl</language>
					<code>"-pf $value"</code>
				</format>
				<vdef>
					<value>100</value>
				</vdef>
				<group>7</group>
			</attributes>
		</parameter>
		
<!--               -sf   : sample frequency [= 100]          -->
		<parameter ishidden="0" issimple="1" type="Integer">
			<name>sample_frequency</name>
			<attributes>
				<prompt>Sample frequency</prompt>
				<format>
					<language>perl</language>
					<code>"-sf $value"</code>
				</format>
				<vdef>
					<value>100</value>
				</vdef>
				<group>8</group>
			</attributes>
		</parameter>
		
<!-- output file prefix  -->
		<parameter ishidden="0" issimple="1" type="String">
			<name>outfile_prefix</name>
			<attributes>
				<prompt>Output file prefix</prompt>
				<format>
					<language>perl</language>
					<code>"-out $value"</code>
				</format>
				<group>9</group>
			</attributes>
		</parameter>

<!-- advanced parameters-->
<parameter type="Paragraph">
	<paragraph>
		<name>configure_run</name>
		<prompt>Configure Run</prompt>
		<parameters>

<!--            -pm   : prior mean of number of rate categories [= 3.0] -->
					<parameter ishidden="0" issimple="0" type="Float">
						<name>prior_mean</name>
						<attributes>
							<prompt>Prior mean of number of rate categories (-pm)</prompt>
							<format>
								<language>perl</language>
								<code>
									("defined $prior_mean") ? "-pm $value":""
								</code>
							</format>
							<vdef>
								<value>3.0</value>
							</vdef>
							<group>10</group>
						</attributes>
					</parameter>
		
<!--                -ra   : shape for gamma on rates [= 2.0]   -->
					<parameter ishidden="0" issimple="0" type="Float">
						<name>gamma_shape</name>
						<attributes>
							<prompt>Shape for gamma on rates (-ra)</prompt>
							<format>
								<language>perl</language>
								<code>("defined $gamma_shape") ? "-ra $value":""</code>
							</format>
							<vdef>
								<value>2.0</value>
							</vdef>
							<group>11</group>
						</attributes>
					</parameter>
			
<!--                -rb   : scale for gamma om rates [= 4.0]   -->
					<parameter ishidden="0" issimple="0" type="Float">
						<name>gamma_omrates</name>
						<attributes>
							<prompt>Scale for gamma om rates (-rb)</prompt>
							<format>
								<language>perl</language>
								<code>("defined $gamma_omrates") ? "-rb $value":""</code>
							</format>
							<vdef>
								<value>4.0</value>
							</vdef>
							<group>12</group>
						</attributes>
					</parameter>
		
<!--        -hsh  : shape for gamma hyper prior on alpha concentration parameter [= 2.0]-->
					<parameter ishidden="0" issimple="0" type="Float">
						<name>gamma_hyperpriorshape</name>
						<attributes>
							<prompt>Shape for gamma hyper prior on alpha concentration parameter(-hsh)</prompt>
							<format>
								<language>perl</language>
								<code>("defined $gamma_hyperpriorshape") ? "-hsh $value":""</code>
							</format>
							<vdef>
								<value>2.0</value>
							</vdef>
							<group>13</group>
						</attributes>
					</parameter>
			
<!--         -hsc  : scale for gamma hyper prior on alpha concentration parameter [calculated from prior
mean on categories]	the scale parameter on the gamma hyperprior on the DPP concentration parameter (-hsc)-->	
					<parameter ishidden="0" issimple="0" type="Float">
						<name>gamma_hyperpriorscale</name>
						<attributes>
							<prompt>Scale for gamma hyper prior on alpha concentration parameter (-hsc)</prompt>
							<format>
								<language>perl</language>
								<code>("defined $gamma_hyperpriorscale") ? "-hsc $value":""</code>
							</format>
							<group>14</group>
						</attributes>
					</parameter>	
		
<!--            -s1   : seed 1 (use this if you only pass in one seed)-->
					<parameter ishidden="0" issimple="0" type="Integer">
						<name>seed1</name>
						<attributes>
							<prompt>Seed 1 (-s1; use this if you only pass in one seed)</prompt>
							<format>
								<language>perl</language>
								<code>("defined $seed1") ? "-s1 $value":""</code>
							</format>
							<vdef>
								<value>12345</value>
							</vdef>
							<group>15</group>
						</attributes>
					</parameter>	

<!--            -s2   :-->
					<parameter ishidden="0" issimple="0" type="Integer">
						<name>seed2</name>
						<attributes>
							<prompt>Seed 2 (-s2)</prompt>
							<precond>
								<language>perl</language>
								<code>$seed1</code>
							</precond>
							<format>
								<language>perl</language>
								<code>("defined $seed2") ? "-s2 $value":""</code>
							</format>
							<vdef>
								<value>12345</value>
							</vdef>
							<group>16</group>
						</attributes>
					</parameter>
		
<!--            -ubl  : use input branch lengths  -->
					<parameter ishidden="0" issimple="0" type="Switch">
						<name>input_branchlengths</name>
						<attributes>
							<prompt>Use input branch lengths (-ubl)</prompt>
							<format>
								<language>perl</language>
								<code>($value) ? " -ubl" : "" </code>
							</format>
							<vdef>
								<value>0</value>
							</vdef>
							<group>16</group>
						</attributes>
					</parameter>	

<!--                -snm  : single node move is turned on -->
					<parameter ishidden="0" issimple="0" type="Switch">
						<name>single_nodemove</name>
						<attributes>
							<prompt>Use single node move (-snm)</prompt>
							<format>
								<language>perl</language>
								<code>($value) ? " -snm" : "" </code>
							</format>
							<vdef>
								<value>0</value>
							</vdef>
							<group>17</group>
						</attributes>
					</parameter>	
		
<!--                -rdn  : random-order node moves -->
					<parameter ishidden="0" issimple="0" type="Switch">
						<name>ro_nodemove</name>
						<attributes>
							<prompt>Use random-order node moves (-rdn)</prompt>
							<format>
								<language>perl</language>
								<code>($value) ? " -rdn" : "" </code>
							</format>
							<vdef>
								<value>0</value>
							</vdef>
							<group>18</group>
						</attributes>
					</parameter>
		
<!--                -offm : turn off a given move (1,2,3,4,5,6) -->
					<parameter ishidden="0" issimple="0" ismandatory="0" type="Excl">
						<name>turnoff_move</name>
						<attributes>
							<prompt>Turn off this move:</prompt>
							<vlist>
								<value>0</value>
								<label>None</label>
								<value>1</value>
								<label>1</label>
								<value>2</value>
								<label>2</label>
								<value>3</value>
								<label>3</label>
								<value>4</value>
								<label>4</label>
								<value>5</value>
								<label>5</label>
								<value>6</value>
								<label>6</label>
							</vlist>
							<flist>
								<value>0</value>
								<code>""</code>
								<value>1</value>
								<code>" -offm 1"</code>
								<value>2</value>
								<code>" -offm 2"</code>
								<value>3</value>
								<code>" -offm 3"</code>
								<value>4</value>
								<code>" -offm 4"</code>
								<value>5</value>
								<code>" -offm 5"</code>
								<value>6</value>
								<code>" -offm 6"</code>
							</flist>
							<group>18</group>
						</attributes>
					</parameter>
		
<!--                -rnp  : return 0.0 for lnl, run under prior causes seg fault more information needed -->
<!--					<parameter ishidden="0" issimple="0" type="Switch">
						<name>run_underprior</name>
						<attributes>
							<prompt>Run under prior (-rnp)</prompt>
							<format>
								<language>perl</language>
								<code>($value) ? " -rnp" : "" </code>
							</format>
							<vdef>
								<value>0</value>
							</vdef>
							<group>3</group>
						</attributes>
					</parameter>	-->
	
<!--                -vb   : print moves to .info.out file   -->
					<parameter ishidden="0" issimple="0" type="Switch">
						<name>print_moves</name>
						<attributes>
							<prompt>Print moves to .info.out file (-vb)</prompt>
							<format>
								<language>perl</language>
								<code>($value) ? " -vb" : "" </code>
							</format>
							<vdef>
								<value>0</value>
							</vdef>
							<group>18</group>
						</attributes>
					</parameter>		
		
<!--        -npr  : 1=uniform, 2=yule, 3=cbd, 4=cbd fix with given vals -->
					<parameter issimple="0" type="Excl" ismandatory="1">
						<name>npr_value</name>
						<attributes>
<!-- what should the prompt for this be? -->
							<prompt>Set the tree prior (-npr) </prompt>
							<vlist>
								<value>1</value>
								<label>Uniform</label>
								<value>2</value>
								<label>Yule</label>
								<value>3</value>
								<label>cbd</label>
								<value>4</value>
								<label>cbd fix</label>
							</vlist>
							<vdef>
								<value>3</value>
							</vdef>
							<group>19</group>
<!--							<comment>
								<value></value>
							</comment> -->
						</attributes>
					</parameter>

<!-- I'm not sure why there was a seg fault for the first one (with -rnp), 
	but for the last three, each of those commands (-bdr, -bda, and -hsc) 
	are looking for a decimal value to set:
	the starting value of the diversification rate (-bdr)
	relative extinction rate (-bda)
	the scale parameter on the gamma hyperprior on the DPP concentration parameter (-hsc)-->
			
<!--		        -bdr  : inital diversificaton rate (lambda - mu) these cause seg faults   -->
					<parameter ishidden="0" issimple="0" type="Float">
						<name>starting_val_diverserate</name>
						<attributes>
							<prompt>Starting value of the diversification rate (-bdr)</prompt>
							<format>
								<language>perl</language>
								<code>("defined $starting_val_diverserate") ? "-bdr $value":""</code>
							</format>
							<group>20</group>
						</attributes>
					</parameter>
	
<!--                -bda  : inital relative death rate (mu / lambda) these cause seg faults  -->
					<parameter ishidden="0" issimple="0" type="Float">
						<name>relative_ext</name>
						<attributes>
							<prompt>Relative Extinction Rate (-bda)</prompt>
							<format>
								<language>perl</language>
								<code>("defined $relative_ext") ? "-bda $value":""</code>
							</format>
							<ctrls>
								<ctrl>
									<message>Please set the relative extinction to a value less than or equal to 1</message>
									<language></language>
									<code>$relative_ext &gt; 1</code>
								</ctrl>
							</ctrls>
							<group>21</group>
						</attributes>
					</parameter>
		
<!--              -clok : run under strict clock (and estimate substitution rate) -->
					<parameter ishidden="0" issimple="0" type="Switch">
						<name>strict_clock</name>
						<attributes>
							<prompt>Run under strict clock (and estimate substitution rate) (-clok)</prompt>
							<format>
								<language>perl</language>
								<code>($value) ? " -clok" : "" </code>
							</format>
							<vdef>
								<value>0</value>
							</vdef>
							<group>22</group>
						</attributes>
					</parameter>
		
<!--                -urg  : run under uncorrelated gamma-distributed rates    -->
					<parameter ishidden="0" issimple="0" type="Switch">
						<name>run_uncorrelated</name>
						<attributes>
							<prompt>Run under uncorrelated gamma-distributed rates (-urg)</prompt>
							<format>
								<language>perl</language>
								<code>($value) ? " -urg" : "" </code>
							</format>
							<vdef>
								<value>0</value>
							</vdef>
							<group>23</group>
						</attributes>
					</parameter>
			
		</parameters>
	</paragraph>
</parameter>	
	
<parameter type="Paragraph">
	<paragraph>
		<name>configure_calibrations</name>
		<prompt>Configure Calibrations</prompt>
		<parameters>	
<!--  upload a cal file -cal  : file name with internal node calibratons  -->
					<parameter type="InFile" issimple="0" ismandatory="0">
						<name>upload_calfile</name> 
						<attributes>
							<prompt>Upload node calibrations file (optional)</prompt>
							<filenames>infile.cal</filenames>
							<comment>
								<value>
Need information on cal file format.					
								</value>
							</comment>
						</attributes>
					</parameter>	

<!--		        -soft : turn on soft bounds on calibrated nodes  -->
					<parameter ishidden="0" issimple="0" type="Switch">
						<name>soft_bounds</name>
						<attributes>
							<prompt>Turn on soft bounds on calibrated nodes (-soft)</prompt>
							<precond>
								<language>perl</language>
								<code>defined $upload_calfile</code>
							</precond>
							<format>
								<language>perl</language>
								<code>($value) ? " -soft" : "" </code>
							</format>
							<vdef>
								<value>0</value>
							</vdef>
							<group>26</group>
							<comment>
								<value>-soft" is only for calibrations specified with uniform densities. </value>
							</comment>
						</attributes>
					</parameter>	
		
<!--                -exhp : all calibrated nodes are offset exponential and this also turns on the hyperprior o
n the exp rates  -->
					<parameter ishidden="0" issimple="0" type="Switch">
						<name>offset_exponential</name>
						<attributes>
							<prompt>All calibrated nodes are offset exponential (-exhp)</prompt>
							<precond>
								<language>perl</language>
								<code>defined $upload_calfile</code>
							</precond>
							<format>
								<language>perl</language>
								<code>($value) ? " -exhp" : "" </code>
							</format>
							<vdef>
								<value>0</value>
							</vdef>
							<group>27</group>
							<comment>
								<value>The -exhp option also turns on the hyperprior on the exp rates. Please see Heath (2012)http://sysbio.oxfordjournals.org/content/61/5/793 </value>
							</comment>
						</attributes>
					</parameter>
		
<!--                -dphp : all cal nodes have a DPM hyperprior this also gets a value for the expected # of cal
ibration clusters  -->
					<parameter ishidden="0" issimple="0" type="Switch">
						<name>dpm_hyperprior</name>
						<attributes>
							<prompt>All calibrated nodes have a DPM hyperprior (-dphp)</prompt>
							<precond>
								<language>perl</language>
								<code>defined $upload_calfile</code>
							</precond>
							<format>
								<language>perl</language>
								<code>($value) ? " -dphp" : "" </code>
							</format>
							<vdef>
								<value>0</value>
							</vdef>
							<group>28</group>
							<comment>
								<value>This also gets a value for the expected # of calibration clusters . Please see Heath (2012)http://sysbio.oxfordjournals.org/content/61/5/793</value>
							</comment>
						</attributes>
					</parameter>		
		
<!--            -ghp  : hyperprior on calibrations from a gamma-->
					<parameter ishidden="0" issimple="0" type="Switch">
						<name>hyperprior_oncal</name>
						<attributes>
							<prompt>Hyperprior on calibrations from a gamma- (-ghp)</prompt>
							<precond>
								<language>perl</language>
								<code>defined $upload_calfile</code>
							</precond>
							<format>
								<language>perl</language>
								<code>($value) ? " -ghp" : "" </code>
							</format>
							<vdef>
								<value>0</value>
							</vdef>
							<group>29</group>
							<comment>
								<value>For details, please see the article Heath (2012) http://sysbio.oxfordjournals.org/content/61/5/793</value>
							</comment>
						</attributes>
					</parameter>
	
				</parameters>
			</paragraph>
		</parameter>	
	</parameters>
</pise>

