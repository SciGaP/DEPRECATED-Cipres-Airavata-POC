<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pise SYSTEM "http://www.phylo.org/dev/rami/PARSER/pise.dtd" [
<!ENTITY runtime SYSTEM "http://www.phylo.org/dev/rami/XMLDIR/triton_run_time.xml">
]>
<pise>
	<head>
		<title>Format Validator</title>
		<version>1.0</version>
		<description>Format Validation Tool</description>
		<authors>Paul Lewis and Mark Holder</authors>
		<reference>Lewis, P. O. 2003. NCL: a C++ class library for interpreting data files in NEXUS format. Bioinformatics 19 (17): 2330-2331.</reference>
		<category>Phylogeny / Alignment</category>
		<!--
*****************************************************************************************************************************************
Created by Mark Miller for CIPRES2, 10_1_2008 or thereabouts.
*****************************************************************************************************************************************
NEXUSvalidator takes reads a file and exits with a success (return code 0) if the file is valid.

The most common usage is simply:
    NEXUSnormalizer <path to NEXUS file>

Command-line flags:

    not supported -h on the command line shows this help message

    -l<path> reads a file and treats each line of the file as a path to NEXUS file

    -s<non-negative integer> controls the NEXUS strictness level.
        the default level is equivalent to -s2 invoking the program with 
        -s3 or a higher number will convert some warnings into fatal errors.
        Running with -s1 will cause the parser to accept dangerous constructs,
        and running with -s0 will cause the parser make every attempt to finish
        parsing the file (warning about very serious errors).

        Note that when -s0 strictness level is used, and the parser fails to
        finish, it will often be the result of an earlier error than the 
        error that is reported in the last message.
    -f<format> specifies the input file format expected:
            -fnexus     NEXUS (this is also the default)
            -faafasta   Amino acid data in fasta
            -fdnafasta  DNA data in fasta
            -frnafasta  RNA data in fasta
        The complete list of format names that can follow the -f flag is:
            nexus
            dnafasta
            aafasta
            rnafasta
            dnaphylip
            rnaphylip
            aaphylip
            discretephylip
            dnaphylipinterleaved
            rnaphylipinterleaved
            aaphylipinterleaved
            discretephylipinterleaved
            dnarelaxedphylip
            rnarelaxedphylip
            aarelaxedphylip
            discreterelaxedphylip
            dnarelaxedphylipinterleaved
            rnarelaxedphylipinterleaved
            aarelaxedphylipinterleaved
            discreterelaxedphylipinterleaved
Expecting the path to NEXUS file as the only command line argument!

NEXUSvalidator takes reads a file and exits with a success (return code 0) if the file is valid.

The most common usage is simply:
    NEXUSnormalizer <path to NEXUS file>

Not-supported Command-line flags:

    -h on the command line shows this help message

    -l<path> reads a file and treats each line of the file as a path to NEXUS file

-->
	</head>
	<command>formatvalidator</command>
	<parameters>
		&runtime;

		<!-- delivers the command line-->
		<parameter ismandatory="1" ishidden="1" type="String">
			<name>formatvalidator</name>
			<attributes>
				<format>
					<language>perl</language>
					<code>"NEXUSvalidator "</code>
				</format>
				<group>0</group>
			</attributes>
		</parameter>
		<parameter ismandatory="1" isinput="1" type="InFile">
			<name>infile</name>
			<attributes>
				<prompt>Input File</prompt>
				<format>
					<language>perl</language>
					<code>"infile.nex"</code>
					<!-- Changed for Swami 
						<code>  " -infile=$value"</code> 
						<language>seqlab</language>
						<code>  " -infile=value"</code                       
						Changed for Swami -->
				</format>
				<group>5</group>
				<!-- Added for Swami to specify the input name -->
				<filenames>infile.nex</filenames>
			</attributes>
		</parameter>
		<parameter issimple="1" ismandatory="1" type="Excl">
			<name>setnexusformat</name>
			<attributes>
				<prompt>Specify the input file format to validate (-f)</prompt>
				<vlist>
					<value>-fnexus</value>
					<label>Nexus</label>
					<value>-faafasta</value>
					<label>Amino Acid Fasta</label>
					<value>-fdnafasta</value>
					<label>DNA Fasta</label>
					<value>-frnafasta</value>
					<label>RNA Fasta</label>
					<value>-fdnaphylip</value>
					<label>DNA Phylip</label>
					<value>-frnaphylip</value>
					<label>RNA Phylip</label>
					<value>-faaphylip</value>
					<label>Amino Acid Phylip</label>
					<value>-fdiscretephylip</value>
					<label>DIscrete Phylip</label>
					<value>-fdnaphylipinterleaved</value>
					<label>DNA Phylip Interleaved</label>
					<value>-frnaphylipinterleaved</value>
					<label>RNA Phylip Interleaved</label>
					<value>-faaphylipinterleaved</value>
					<label>Amino Acid Phylip Interleaved</label>
					<value>-fdiscretephylipinterleaved</value>
					<label>Discrete Phylip Interleaved</label>
					<value>-fdnarelaxedphylip</value>
					<label>DNA Relaxed Interleaved</label>
					<value>-frnarelaxedphylip</value>
					<label>RNA Releaxed Interleaved</label>
					<value>-faarelaxedphylip</value>
					<label>Amino Acid Interleaved</label>
					<value>-fdiscreterelaxedphylip</value>
					<label>Discrete Releaxed Phylip</label>
					<value>-fdnarelaxedphylipinterleaved</value>
					<label>DNA Relaxed Phylip Interleaved</label>
					<value>-frnarelaxedphylipinterleaved</value>
					<label>RNA Relaxed Phylip Interleaved</label>
					<value>-faarelaxedphylipinterleaved</value>
					<label>Amino Acid Phylip Interleaved</label>
					<value>-fdiscreterelaxedphylipinterleaved</value>
					<label>DIscrete Relaxed Phylip Interleaved</label>
				</vlist>
				<vdef>
					<value>-fnexus</value>
				</vdef>
				<format>
					<language>perl</language>
					<code>"$value"</code>
				</format>
				<group>1</group>
				<comment>
					<value>-f specifies the input file format expected:
        The complete list of format names is:
            nexus; fasta (dna, rna, amino acid); phylip (dna, rna, amino acid, character), interleaved or not; relaxed or not. A success mesage looks like this:
            [Reading infile.nex	 ] 
            Executing storing implied block: 
            TAXA storing read block: 
            DATA</value>
				</comment>
			</attributes>
		</parameter>
		<!-- Next, set the nowarn option. the program will issue a prompt when overwriting an output file that is already present -->
		<parameter issimple="1" ismandatory="1" type="Excl">
			<name>setnexuscontrol</name>
			<attributes>
				<prompt>NEXUS strictness level (-s)</prompt>
				<format>
					<language>perl</language>
					<code>" $value"</code>
				</format>
				<vdef>
					<value>-s2</value>
				</vdef>
				<vlist>
					<value>-s0</value>
					<label>0</label>
					<value>-s1</value>
					<label>1</label>
					<value>-s2</value>
					<label>2</label>
					<value>-s3</value>
					<label>3</label>
					<value>-s4</value>
					<label>4</label>
				</vlist>
				<group>2</group>
				<comment>
					<value>NEXUS strictness level (-s) is the default level is equivalent to -s2 invoking the program with -s3 or a higher number will convert some warnings into fatal errors. Running with -s1 will cause the parser to accept dangerous constructs, and running with -s0 will cause the parser make every attempt to finish parsing the file (warning about very serious errors). Note that when -s0 strictness level is used, and the parser fails to finish, it will often be the result of an earlier error than the error that is reported in the last message</value>
				</comment>
			</attributes>
		</parameter>
<!--   -s<non-negative integer> controls the NEXUS strictness level the default level is equivalent to -s2 invoking the program with -s3 or a higher number will convert some warnings into fatal errors. Running with -s1 will cause the parser to accept dangerous constructs, and running with -s0 will cause the parser make every attempt to finish parsing the file (warning about very serious errors). Note that when -s0 strictness level is used, and the parser fails to finish, it will often be the result of an earlier error than the error that is reported in the last message.-->
		<!--    This is the results section, crudely put in                 -->
		<parameter ishidden="1" type="Results">
			<name>nexusvalidator_output</name>
			<attributes>
				<filenames>*</filenames>
			</attributes>
		</parameter>
	</parameters>
</pise>
