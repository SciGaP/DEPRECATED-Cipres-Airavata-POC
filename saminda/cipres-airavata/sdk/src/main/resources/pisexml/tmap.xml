<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE pise SYSTEM "http://www.phylo.org/dev/rami/PARSER/pise.dtd">

<!--
	   Standard (Mandatory) qualifiers:
	   
  [-sequences]         seqset     File containing a sequence alignment
   -graph              xygraph    [$EMBOSS_GRAPHICS value, or x11] Graph type
                                  (ps, hpgl, hp7470, hp7580, meta, cps, x11,
                                  tekt, tek, none, data, xterm, png)
  [-outfile]           report     Output report file name

   Additional (Optional) qualifiers: (none)
   Advanced (Unprompted) qualifiers: (none)
   Associated qualifiers:

   "-sequences" associated qualifiers
   -sbegin1            integer    Start of each sequence to be used
   -send1              integer    End of each sequence to be used
   -sreverse1          boolean    Reverse (if DNA)
   -sask1              boolean    Ask for begin/end/reverse
   -snucleotide1       boolean    Sequence is nucleotide
   -sprotein1          boolean    Sequence is protein
   -slower1            boolean    Make lower case
   -supper1            boolean    Make upper case
   -sformat1           string     Input sequence format
   -sdbname1           string     Database name
   -sid1               string     Entryname
   -ufo1               string     UFO features
   -fformat1           string     Features format
   -fopenfile1         string     Features file name

   "-graph" associated qualifiers
   -gprompt            boolean    Graph prompting
   -gtitle             string     Graph title
   -gsubtitle          string     Graph subtitle
   -gxtitle            string     Graph x axis title
   -gytitle            string     Graph y axis title
   -goutfile           string     Output file for non interactive displays
   -gdirectory         string     Output directory

   "-outfile" associated qualifiers
   -rformat2           string     Report format
   -rname2             string     Base file name
   -rextension2        string     File name extension
   -rdirectory2        string     Output directory
   -raccshow2          boolean    Show accession number in the report
   -rdesshow2          boolean    Show description in the report
   -rscoreshow2        boolean    Show the score in the report
   -rusashow2          boolean    Show the full USA in the report

   General qualifiers:
   -auto               boolean    Turn off prompts
   -stdout             boolean    Write standard output
   -filter             boolean    Read standard input, write standard output
   -options            boolean    Prompt for standard and additional values
   -debug              boolean    Write debug output to program.dbg
   -verbose            boolean    Report some/full command line options
   -help               boolean    Report command line options. More
                                  information on associated and general
                                  qualifiers can be found with -help -verbose
   -warning            boolean    Report warnings
   -error              boolean    Report errors
   -fatal              boolean    Report fatal errors
   -die                boolean    Report dying program messages
  --> 
<pise>

<head>
<title>TMAP</title>
<version>EMBOSS 6.0.0</version>
<description>Display membrane spanning regions</description>
<category>Protein Sequence</category>
<doclink>http://www.uk.embnet.org/Software/EMBOSS/Apps/tmap.html</doclink>
</head>

<command>tmap</command>

<parameters>

<parameter ishidden="1" type="String">
<name>init</name>
<attributes>
	<format>
		<language>perl</language>
		<!-- <code> "" </code> -->
		<code> "tmap" </code>
	</format>
	<!-- <group>-10</group>-->
	<group>0</group>
</attributes>
</parameter>


<parameter type="Paragraph">
<paragraph>
<name>input</name>
	<prompt>Input section</prompt>
<comment>
<value>TMAP displays membrane spanning regions</value>
<value>This program predicts transmembrane segments in proteins, utilizing the algorithm described in: "Persson, B. &amp; Argos, P. (1994) Prediction of transmembrane segments in proteins utilizing multiple sequence alignments J. Mol. Biol. 237, 182-192." TMAP reads in one or more aligned protein sequences. Two sets of propensity values are then used for the calculations: one for the middle, hydrophobic portion and one for the terminal regions of the transmembrane sequence spans. Average propensity values are calculated for each position along the alignment, with the contribution from each sequence weighted according to its dissimilarity relative to the other aligned sequences. 
Eight-residue segments are considered as potential cores of transmembrane segments and elongated if their middle propensity values are above a threshold. End propensity values are also considered as stop signals. Only helices with a length of 15 to 29 residues are allowed and corrections for strictly conserved charged residues are made. The method is more successful than predictions based upon single sequences alone. The results are plotted on a graph and written to a text file.</value>
</comment>
<parameters>
	<!-- <parameter type="Sequence" ismandatory="1" issimple="1" ishidden="0"> -->
    <parameter ismandatory="1" issimple="1" isinput="1" type="Sequence"> 
		
	<name>sequences</name>
	<attributes>
		<prompt>sequences -- gapprotein [set of sequences] (-sequences)</prompt>

		<format>
			<language>perl</language>
		 <!-- <code>" -sequence=$value -sformat=fasta"</code> -->
			<code>" -sequences=sequence_alignment.fasta"</code>
		</format>
		<!-- Added for Swami -->
		<filenames>sequence_alignment.fasta</filenames>
		<!--   -->
					
		<group>1</group>
		<comment>
			<value>File containing a sequence alignment</value>
		</comment>
		<seqtype><value>gapprotein</value></seqtype>
		<seqfmt>
			<value>8</value>
		</seqfmt>
		<pipe>
			<pipetype>seqsfile</pipetype>
				<language>perl</language>
				<code>1</code>
		</pipe>
	</attributes>
	</parameter>

	</parameters>
</paragraph>
</parameter>


<parameter type="Paragraph">
<paragraph>
<name>output</name>
	<prompt>Output section</prompt>

<parameters>
	<parameter type="Excl" ismandatory="0" issimple="0" ishidden="0">
	<name>graph</name>
	<attributes>
		<prompt>graph (-graph)</prompt>
			<vlist>
				<!--<value>x11</value>
				<label>x11</label>
				<value>hp7470</value>
				<label>hp7470</label>
				<value>postscript</value>
				<label>postscript</label>
				<value>cps</value>
				<label>cps</label>
				<value>hp7580</value>
				<label>hp7580</label>
				<value>null</value>
				<label>null</label>
				<value>data</value>
				<label>data</label>
				<value>colourps</value>
				<label>colourps</label> -->
				<value>text</value>
				<label>text</label>
			<!--<value>none</value>
				<label>none</label>
				<value>tek4107t</value>
				<label>tek4107t</label>
				<value>tekt</value>
				<label>tekt</label>
				<value>xwindows</value>
				<label>xwindows</label>
				<value>hpgl</value>
				<label>hpgl</label>
				<value>xterm</value>
				<label>xterm</label>
				<value>meta</value>
				<label>meta</label> -->
				<value>ps</value>
				<label>ps</label>
				<!--<value>tek</value>
				<label>tek</label> -->
				<value>png</value>
				<label>png</label>
				<!--<value>tektronics</value>
				<label>tektronics</label> -->
			</vlist>
		<vdef><value>png</value></vdef>
		<format>
			<language>perl</language>
			<code>($value)? " -graph=$value" : ""</code>
		</format>
		<group>2</group>
	</attributes>
	</parameter>

	<parameter type="OutFile" ismandatory="0" issimple="0" ishidden="0">
	<name>outfile</name>
	<attributes>
		<prompt>outfile (-outfile)</prompt>
		<format>
			<language>perl</language>
			<code>($value)? " -outfile=$value" : ""</code>
		</format>
		<group>3</group>
	</attributes>
	</parameter>

	</parameters>
</paragraph>
</parameter>

<parameter type="String" ishidden="1">
<name>auto</name>
<attributes>
	<format>
		<language>perl</language>
		<code>" -auto -stdout"</code>
	</format>
	<group>5</group>
</attributes>
</parameter>
<parameter type="String" ishidden="1">
<name>psouput</name>
<attributes>
	<precond>
		<language>perl</language>
		<code>$graph eq "postscript" || $graph eq "ps" || $graph eq "colourps"  || $graph eq "cps" || $graph eq "png"</code>
	</precond>
	<format>
		<language>perl</language>
		<code>" -goutfile=tmap"</code>
	</format>
	<!-- <group>99</group> -->
	<group>99</group>
</attributes>
</parameter>
<parameter type="Results">
<name>psresults</name>
<attributes>
	<precond>
		<language>perl</language>
		<code>$graph eq "postscript" || $graph eq "ps" || $graph eq "colourps" || $graph eq "cps"</code>
	</precond>
	<filenames>*.ps</filenames>
</attributes>
</parameter>
<parameter type="Results">
<name>metaresults</name>
<attributes>
	<precond>
		<language>perl</language>
		<code>$graph eq "meta"</code>
	</precond>
	<filenames>*.meta</filenames>
</attributes>
</parameter>
<parameter type="Results">
<name>dataresults</name>
<attributes>
	<precond>
		<language>perl</language>
		<code>$graph eq "data"</code>
	</precond>
	<filenames>*.dat</filenames>
</attributes>
</parameter>
<parameter type="Results">
<name>pngresults</name>
<attributes>
	<precond>
		<language>perl</language>
		<code>$graph eq "png"</code>
	</precond>
	<filenames>*.png *.2 *.3</filenames>
</attributes>
</parameter>

</parameters>
</pise>
