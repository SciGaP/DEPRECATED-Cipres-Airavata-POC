<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pise SYSTEM "http://www.phylo.org/dev/rami/PARSER/pise2.dtd">
<pise>
	<head>
		<title>MrBayes Restart (BETA) on XSEDE</title>
		<version>3.2.2</version>
		<description>Tree Inference Using Bayesian Analysis - run on XSEDE</description>
		<authors>John P. Huelsenbeck and Fred Ronquist</authors>
		<reference>
			Huelsenbeck, J. P. and F. Ronquist. 2001. MRBAYES: Bayesian inference of phylogeny. Bioinformatics 17:754-755. 
		</reference>
		<reference>
			Ronquist, F. and J. P. Huelsenbeck. 2003. MRBAYES 3: Bayesian phylogenetic inference under mixed models. Bioinformatics 19:1572-1574. .
		</reference>
		<category>Phylogeny / Alignment</category>
	</head>
	<command>mrbayes_321restartbeta</command>
<!--
*****************************************************************************************************************************************
Created by Mark Miller for CIPRES2, 1_22_2013 or thereabouts
*****************************************************************************************************************************************
-->

<!-- For all cases, each set of conditions with a dependency on nruns nchains must be 
	duplicated to allow for submission of these parms in the mb block, or the interface -->

<!-- Adapted to run on MB 3.2.1 Gordon 

I have only been able to get MrBayes 3.2.1 to work with MPI, the rules for running it are
very simple.

. Calculate np = nruns*nchains, which is the number of MPI processes.

. If np <= 8, run in the shared queue.

. If np >8 but <= 16, run in the normal queue.

. If np > 16, tell the user to make np smaller.

That's it.

The code runs with OpenMPI, not MVAPICH2, from my /home directory.  A sample PBS file is appended,
and the input and output files are at /oasis/projects/nsf/use320/pfeiffer/MrBayes-3.2.1_gordon/Mike/mpi8.10kgen

A significant new feature in the new version of MrBayes is checkpoint/restart.  

A checkpoint file with suffix ckp is written periodically.  The default frequency is 100,000 
generations and is controlled by checkfreq in the mcmc block of the nex file.
	
To restart, the ckp file as well as the mcmc, p, and t files need to be input along with the
nex file.  You should consider how best to handle this.

In my sample script, I redirect the stdout file to one with the prefix log. 
In this case I use >> for redirection to allow the file to be updated rather than overwritten
upon restart. This would require that the stdout file be input upon restart, but maybe you run
differently via the gateway.  If you do run the same way as I do, then >> can be used for the
initial run as well. In addition, the user needs to add append=yes to the mcmc block in the nex
file, but only for the restart run.  

	Also, if the original run completed the number of generations specified, then that number needs
to be increased in the nex file.

I think users should be encouraged to become familiar with checkpoint/restart.  This could allow
them to specify a smaller number of generations for a run than they might have done previously,
especially since the new version of MrBayes often converges faster. If the run has converged
sufficiently, they are done.  Otherwise, they could restart and run longer until they get
convergence or find that they need more data.

* Let me know if you have any questions.

*******************************************************************************
	Here is the script
*******************************************************************************
#!/bin/bash
#PBS -N mpi8.10kgen
#PBS -q shared
#PBS -l nodes=1:ppn=8:native:noflash
#PBS -v QOS=10
#PBS -l walltime=1:00:00
#PBS -m abe
#PBS -M pfeiffer@sdsc.edu
#PBS -V
#PBS -A use320
cd $PBS_O_WORKDIR
source /etc/profile.d/modules.sh
module unload mvapich2_ib
module load openmpi_ib
mpirun -hostfile $PBS_NODEFILE -np 8 /home/pfeiffer/gordon/MrBayes-3.2.1/mb infile.nex >> log.mpi8.10kgen.txt qstat -f $PBS_JOBID | grep Job qstat -f $PBS_JOBID | grep resources

-->
	
<!-- this section defines a file scheduler.conf that accompanies the command line to the TG 
resource. It instructs the machine how to run the job. Unlike the raxml interface, the individual
lines of the file are broken up. This is necessary because of the $mrbayesblockquery element,
which affects individual lines in this file --> 

<parameters>
<!--  on gordon   -->
					<parameter ismandatory="1" ishidden="1" type="String">
						<name>mbmpi_321</name>
						<attributes>
							<precond>
								<language>perl</language>
								<code>$run_version eq "1"</code>
							</precond>
							<format>
								<language>perl</language>	
								<code>"<![CDATA[mb_3.2.1_mpiwrapper paramfile.txt]]>"</code>
							</format>
							<group>0</group>
						</attributes>
					</parameter>
	
					<parameter ismandatory="1" ishidden="1" type="String">
						<name>mbmpi_322</name>
						<attributes>
							<precond>
								<language>perl</language>
								<code>$run_version eq "2"</code>
							</precond>
							<format>
								<language>perl</language>	
								<code>"<![CDATA[mbmpiwrapper paramfile.txt]]>"</code>
							</format>
							<group>0</group>
						</attributes>
					</parameter>	
		
<!-- this sets the mpi process value -->
		<parameter type="Integer" ishidden="1" >
					<name>mpi_processes_conf</name>
					<attributes>
						<group>3</group>
						<paramfile>scheduler.conf</paramfile>
						<format>
							<language>perl</language>
							<code>	"jobtype=mpi\\n" .
									"mpi_processes=" .  $nchains_specified * $nruns_specified  . "\\n"</code>
						</format>
					</attributes>
				</parameter>

<!--  Now we set nodes= using the table above; again twice for each situation, where there is a mrbayes block, and using the interface -->

<!-- always run on one node -->												
				<parameter type="String" ishidden="1" >
					<name>number_nodes</name>
					<attributes>
						<group>2</group>
						<paramfile>scheduler.conf</paramfile>
						<format>
							<language>perl</language>
							<code>"nodes=1\\n"</code>
						</format>
					</attributes>
				</parameter>

<!-- end number of nodes -->		
		
<!-- This begins the parameter settings, all are compiled into a big file for delivery in batch mode -->	
		<parameter ismandatory="1" isinput="1" type="Sequence">
			<name>infile</name>
			<attributes>
				<prompt>Input File (must be in Nexus format) (-execute)</prompt>
				<paramfile>paramfile.txt</paramfile>
				<format>
					<language>perl</language>
					<code>"execute infile.nex\\n"</code>
<!-- Changed for Swami 
						<code>  " -infile=$value"</code> 
						<language>seqlab</language>
						<code>  " -infile=value"</code                       
						Changed for Swami -->
				</format>
				<group>2</group>
<!-- Added for Swami to specify the input name -->
				<filenames>infile.nex</filenames>
			</attributes>
		</parameter>
		
<!--    return all results                -->		
		<parameter type="Results">
			<name>ALL_FILES</name>
			<attributes>
				<filenames>*</filenames>
			</attributes>
		</parameter> 

<!--    all runs produce this file                -->
<!-- this file is not produced on globus run tools
		<parameter ishidden="1" type="Results">
			<name>log_file</name>
			<attributes>
				<filenames>log.txt</filenames>
			</attributes>
		</parameter> -->
 	
		
<!-- This section provides visible queries that help configure the interface  -->
	<!-- This section provides visible queries that help configure the interface  -->	
				<parameter issimple="1" ismandatory="1" type="Excl">
					<name>run_version</name>
					<attributes>
						<prompt>I am restarting a checkpoint from</prompt>
						<vlist>
							<value>1</value>
							<label>MrBayes 3.2.1</label>
							<value>2</value>
							<label>MrByes 3.2.2</label>
						</vlist>
						<vdef>
							<value>2</value>
						</vdef>
					</attributes>
				</parameter>
		
				<parameter issimple="1" ismandatory="1" type="Switch">
					<name>set_autoclose_confirm</name>
					<attributes>
						<group>1</group>
						<prompt>I confirm that there is not an "autoclose = no" statement in my MrBayes block</prompt>
						<format>
							<language>perl</language>
							<code>($value)? "":""</code>
						</format>
						<ctrls>
							<ctrl>
								<message>Please acknowledge that there is not a "set autoclose = no" statement in the MrBayes block of your Nexus file</message>
								<language>perl</language>
								<code>!$set_autoclose_confirm</code>
							</ctrl>
						</ctrls>	
						<vdef>
							<value>0</value>
						</vdef>
						<comment>
							<value>Putting an "autoclose = no" statement in your MrBayes block will cause catastrophic failure of the job, and may impact others. Please be careful. 
							</value>
						</comment>
					</attributes>
				</parameter>

				<parameter type="Integer" issimple="1" >
					<name>nruns_specified</name>
					<attributes>
						<group>1</group>
						<prompt>My MrBayes Block specifies nruns=</prompt>
						<paramfile>scheduler.conf</paramfile>
						<vdef>
							<value>2</value>
						</vdef>
						<comment>
							<value>The values entered for nruns and nchains influence the number of cpu's that can be used in parallel.  Please enter the value you specified for 
							nruns in the MrBayes block of the Nexus file.  If you didn't specify a value for nruns, please leave this field at its default value of 2.
							</value>
						</comment>
						<ctrls>
<!-- 
Determine 

  nruns, the number of runs,
  nchains, the number of chains,
 
Check that np is a multiple of 2 and <= 16.

If not, ask the user to change parameters to ensure that.

-->
							<ctrl>
								<message>Please enter a value for nruns</message>
								<language>perl</language>
								<code>!$nruns_specified</code>
							</ctrl>
							<ctrl>
								<message>The value of nruns must be greater than 0</message>
								<language>perl</language>
								<code>$nruns_specified &lt; 1</code>
							</ctrl>
							<ctrl>
								<message>nruns x nchains must be a multiple of 2</message>
								<language>perl</language>
								<code>((($nruns_specified * $nchains_specified) % 2) != 0)</code>
							</ctrl>
							<ctrl>
								<message>nruns x nchains must be less than or equal to 16.</message>
								<language>perl</language>
								<code>($nruns_specified * $nchains_specified &gt; 17) </code>
							</ctrl>
						</ctrls>
					</attributes>
				</parameter>

				<parameter type="Integer" issimple="1" >
					<name>nchains_specified</name>
					<attributes>
						<group>1</group>
						<prompt>My MrBayes Block specifies nchains=</prompt>
						<paramfile>scheduler.conf</paramfile>
						<vdef>
							<value>4</value>
						</vdef>
						<comment>
							<value>The value entered for nruns and nchains influences the number of cpu's that can be used in parallel.  Enter the value you specified 
							for nchains in the MrBayes block of the nexus file.  If you didn't specify a value for nchains, please leave this field at its default value of 4.
							</value>
						</comment>
						<ctrls>
							<ctrl>
								<message>Please enter value for nchains</message>
								<language>perl</language>
								<code>!$nchains_specified</code>
							</ctrl>
							<ctrl>
								<message>The value of nchains must be greater than 0</message>
								<language>perl</language>
								<code>$nchains_specified &lt; 1</code>
							</ctrl>
							<ctrl>
								<message>The value for nchains must be 1 or greater. The recommended value is at least 4.</message>
								<language>perl</language>
								<code>$nchains_specified &lt; 1</code>
							</ctrl>
							<ctrl>
								<message>nruns x nchains must be less than or equal to 16.</message>
								<language>perl</language>
								<code>($nruns_specified * $nchains_specified &gt; 17) </code>
							</ctrl>
							<ctrl>
								<message>nruns x nchains must be a multiple of 2</message>
								<language>perl</language>
								<code>((($nruns_specified * $nchains_specified) % 2) != 0)</code>
							</ctrl>
						</ctrls>
					</attributes>
				</parameter>

<!--how many generations -->
<!--	I commented this out for now, will re-add if it causes problems	
				<parameter type="Integer" issimple="1" >
					<name>ngen_specified</name>
					<attributes>
						<group>1</group>
						<prompt>How many generations will your job run?</prompt>
						<ctrls>
							<ctrl>
								<message>Please enter a value for the number of generations specified</message>
								<language>perl</language>
								<code>!defined $ngen_specified</code>
							</ctrl>
						</ctrls>
						<comment>
<value>The number of samples produced is used to warn about possible issues with output file size.</value>
						</comment>
					</attributes>
				</parameter> -->

<!-- Sampling frequency. Gen times sampling frequency is used to warn about .t file size -->
<!--				<parameter issimple="1" ismandatory="1" type="Integer">
					<name>sample_freq</name>
					<attributes>
						<group>1</group>
						<prompt>What is the sample frequency for your data set?</prompt>
						<vdef>
							<value>100</value>
						</vdef>
						<ctrls>
							<ctrl>
								<message>Please enter a value for the sample frequency</message>
								<language>perl</language>
								<code>!defined $sample_freq</code>
							</ctrl>
						</ctrls>
						<warns>
							<warn>
								<message>The number of samplings you requested is greater than 50,000. This may cause your output files to exceed the allowed limit of 500 GB. Please consider editing your input file to request a lower sample frequency.</message>
								<language>perl</language>
								<code>$ngen_specified  &gt; 50000 * $sample_freq </code>		
							</warn>
						</warns>
					</attributes>
				</parameter> -->
				
<!-- this was added by mamiller, so a user can specify they are using a partition -->
			
<!--	not used currently			<parameter issimple="1" ismandatory="1" type="Switch">
					<name>is_partitioned</name>
					<attributes>
						<group>0</group>
						<prompt>My data set is partitioned</prompt>
						<vdef>
							<value>0</value>
						</vdef>
						<comment>
							<value>This option will help the application determine how to run the job</value>
						</comment>
					</attributes>
				</parameter> -->
				
<!-- this sets the run time -->
				<parameter type="Float" issimple="1" ismandatory="1">
					<name>runtime</name> 
					<attributes>
						<group>1</group>
						<paramfile>scheduler.conf</paramfile>
						<prompt>Maximum Hours to Run (click here for help setting this correctly)</prompt>
						<vdef><value>0.5</value></vdef>
						<ctrls>
							<ctrl>
								<message>The maximum hours to run must be less than 168</message>
								<language>perl</language>
								<code>$runtime &gt; 168.0</code>
							</ctrl>
							<ctrl>
								<message>Please enter a positive number for the maximum runtime</message>
								<language>perl</language>
								<code>$runtime &lt; 0</code>
							</ctrl>
							<ctrl>
								<message>Please specify a maximum runtime</message>
								<language>perl</language>
								<code>!defined $runtime </code>
							</ctrl>
						</ctrls>
						<format>
							<language>perl</language>
							<code>"runhours=$value\\n"</code>
						</format>

<!-- xxxxxxxx added by mamiller to provide feedback on number of cpu hrs to be consumed -->
						<warns>
							<warn>
								<message>The job will run on 2 processors as configured. If it runs for the entire configured time, it will consume 2 x $runtime cpu hours</message>
								<language>perl</language>
								<code>$nchains_specified * $nruns_specified == 2</code>
							</warn>
							<warn>
								<message>The job will run on 4 processors as configured. If it runs for the entire configured time, it will consume 4 x $runtime cpu hours</message>
								<language>perl</language>
								<code>$nchains_specified * $nruns_specified == 4</code>
							</warn>
							<warn>
								<message>The job will run on 6 processors as configured. If it runs for the entire configured time, it will consume 6 x $runtime cpu hours</message>
								<language>perl</language>
								<code>$nchains_specified * $nruns_specified == 6</code>
							</warn>
							<warn>
								<message>The job will run on 8 processors as configured. If it runs for the entire configured time, it will consume 8 x $runtime cpu hours</message>
								<language>perl</language>
								<code>$nchains_specified * $nruns_specified == 8</code>
							</warn>
							<warn>
								<message>The job will run on 16 processors as configured. If it runs for the entire configured time, it will consume 16 x $runtime cpu hours</message>
								<language>perl</language>
								<code>$nchains_specified * $nruns_specified &gt; 8 </code>
							</warn>
						</warns> 
						<comment>
<value>Estimate the maximum time your job will need to run. We recommend testing initially with a &lt; 0.5hr test run because Jobs set for 0.5 h or less depedendably run immediately in the "debug" queue. 
Once you are sure the configuration is correct, you then increase the time. The reason is that jobs &gt; 0.5 h are submitted to the "normal" queue, where jobs configured for 1 or a few hours times may
run sooner than jobs configured for the full 168 hours. 
</value>
						</comment>
					</attributes>
				</parameter>
<!--To use restart in our current modality, there are two possible strategies. One would be to devise a way to re-deploy in an 
	existing directory, and the other would be to re-upload all of the files into a new job.
	the re-start requires the nexus file, the ckp file, the mcmc, .p, and .t files. The names of the files 
	must remain the same. Below I am creating a method for making this work by the second option. -->
<!--First, upload the ckp file (the Nexus file will be "input")-->
					<parameter type="InFile" issimple="1" ismandatory="1">
						<name>upload_ckpfile</name> 
						<attributes>
							<group>2</group>
							<prompt>Upload Checkpoint File (.ckp) </prompt>
							<filenames>infile.nex.ckp</filenames>
							<ctrls>
								<ctrl>
									<message>Please select the Checkpoint file to upload</message>
									<language>perl</language>
									<code>!defined $upload_ckpfile</code>
								</ctrl>
							</ctrls>
						</attributes>
					</parameter>

					<parameter type="InFile" issimple="1" ismandatory="1">
						<name>upload_mcmcfile</name> 
						<attributes>
							<group>2</group>
							<prompt>Upload mcmc File (.mcmc) </prompt>
							<filenames>infile.nex.mcmc</filenames>
							<ctrls>
								<ctrl>
									<message>Please select the mcmc file to upload</message>
									<language>perl</language>
									<code>!defined $upload_mcmcfile</code>
								</ctrl>
							</ctrls>
						</attributes>
					</parameter>

					<parameter type="Excl" issimple="1" ismandatory="1">
						<name>num_ptfiles</name> 
						<attributes>
							<group>2</group>
							<prompt>How many Sump/Sumt files do you wish to upload?</prompt>
							<vlist>
								<value>1</value>
								<label>1</label>
								<value>2</value>
								<label>2</label>
								<value>3</value>
								<label>3</label>
								<value>4</value>
								<label>4</label>
							</vlist>
						</attributes>
					</parameter>		
		
					<parameter type="InFile" issimple="1" ismandatory="1">
						<name>upload_sumpfile1</name> 
						<attributes>
							<group>2</group>
							<prompt>Upload Sump File 1 (.p) </prompt>
							<filenames>infile.nex.run1.p</filenames>
							<ctrls>
								<ctrl>
									<message>Please select the first Sump file to upload</message>
									<language>perl</language>
									<code>!defined $upload_sumpfile1</code>
								</ctrl>
							</ctrls>
						</attributes>
					</parameter>
		
					<parameter type="InFile" issimple="1" ismandatory="1">
						<name>upload_sumpfile2</name> 
						<attributes>
							<group>2</group>
							<prompt>Upload Sump File 2 (.p) </prompt>
							<precond>
								<language>perl</language>
								<code>$num_ptfiles &gt; 1</code>
							</precond>
							<filenames>infile.nex.run2.p</filenames>
							<ctrls>
								<ctrl>
									<message>Please select the second Sump file to upload</message>
									<language>perl</language>
									<code>!defined $upload_sumpfile2</code>
								</ctrl>
							</ctrls>
						</attributes>
					</parameter>
		
					<parameter type="InFile" issimple="1" ismandatory="1">
						<name>upload_sumpfile3</name> 
						<attributes>
							<group>2</group>
							<prompt>Upload Sump File 3 (.p) </prompt>
							<precond>
								<language>perl</language>
								<code>$num_ptfiles &gt; 2</code>
							</precond>
							<filenames>infile.nex.run3.p</filenames>
							<ctrls>
								<ctrl>
									<message>Please select the third Sump file to upload</message>
									<language>perl</language>
									<code>!defined $upload_sumpfile3</code>
								</ctrl>
							</ctrls>
						</attributes>
					</parameter>
		
					<parameter type="InFile" issimple="1" ismandatory="1">
						<name>upload_sumpfile4</name> 
						<attributes>
							<group>2</group>
							<prompt>Upload Sump File 4 (.p) </prompt>
							<precond>
								<language>perl</language>
								<code>$num_ptfiles &gt; 3</code>
							</precond>
							<filenames>infile.nex.run4.p</filenames>
							<ctrls>
								<ctrl>
									<message>Please select the fourth Sump file to upload</message>
									<language>perl</language>
									<code>!defined $upload_sumpfile4</code>
								</ctrl>
							</ctrls>
						</attributes>
					</parameter>
							
					<parameter type="InFile" issimple="1" ismandatory="1">
						<name>upload_sumtfile1</name> 
						<attributes>
							<group>2</group>
							<prompt>Upload Sumt File 1 (.t) </prompt>
							<filenames>infile.nex.run1.t</filenames>
							<ctrls>
								<ctrl>
									<message>Please select the first Sumt file to upload</message>
									<language>perl</language>
									<code>!defined $upload_sumtfile1</code>
								</ctrl>
							</ctrls>
						</attributes>
					</parameter>
		
					<parameter type="InFile" issimple="1" ismandatory="1">
						<name>upload_sumtfile2</name> 
						<attributes>
							<group>2</group>
							<prompt>Upload Sumt File 2 (.t) </prompt>
							<precond>
								<language>perl</language>
								<code>$num_ptfiles &gt; 1</code>
							</precond>
							<filenames>infile.nex.run2.t</filenames>
							<ctrls>
								<ctrl>
									<message>Please select the second Sumt file to upload</message>
									<language>perl</language>
									<code>!defined $upload_sumtfile2</code>
								</ctrl>
							</ctrls>
						</attributes>
					</parameter>
		
					<parameter type="InFile" issimple="1" ismandatory="1">
						<name>upload_sumtfile3</name> 
						<attributes>
							<group>2</group>
							<prompt>Upload Sumt File 3 (.t) </prompt>
							<precond>
								<language>perl</language>
								<code>$num_ptfiles &gt; 2</code>
							</precond>
							<filenames>infile.nex.run3.t</filenames>
							<ctrls>
								<ctrl>
									<message>Please select the third Sumt file to upload</message>
									<language>perl</language>
									<code>!defined $upload_sumtfile3</code>
								</ctrl>
							</ctrls>
						</attributes>
					</parameter>
		
					<parameter type="InFile" issimple="1" ismandatory="1">
						<name>upload_sumtfile4</name> 
						<attributes>
							<group>2</group>
							<prompt>Upload Sumt File 4 (.t) </prompt>
							<precond>
								<language>perl</language>
								<code>$num_ptfiles &gt; 3</code>
							</precond>
							<filenames>infile.nex.run4.t</filenames>
							<ctrls>
								<ctrl>
									<message>Please select the fourth Sumt file to upload</message>
									<language>perl</language>
									<code>!defined $upload_sumtfile4</code>
								</ctrl>
							</ctrls>
						</attributes>
					</parameter>
	</parameters>
</pise>



