<?xml version = "1.0" encoding = "ISO-8859-1" ?>
<!DOCTYPE pise SYSTEM "http://www.phylo.org/dev/rami/PARSER/pise.dtd" [
<!ENTITY runtime SYSTEM "http://www.phylo.org/dev/rami/XMLDIR/triton_run_time.xml">
]>
<!--
Usage: contralign [predict|train] [OPTION]... INFILE(s)

       where [OPTION]...   is a list of zero or more optional arguments
             INFILE(s)     is the name of the input FASTA file(s)

Miscellaneous arguments:
  -version                display program version information
  -verbose                show detailed console output
  -logbase LOG_BASE       set base of log-sum-exp
  -viterbi                use Viterbi instead of posterior decoding for prediction, 
                           or max-margin instead of log-likelihood for training

Additional arguments for 'predict' mode:
  -params FILENAME        use particular model parameters
  -constraints            use existing constraints (requires input to contain pre-aligned sequences)
  -gamma GAMMA            set sensivity/specificity tradeoff parameter (default: GAMMA=100000)
                             if GAMMA > 1, emphasize sensitivity
                             if 0 <= GAMMA <= 1, emphasize specificity
                             if GAMMA < 0, try tradeoff parameters of 2^k for k = -5,...,10
  -conflate               process all input filenames as sequences in a single input
  -pairwise               produce all-pairs pairwise alignments
  -annealing              use sequence annealing algorithm
  -pc_iters NUM           perform NUM probabilistic consistency iterations (default: NUM=2)
  -sc_iters NUM           perform NUM spectral consistency iterations (default: NUM=0)

  -mfa OUTFILEORDIR       write MFA output to file or directory
  -clustalw OUTFILEORDIR  write CLUSTALW output to file or directory
  -posteriors CUTOFF OUTFILEORDIR
                           write posterior match probabilities to file or directory
  -partition              compute the partition function or Viterbi score only

Additional arguments for training (many input files may be specified):
  -sanity                 perform gradient sanity check
  -holdout F              use fraction F of training data for holdout cross-validation
  -regularize C           perform BFGS training, using a single regularization coefficient C
-->
<!--
2009/02/03 - Rahul Suri

Design decisions made in the course of wrapping the CONTRAlign interface into 
this Pise XML file are documented below.

* The protein and RNA versions of CONTRAlign were unified into a single interface; 
selection between the 2 packages is based on user selection of input type (amino 
or nucleic acid).

* The "-version" option is not supported, as this information is available 
elsewhere.

* The "-verbose" option is not supported, as it does not make much sense in the 
context of the CIPRES portal workflow.

* The "-logbase" and "-constraints" options were omitted, since they were not 
described in the user manual.

* Only 1 input file can be passed to the program; this is a limitation of the 
current CIPRES architecture (more precisely, the # of input files must be 
fixed, i.e. cannot be arbitrary and determined at runtime).

* As a consequence of the previous point, the "-conflate" option was omitted.

* Pairwise alignment writes files whose suffixes all differ.  The wildcard 
matching currently implemented by the CIPRES portal for capturing output 
files is insufficient for capturing these differing-suffix output files.  As 
such, the "-pairwise" option is not supported; as a consequence of this, the 
"-viterbi" and "-posteriors" options are unsupported, as well.

* Gamma values less than 0 cause CONTRAlign to output a series of files in a new 
subdirectory.  The wildcard matching currently implemented by the CIPRES portal 
cannot capture these output files.  The interface therefore constrains gamma 
values to be non-negative. 

* Training mode was omitted from the interface. Judging from the examples in the
user manual, the inability of the web interface to handle an arbitrary number of 
input files limits its usefulness for using CONTRAlign training mode. Moreover,
the user manual indicates that training mode is likely of interest to only a 
small percentage of users. The exclusion of training mode eliminates the need to 
support the "-sanity," "-holdout," and "-regularize" options.

* Undocumented default values for pc_iters (2) and sc_iters (0) were obtained from 
the author via e-mail.
-->
<pise>
  <head>
    <title>CONTRAlign</title>
    <version>2.01</version>
    <description>CONditional TRAining for Sequence Alignment</description>
    <authors>Do, C.B., Gross, S.S., and Batzoglou, S.</authors>
    <reference>Do, C.B., Gross, S.S., and Batzoglou, S. (2006) CONTRAlign: Discriminative Training for Protein Sequence Alignment. In Proceedings of the Tenth Annual International Conference on Computational Molecular Biology (RECOMB 2006).</reference>
    <reference>Do, C.B., Foo, C.-S., Ng, A.Y. (2007) Efficient multiple hyperparameter learning for log-linear models. In Advances in Neural Information Processing Systems 20.</reference>
    <category>Nucleic Acid Sequence,Protein Sequence,Phylogeny / Alignment</category>
    <doclink>http://contra.stanford.edu/contralign/</doclink>
  </head>

  <command>contralign</command>

  <parameters>
  	&runtime;

    <!-- required input file, this is selected outside the parameters gui -->
    <parameter isinput = "1" type = "InFile">
      <name>infile</name>
      <attributes>
        <prompt>Sequences File (MFA format)</prompt>
        <filenames>input.mfa</filenames>
        <format>
          <language>perl</language>
          <code>" input.mfa"</code>
        </format>
        <group>1</group>
      </attributes>
    </parameter>

    <!-- command/sequence type selection -->
    <parameter issimple = "1" ismandatory = "1" type = "Excl">
      <name>sequenceType</name>
      <attributes>
        <prompt>Data Type</prompt>
		<vdef>
			<value>nucleicAcid</value>
		</vdef>
        <vlist>
          <value>aminoAcid</value>
          <label>amino acid</label>

          <value>nucleicAcid</value>
          <label>nucleic acid</label>
        </vlist>
        <flist>
          <value>aminoAcid</value>
          <code>"contralign-protein predict"</code>

          <value>nucleicAcid</value>
          <code>"contralign-RNA predict"</code>
        </flist>
        <group>0</group>
        <comment>
          <value>CONTRAlign will be used in prediction mode, with parameter values trained on protein</value>
          <value>or RNA sequences.</value>
        </comment>
      </attributes>
    </parameter>

    <!-- output in MFA format? -->
    <parameter issimple = "1" ismandatory = "0" type = "Switch">
      <name>outputMFA</name>
      <attributes>
        <prompt>Write output in MFA format? (--mfa)</prompt>
        <format>
          <language>perl</language>
          <code>$value ? " --mfa output.mfa" : ""</code>
        </format>
        <vdef>
          <value>1</value>
        </vdef>
        <group>2</group>
      </attributes>
    </parameter>

    <!-- MFA output file -->
    <parameter type = "Results">
      <name>outputMFAFile</name>
      <attributes>
        <filenames>output.mfa</filenames>
        <precond>
          <language>perl</language>
          <code>$outputMFA</code><!-- &amp;&amp; (!defined $gamma || $gamma &gt;= 0)</code>-->
        </precond>
      </attributes>
    </parameter>

    <!-- output in ClustalW format? -->
    <parameter issimple = "1" ismandatory = "0" type = "Switch">
      <name>outputClustal</name>
      <attributes>
        <prompt>Write output in ClustalW format? (--clustalw)</prompt>
        <format>
          <language>perl</language>
          <code>$value ? " --clustalw output.clustalw" : ""</code>
        </format>
        <vdef>
          <value>0</value>
        </vdef>
        <group>3</group>
      </attributes>
    </parameter>

    <!-- ClustalW output file -->
    <parameter type = "Results">
      <name>outputClustalFile</name>
      <attributes>
        <filenames>output.clustalw</filenames>
        <precond>
          <language>perl</language>
          <code>$outputClustal</code><!-- &amp;&amp; (!defined $gamma || $gamma &gt;= 0)</code>-->
        </precond>
      </attributes>
    </parameter>

    <!-- gamma -->
    <parameter issimple = "0" ismandatory = "0" type = "Float">
      <name>gamma</name>
      <attributes>
        <prompt>Gamma (--gamma)</prompt>
        <format>
          <language>perl</language>
          <code>defined $value ? " --gamma $value" : ""</code>
        </format>
        <ctrls>
          <ctrl>
            <message>Values for "--gamma" less than 0 are not currently supported. Please enter a new value.</message>
            <language>perl</language>
            <code>$value &lt; 0</code>
          </ctrl>
        </ctrls>
        <group>6</group>
        <comment>
          <value>This option sets the sensitivity/specificity tradeoff parameter for the maximum</value>
          <value>expected accuracy decoding algorithm. In particular, consider a scoring system in</value>
          <value>which each nucleotide belonging to a correct match gets a score of gamma, and each</value>
          <value>nucleotide correctly gapped gets a score of 1. Then, CONTRAlign finds the alignment</value>
          <value>of the input sequences with maximum expected accuracy with respect to this scoring</value>
          <value>system. Intuitively, gamma > 1 causes the parsing algorithm to emphasize sensitivity,</value>
          <value>while 0 &lt;= gamma &lt;= 1 causes the parsing algorithm to emphasize specificity. In</value>
          <value>addition, if the user specifies any value of gamma &lt; 0, then CONTRAlign tries</value>
          <value>trade-off parameters of 2^k for k in {-5, -4, ... , 10}, and generates one output file</value>
          <value>for each trade-off parameter.</value>
        </comment>
      </attributes>
    </parameter>

    <!-- annealing -->
    <parameter issimple = "0" ismandatory = "0" type = "Switch">
      <name>annealing</name>
      <attributes>
        <prompt>Use annealing? (--annealing)</prompt>
        <format>
          <language>perl</language>
          <code>$value ? " --annealing" : ""</code>
        </format>
        <vdef>
          <value>0</value>
        </vdef>
        <group>9</group>
        <comment>
          <value>This option replaces the standard progressive alignment dynamic programming algorithm</value>
          <value>for alignment with an implementation of the sequence annealing algorithm described in:</value>
          <value>Schwartz, A.S., and Pachter, L. (2007) Multiple alignment by sequence annealing.</value>
          <value>Bioinformatics, 23(2): e24-e29.</value>
        </comment>
      </attributes>
    </parameter>

    <!-- pc_iters -->
    <parameter issimple = "0" ismandatory = "0" type = "Integer">
      <name>pc_iters</name>
      <attributes>
        <prompt>Number of probabilistic consistency iterations (--pc_iters)</prompt>
        <format>
          <language>perl</language>
          <code>(defined $value &amp;&amp; $value ne $vdef) ? " --pc_iters $value" : ""</code>
        </format>
        <vdef>
          <value>2</value>
        </vdef>
        <group>10</group>
        <comment>
          <value>This option sets the number of iterations of probabilistic consistency to use before</value>
          <value>running the multiple alignment algorithm.</value>
        </comment>
      </attributes>
    </parameter>

    <!-- sc_iters -->
    <parameter issimple = "0" ismandatory = "0" type = "Integer">
      <name>sc_iters</name>
      <attributes>
        <prompt>Number of spectral consistency iterations (--sc_iters)</prompt>
        <format>
          <language>perl</language>
          <code>(defined $value &amp;&amp; $value ne $vdef) ? " --sc_iters $value" : ""</code>
        </format>
        <vdef>
          <value>0</value>
        </vdef>
        <group>11</group>
        <comment>
          <value>This option sets the number of iterations of spectral consistency to use before</value>
          <value>running the multiple alignment algorithm.</value>
        </comment>
      </attributes>
    </parameter>

    <!-- params file -->
    <parameter issimple = "0" ismandatory = "0" type = "InFile">
      <name>paramsFile</name>
      <attributes>
        <prompt>Trained CONTRAlign parameter file (--params)</prompt>
        <filenames>params.input</filenames>
        <format>
          <language>perl</language>
          <code>defined $value ? " --params params.input" : ""</code>
        </format>
        <group>12</group>
        <comment>
          <value>This option uses a trained CONTRAlign parameter file instead of the default program</value>
          <value>parameters. The format of the parameter file should be the same as the</value>
          <value>contralign.params.protein file in the CONTRAlign source code; each line contains a</value>
          <value>single parameter name and a parameter value.</value>
        </comment>
      </attributes>
    </parameter>

    <!-- partition -->
    <parameter issimple = "0" ismandatory = "0" type = "Switch">
      <name>partition</name>
      <attributes>
        <prompt>Compute the log partition function for the input sequence? (--partition)</prompt>
        <format>
          <language>perl</language>
          <code>$value ? " --partition" : ""</code>
        </format>
        <vdef>
          <value>0</value>
        </vdef>
        <group>13</group>
        <comment>
          <value>Compute the log partition function for the input sequence.</value>
        </comment>
      </attributes>
    </parameter>
  </parameters>
</pise>

<!-- 
These options are unsupported due to the limited wildcard implementation for the CIPRES portal (see note 
in the "design decisions" section above).  I'll leave them here for when the wildcard matching is updated 
(or the output filenames are changed).  

*Note*: after uncommenting, make dashes ('-') preceding "-posteriors", "-viterbi", and "-pairwise" double 
dashes (XML prohibits the double-dash sequence from appearing in comments, so I had to remove them).

*Note*: If enabling gamma output files detailed below, remove <ctrl> element prohibiting negative values 
of gamma in the parameter named "gamma" above.
-->
    <!-- output posteriors? -->
    <!--
    <parameter issimple = "0" ismandatory = "0" type = "Switch">
      <name>outputPosteriors</name>
      <attributes>
        <prompt>Output posteriors? (-posteriors)</prompt>
        <format>
          <language>perl</language>
          <code>$value ? " -posteriors" : ""</code>
        </format>
        <vdef>
          <value>0</value>
        </vdef>
        <group>4</group>
        <comment>
          <value>The posteriors output format is applicable only when the requested output of CONTRAlign</value>
          <value>consists of pairwise sequence comparisons. The posteriors output format is distinct</value>
          <value>from the MFA and CLUSTALW formats in that in addition to an alignment, a posteriors</value>
          <value>output file also provides a sparse representation of the alignment match posterior</value>
          <value>probabilities for letters from the given input sequence pair. </value>
        </comment>
      </attributes>
    </parameter>
    -->

    <!-- posteriors threshold -->
    <!--
    <parameter issimple = "0" ismandatory = "0" type = "Float">
      <name>posteriorsThreshold</name>
      <attributes>
        <prompt>Posteriors threshold</prompt>
        <format>
          <language>perl</language>
          <code>(defined $value &amp;&amp; $value ne $vdef) ? " $value output.posteriors" : " $vdef output.posteriors"</code>
        </format>
        <vdef>
          <value>0.001</value>
        </vdef>
        <precond>
          <language>perl</language>
          <code>$outputPosteriors</code>
        </precond>
        <group>5</group>
      </attributes>
    </parameter>
    -->

    <!-- posteriors output file -->
    <!--
    <parameter type = "Results">
      <name>outputPosteriorsFile</name>
      <attributes>
        <filenames>output.posteriors</filenames>
        <precond>
          <language>perl</language>
          <code>$outputPosteriors</code>
        </precond>
      </attributes>
    </parameter>
    -->

    <!-- gamma MFA output files -->
    <!--
    <parameter type = "Results">
      <name>gammaFilesMFA</name>
      <attributes>
        <filenames>
          output.mfa/*.gamma=0.031250
          output.mfa/*.gamma=0.062500
          output.mfa/*.gamma=0.125000
          output.mfa/*.gamma=0.250000
          output.mfa/*.gamma=0.500000
          output.mfa/*.gamma=1.000000
          output.mfa/*.gamma=1024.000000
          output.mfa/*.gamma=128.000000
          output.mfa/*.gamma=16.000000
          output.mfa/*.gamma=2.000000
          output.mfa/*.gamma=256.000000
          output.mfa/*.gamma=32.000000
          output.mfa/*.gamma=4.000000
          output.mfa/*.gamma=512.000000
          output.mfa/*.gamma=64.000000
          output.mfa/*.gamma=8.000000
        </filenames>
        <precond>
          <language>perl</language>
          <code>defined $gamma &amp;&amp; $gamma &lt; 0 &amp;&amp; $outputMFA</code>
        </precond>
      </attributes>
    </parameter>
    -->

    <!-- gamma ClustalW output files -->
    <!--
    <parameter type = "Results">
      <name>gammaFilesClustal</name>
      <attributes>
        <filenames>
          output.clustalw/*.gamma=0.031250
          output.clustalw/*.gamma=0.062500
          output.clustalw/*.gamma=0.125000
          output.clustalw/*.gamma=0.250000
          output.clustalw/*.gamma=0.500000
          output.clustalw/*.gamma=1.000000
          output.clustalw/*.gamma=1024.000000
          output.clustalw/*.gamma=128.000000
          output.clustalw/*.gamma=16.000000
          output.clustalw/*.gamma=2.000000
          output.clustalw/*.gamma=256.000000
          output.clustalw/*.gamma=32.000000
          output.clustalw/*.gamma=4.000000
          output.clustalw/*.gamma=512.000000
          output.clustalw/*.gamma=64.000000
          output.clustalw/*.gamma=8.000000
        </filenames>
        <precond>
          <language>perl</language>
          <code>defined $gamma &amp;&amp; $gamma &lt; 0 &amp;&amp; $outputClustal</code>
        </precond>
      </attributes>
    </parameter>
    -->

    <!-- viterbi -->
    <!--
    <parameter issimple = "0" ismandatory = "0" type = "Switch">
      <name>viterbi</name>
      <attributes>
        <prompt>Use viterbi? (-viterbi)</prompt>
        <format>
          <language>perl</language>
          <code>$value ? " -viterbi" : ""</code>
        </format>
        <vdef>
          <value>0</value>
        </vdef>
        <precond>
          <language>perl</language>
          <code>$pairwise</code>
        </precond>
        <group>7</group>
        <comment>
          <value>This option uses the Viterbi algorithm to compute alignments rather than the maximum</value>
          <value>expected accuracy (posterior decoding) algorithm. The alignments generated by the</value>
          <value>Viterbi option tend to be of slightly lower accuracy than posterior decoding, so this</value>
          <value>option is not enabled by default. Also, this option is only available when performing</value>
          <value>pairwise alignments.</value>
        </comment>
      </attributes>
    </parameter>
    -->

    <!-- pairwise -->
    <!--
    <parameter issimple = "0" ismandatory = "0" type = "Switch">
      <name>pairwise</name>
      <attributes>
        <prompt>Only pairwise? (-pairwise)</prompt>
        <format>
          <language>perl</language>
          <code>$value ? " -pairwise" : ""</code>
        </format>
        <vdef>
          <value>0</value>
        </vdef>
        <group>8</group>
        <comment>
          <value>This option instructs CONTRAlign to perform all pairwise alignments rather than</value>
          <value>multiple alignments.</value>
        </comment>
      </attributes>
    </parameter>
    -->
