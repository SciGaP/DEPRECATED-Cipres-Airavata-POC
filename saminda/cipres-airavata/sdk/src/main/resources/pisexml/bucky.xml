<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE pise SYSTEM "http://www.phylo.org/dev/rami/PARSER/pise.dtd" [
<!ENTITY runtime SYSTEM "http://www.phylo.org/dev/rami/XMLDIR/triton_run_time.xml">
]>

<pise>

  <head>
    <title>BUCKy</title>
    <version>1.3.2</version>
    <description>Bayesian Untangling of Concordance Knots (applied to yeast and other organisms) </description>
    <authors>C. Ané, B. Larget, D.A. Baum, S.D. Smith, A. Rokas</authors>
    <reference>C. Ané, B. Larget, D.A. Baum, S.D. Smith, A. Rokas (2007). Bayesian estimation of concordance among gene trees. Molecular Biology and Evolution 24(2), 412-426.</reference>
    <category>Phylogeny / Alignment</category>
  </head>
  
  <command>bucky</command>
 
<!-- ***************************************************************************************
                MBSUM insteface created on or about 6/15/200 by mamiller 
      *************************************************************************************** -->
 <!-- Running bucky

After input files created by mbsum are ready, the names of these files can either be given as arguments to bucky, 
or the file names can be written into a file, which in turn can be given to bucky. To run bucky, use either way: 

bucky [-options] <summary files> 
bucky [-options] 

with the second command, one of the options must be -i filename, where filename is the name of a file containing the list of all the input files (one input file per gene).
For example, after creating all .in files with mbsum in the same directory, you can run bucky with the default parameters by typing this: 
bucky *.in 

Options. 
 
-i inputfilelist-file 			To give the list of files created by mbsum from a file.
-o output-file-root 			This option sets the names of output files.  Default is run1.
-a alpha 						? is the a priori level of discordance among loci. Default ? is 1. 
-n number-generations 	Use this option to increase the number of updates (default: 100,000). An extra number of updates will actually be performed for burnin. 
									This number will be 10% of the desired number n of post-burning updates. The default, then, is to perform 10,000 updates for burnin, which 
									will be discarded, and then 100,000 more updates. 
-h or **help 					Prints a help message describing options, then quits.
-k number-runs				Runs k independent analyses. Default is 2. 
-c number-chains 			Use this option to run Metropolis coupled MCMC (or MCM¬CMC), whereby hot chains are run in addition to the standard (cold) chain. 
									These chains occasionally swap states, so as to improve their mixing. The option sets the total number of chains, including the cold one. Default is 1, i.e. no heated chains.
-r MCMCMC-rate 			when Metropolis coupled MCMC is used, this option controls the rate r with which chains try to swap states: a swap is proposed once every r updates. 
									Default is 100. warm and hot chains, in MCMCMC, use higher values of ? than does the cold chain.
-m alpha-multiplier			The cold chain uses the ? value given by the option -a. warmer chains will use parameters m?, m2?, . . . , mc?1?. Default m is 10. 
									The independence prior corresponds to ? = ? so MCMCMC is not used with this prior. 
-s subsample-rate 			Use this option for thinning the sample. All post-burnin samples will be used for summarizing the posterior distribution of gene-to-tree maps, but you may choose to save just a 
									sub-sample of these gene-to-tree maps. One sample will be saved every s updates. This option will have an effect only if option **create-sample-file is chosen. Default is 1: no thinning.
-s1 seed1 						Default is 1234
-s2 seed2 						Default is 5678.
-cf cutoff 						All splits with estimated sample-wide CF above this cutoff will be included in the list to have their summary information and their genome-wide CF displayed. Default is 0.05.
-p file-with-prune table	Default is to only consider taxa common to all genes, and prune all other taxa from the trees. This option allows the user to indicate which taxa should be retained in the analysis. 
									These taxa are specifed in a standard translate table, in a separate input file.
**calculate-pairs 			Use this option to calculate the posterior probability that pairs of loci share the same tree. Default is to NOT use this option.
**create-sample-file 		Use this option for saving samples of gene-to-tree maps. Default is to NOT use this option: samples are not saved. Saving all samples can slow down the program. 
**create-joint-file 			This option creates a .joint file. NOT created by default. 
**create-single-file			This option creates a .single file. NOT created by default.
**use-independence-prior Use this option to assume a priori that loci choose their trees independently of each other. This is equivalent to setting ? = ?. Default is to NOT use this option. 
**use-update-groups 		Use this option to permit all loci in a group to be updated to another tree. Default is to use this option, because it improves mixing.
**do-not-use-update-groups 	Use this option to disable the update that changes the tree of all loci in a group in a single update. Default is to NOT use this option. 

If both options **use-update-groups and **do-not-use-update-groups are used, only the last one is applied. No warning is given, but the file .out indicates whether group updates were enabled or disabled. 
 
Output. 

Running bucky will create various output files. With defaults parameters, these output files will have names of the form run1.*, but you can choose you own root file name. 

The following output files describe the input data, input parameters, and progress history. 

	.out 				Gives the date, version (1.2), input file names, parameters used, running time and progress history. If MCMCMC is used, this file will also indicate the acceptance history of swaps between chains. 
	.input 			Gives the list of input files. There should be one file per locus. 
	.single 			Gives a table with tree topologies in rows and loci in columns. The entries in the table are posterior probabilities of trees from the separate locus analyses. It is a one-file summary of the frst step of BCA. 

The following files give the full results as well as various result summaries. The goal of BCA this is to estimate the primary concordance tree. 
This tree is formed by all clades with concordance factors (CF) greater than 50%, and possibly other clades. The CF of a clade is the proportion of loci that have the clade. 

Sample-wide refers to loci in the sample and genome-wide refers to loci in the entire genome. 

	.concordance 	Main output: this file frst gives the primary concordance tree topology in parenthetical format and again the same tree with the posterior means of sample-wide CFs as edge lengths. This concordance tree is currently fully resolved, possibly including clades that are in less than 50% of gene trees. The user might want to unresolve those clades in case the conficting clades have lower but similar concordance factors. The list of clades in the primary concordance tree follows, with information on their sample-wide and genome-wide CFs: posterior mean and 95% credibility intervals. Inference on genome-wide CFs assumes that loci were sampled at random from an infnite genome. Finally, the file gives the posterior distribution of sample-wide CFs of all clades, sorted by their mean CF. In this list however, CFs are expressed in number of loci instead of proportions. 
	.cluster 			Gives the posterior distribution of the number of clusters, as well as credibility intervals. A cluster is a group of loci sharing the same tree topology. Loci in diferent clusters have diferent tree topologies. 
	.pairs 				Gives an l by l similarity matrix, l being the number of loci. Entries are the posterior probability that two given loci share the same tree. 
	.gene 				For each locus, gives the list of all topologies supported by the locus (index and parenthetical description). For each topology is indicated the posterior probability that the locus has this tree given the locus's data ('single' column) and given all loci's data ('joint' column). 
	.sample 			Gives the list of gene-to-tree maps sampled by bucky. with n post¬burnin updates and subsampling every s steps, this file contains n/s lines, one for each saved sample. 
							Each line contains the number of accepted updates (to be compared to the number of genes * sub-sampling rate), the number of clusters in the gene-to-tree map (loci mapped to the 
							same tree topology are in the same cluster), the log-posterior probability of the gene-to-tree map up to an additive constant followed by the gene-to-tree map. If there are l loci, this map is just a list of l trees. 
							Trees are given by their indices. The correspondence between tree index and tree parenthetical description can be found in the .gene or .single file. 
	.joint 				Gives a table with topologies in rows and loci in columns, similar to file .single file. Topologies are named by their indices as well as by their parenthetical descriptions. 
							Entries are posterior probabilities (averaged across all runs) that each locus was mapped to each topology.

Examples:

The example data provided with the program is organized as follows: 
directory $BUCKY HOME/bucky/data/example1/ contains 10 folders named exO to ex9, one for each locus. 

These 10 folders contain a single file each, named ex.in, which was created by mbsum. For analyzing these data, one can use the default parameters and type:

bucky $BUCKY HOME/bucky/data/example1/ex?/ex.in 

The question mark will match any character (any digit 0 to 9 in particular), so that all 10 locus files will be used for the analysis. 

The following command will run bucky with ? =5, no MCMCMC, group updates disabled, 2 independent runs (default), one million updates and user-defned seeds (keep this command on a single line). 

bucky -n 1000000 -a 5 -s1 7452O3 -s2 905423 **do-not-use-update-groups $BUCKY HOME/bucky/data/example1/ex?/ex.in 

A look at the file run1.concordance shows that the clades (19,20) and (18,20) both have an estimated CF of 0.50 but that this estimate difered greatly between runs because its stan¬dard deviation is 0.707.
Scrolling down the file indicates that the frst run gave a 100% concordance factor to clade (18,20) all the time while the second run gave it a 0% concordance factor all the time. So the two runs are in very strong
disagreement. This poor mixing is fxed by using the option **use-update-groups (or by not using the **do-not-use-update-groups option!). 

The yeast data analyzed in ? is provided with the program and organized as follows. The directory $BUCKY HOME/bucky/data/yeast/ contains 106 folders named y000 to y1O5, one for each gene.
In each of these folders, a file created by mbsum and named run2.nex.in contains the data from one gene. The list of all these input files is also provided, in $BUCKY HOME/bucky/data/yeast/yeast inputfilelist.
For analyzing these data with ? =2.5, n = 150, 000 updates, k =4 independent runs, c =4 chains (one cold and 3 hot chains), saving samples once every 1000 updates, and for keeping a similarity matrix among
genes, one would type (on a single line) 
bucky -a 2.5 -n 150000 -k 4 -c 4 **create-sample-file **calculate-pairs -s 1000 $BUCKY HOME/bucky/data/yeast/y???/run2.nex.in 

or alternatively, if $BUCKY HOME/bucky/ is the current directory: 

bucky -a 2.5 -n 150000 -k 4 -c 4 **create-sample-file **calculate-pairs -s 1000 -i data/yeast/yeast inputfilelist 

To prune the analysis to a specific set of taxa, the option -p can be used with a file containing the taxon list like this: 

bucky -n 150000 -p data/yeast/shortTaxonList -i data/yeast/yeast inputfilelist 

General notes:

First step of BCA: Analysis of individual loci in MrBayes. Any model of sequence evolution can be selected for any locus: there need not be one model common to all loci. 
Some loci can be protein alignments, others DNA alignments, some can combine DNA and coded gap characters. Morphological characters could technically be included
as one locus, but then the resulting concordance factors may not have an easy interpretation. If hundreds of genes are to be analyzed, the analysis of these genes needs
to be automated. One way to proceed is to have all the alignments in a single nexus file. In the frst step, MrBayes can be told to ignore all but a single locus, and this would
be repeated for each locus. 

Choosing the a priori level of discordance ?. To select a value based on biological relevance, the number of taxa and number of genes need to be considered. For example, 
the user might have an a priori for the proportion of loci sharing the same genealogy. One can turn this information into a value of ? since the probability that two randomly
chosen loci share the same tree is about 1/(1 . ?) if ? is small compared to the total number of possible tree topologies. Also, the value of ? sets the prior distribution on the
number of distinct locus genealogies in the sample. Go to the website www.stat.wisc.edu/ larget/bucky.html for an interactive display of this distribution, which can serve as
a tool for the choice of ?. 

Missing sequences. If some loci have missing sequences, i.e. missing taxa, then rows of missing data (????) need to be inserted in place of the missing taxon's sequence.
A more efficient way to deal with missing sequences will be implemented in a future version of bucky. 

******************************************************************************************************* -->

  <parameters>

  	&runtime;
 
 <!-- this parameter calls the program mbsum. -->   
    <parameter ismandatory="1" iscommand="1" ishidden="1" type="String">
		<name>bucky_invoke</name>
		<attributes>
			<format>
				<language>perl</language>
				<code>"bucky"</code>
			</format>
			<group>0</group>	
		</attributes>
	</parameter>
	
<!-- start input files this can be a single list of files, or one file followed by more. I dont see any advantage to the former case, though  -->
<!-- this parameter provides a single input file. We will allow up to 10. -->
    <parameter ismandatory="1" issimple="1" isinput="1" type="InFile" >
		<name>bb_infile1</name>
		<attributes>
			<group>20</group>
			<format>
				<language>perl</language>
				<code>"ex.in"</code>
			</format>
			<filenames>ex.in</filenames>
		</attributes>
    </parameter>
    
<!-- visible parameters -->  
<!--this parameter asks how many infiles the user wishes to provide -->	
		<parameter type="Integer" issimple="1">
		<name>num_files</name>
		<attributes>
			<prompt>How many files do you wish to combine?</prompt>
			<group>4</group>
			<ctrls>
				<ctrl>
					<message>Sorry, you must chose between 1 and 10 files for analysis</message>
					<language>perl</language>
					<code>$value &lt; 1</code>
				</ctrl>
				<ctrl>
					<message>Sorry, you cannot select more than 10 files  for analysis</message>
					<language>perl</language>
					<code>$value &gt; 10</code>
				</ctrl>
			</ctrls>
			<comment>
<value>Use mbsum to summarize all files from the same locus. You want mbsum to create a file .in 
for each locus. The extension .in just means input (for later analysis by bucky). Output files *.in from mbsum will typically look like the following, 
containing a list of tree topologies and a tally representing the trees' posterior probabilities from a given locus (as obtained in the frst step of BCA). </value>
			</comment>
	    </attributes>
	</parameter>
	
 <!-- these parameters provide the other nine MB input files, allowing up to 10-->
    <parameter issimple="1" type="InFile" >
		<name>bb_infile2</name>
		<attributes>
			<prompt>Second Input file for mbsum</prompt>
			<group>21</group>
			<filenames>ex2.in</filenames>
			<precond>
				<language>perl</language>
				<code>$num_files &gt; 1</code>
			</precond>
			<format>
				<language>perl</language>
				<code>"ex2.in"</code>
			</format>
		</attributes>
    </parameter>
    
    <parameter issimple="1" type="InFile" >
		<name>bb_infile3</name>
		<attributes>
			<prompt>Third Input file for mbsum</prompt>
			<group>22</group>
			<filenames>ex3.in</filenames>
			<precond>
				<language>perl</language>
				<code>$num_files &gt; 2</code>
			</precond>
			<format>
				<language>perl</language>
				<code>"ex3.in"</code>
			</format>
		</attributes>
    </parameter>
 
     <parameter issimple="1" type="InFile" >
		<name>bb_infile4</name>
		<attributes>
			<prompt>Fourth Input file for mbsum</prompt>
			<group>23</group>
			<filenames>ex4.in</filenames>
			<precond>
				<language>perl</language>
				<code>$num_files &gt; 3</code>
			</precond>
			<format>
				<language>perl</language>
				<code>"ex4.in"</code>
			</format>
		</attributes>
    </parameter>

	<parameter issimple="1" type="InFile" >
		<name>bb_infile5</name>
		<attributes>
			<prompt>Fifth Input file for mbsum</prompt>
			<group>24</group>
			<filenames>ex5.in</filenames>
			<precond>
				<language>perl</language>
				<code>$num_files &gt; 4</code>
			</precond>
			<format>
				<language>perl</language>
				<code>"ex5.in"</code>
			</format>
		</attributes>
	</parameter>
	
    <parameter issimple="1" type="InFile" >
		<name>bb_infile6</name>
		<attributes>
			<prompt>Sixth Input file for mbsum</prompt>
			<group>25</group>
			<filenames>ex6.in</filenames>
			<precond>
				<language>perl</language>
				<code>$num_files &gt; 5</code>
			</precond>
			<format>
				<language>perl</language>
				<code>"ex6.in"</code>
			</format>
		</attributes>
    </parameter>
    
    <parameter issimple="1" type="InFile" >
		<name>bb_infile7</name>
		<attributes>
			<prompt>Seventh Input file for mbsum</prompt>
			<group>26</group>
			<filenames>ex7.in</filenames>
			<precond>
				<language>perl</language>
				<code>$num_files &gt; 6</code>
			</precond>
			<format>
				<language>perl</language>
				<code>"ex7.in"</code>
			</format>
		</attributes>
    </parameter>
    
    <parameter issimple="1" type="InFile" >
		<name>bb_infile8</name>
		<attributes>
			<prompt>Eighth Input file for mbsum</prompt>
			<group>27</group>
			<filenames>ex8.in</filenames>
			<precond>
				<language>perl</language>
				<code>$num_files &gt; 7</code>
			</precond>
			<format>
				<language>perl</language>
				<code>"ex8.in"</code>
			</format>
		</attributes>
    </parameter>
    
    <parameter issimple="1" type="InFile" >
		<name>bb_infile9</name>
		<attributes>
			<prompt>Ninth Input file for mbsum</prompt>
			<group>28</group>
			<filenames>ex9.in</filenames>
			<precond>
				<language>perl</language>
				<code>$num_files &gt; 8</code>
			</precond>
			<format>
				<language>perl</language>
				<code>"ex9.in"</code>
			</format>
		</attributes>
    </parameter>
    
    <parameter issimple="1" type="InFile" >
		<name>bb_infile10</name>
		<attributes>
			<prompt>Tenth Input file for mbsum</prompt>
			<group>29</group>
			<filenames>ex10.in</filenames>
			<precond>
				<language>perl</language>
				<code>$num_files &gt; 9</code>
			</precond>
			<format>
				<language>perl</language>
				<code>"ex10.in"</code>
			</format>
		</attributes>
    </parameter>
    
<!-- stop input files -->

<!-- set the output root -->
	<parameter type="String" issimple="1">
		<name>set_outfile_name</name>
		<attributes>
			<prompt>Specify the output file name</prompt>
			<format>
				<language>perl</language>
				<code>" -o $value"</code>
			</format>
			<group>3</group>
	    </attributes>
	</parameter>

<parameter type="Paragraph">
	<paragraph>
		<name>mcmcmc</name>
		<prompt>MCMCMC runs</prompt>
		<parameters>
		
<!-- -c number-chains Use this option to run Metropolis coupled MCMC (or MCMCMC), whereby hot chains are run in addition to the standard (cold) chain. 
These chains occasionally swap states, so as to improve their mixing. The option sets the total number of chains, including the cold one. Default is 1, i.e. no heated chains.-->
			<parameter type="Integer">
				<name>set_nchains</name>
				<attributes>
					<prompt>Set the number of chains (-c)</prompt>
					<format>
						<language>perl</language>
						<code>" -c $value"</code>
					</format>
					<precond>
						<language>perl</language>
						<code>!$use_independence_prior</code>
					</precond>
					<vdef>
						<value>1</value>
					</vdef>
					<group>2</group>
					<comment>
<value>Use this option to run Metropolis coupled MCMC (or MCMCMC), whereby hot chains are run in addition to the standard (cold) chain. 
These chains occasionally swap states, so as to improve their mixing. The option sets the total number of chains, including the cold one. 
Default is 1, i.e. no heated chains</value>
					</comment>
				</attributes>
			</parameter>	
									
<!-- -r MCMCMC-rate 			when Metropolis coupled MCMC is used, this option controls the rate r with which chains try to swap states: a swap is proposed once every r updates. 
Default is 100. warm and hot chains, in MCMCMC, use higher values of ? than does the cold chain.-->
			<parameter type="Integer">
				<name>set_mcmcmcrate</name>
				<attributes>
					<prompt>Set the MCMCMC rate (-r)</prompt>
					<precond>
						<language>perl</language>
						<code>$set_nchains ne 1 &amp;&amp; !$use_independence_prior</code>
					</precond>
					<format>
						<language>perl</language>
						<code> (defined $value)? " -r $value" : ""</code>
					</format>
					<vdef>
						<value>100</value>
					</vdef>
					<group>2</group>
					<comment>
<value>When Metropolis coupled MCMC is used, -r controls the rate r with which chains try to swap states: a swap is proposed once every r updates. 
Default is 100.</value>
					</comment>
				</attributes>
			</parameter>	
	
<!-- -m alpha-multiplier	 In MCMCMC, warm and hot chains use higher values of alpha than does the cold chain.The cold chain uses the alpha value given by the option -a. warmer chains will use parameters m1, m2, . . . , mc?1?. Default m is 10. 
The independence prior corresponds to alpha = infinity so MCMCMC is not used with this prior. -->
			<parameter type="Float">
				<name>set_alphamult</name>
				<attributes>
					<prompt>Set the alpha-multiplier (-m)</prompt>
					<precond>
						<language>perl</language>
						<code>$set_nchains ne 1 &amp;&amp; !$use_independence_prior</code>
					</precond>
					<format>
						<language>perl</language>
						<code> (defined $value)? " -m $value" : ""</code>
					</format>
					<vdef>
						<value>1</value>
					</vdef>
					<group>2</group>
					<comment>
<value>In MCMCMC, warm and hot chains use higher values of alpha than does the cold chain.The cold chain uses the alpha value given by the option -a. warmer chains will use parameters m(alpha), m2(alpha), . . . , mc-1(alpha).
Default m is 10. The independence prior corresponds to alpha = infinity so MCMCMC is not used with this prior.</value>
					</comment>
				</attributes>
			</parameter>	
	
		</parameters>
	</paragraph>
</parameter>								

<parameter type="Paragraph">
	<paragraph>
		<name>adv_params</name>
		<prompt>Advanced Run configuration</prompt>
		<parameters>
<!-- -n number-generations 	Use this option to increase the number of updates (default: 100,000). An extra number of updates will actually be performed for burnin. 
									This number will be 10% of the desired number n of post-burning updates. The default, then, is to perform 10,000 updates for burnin, which 
									will be discarded, and then 100,000 more updates. -->
	<parameter type="Integer">
		<name>set_ngen</name>
		<attributes>
			<prompt>Set the number of updates  (-n)</prompt>
			<format>
				<language>perl</language>
				<code> (defined $value)? " -n $value" : ""</code>
			</format>
			<vdef>
				<value>100000</value>
			</vdef>
			<group>2</group>
			<comment>
<value>Use the -n option to increase the number of updates (default: 100,000). An extra number of updates will actually be performed for burnin. 
This number will be 10% of the desired number n of post-burning updates. The default, then, is to perform 10,000 updates for burnin, which will be discarded, and then 100,000 more updates</value>
			</comment>
	    </attributes>
	</parameter>									
									
<!-- -k number-runs Runs k independent analyses. Default is 2 -->
	<parameter type="Integer">
		<name>set_nanalyses</name>
		<attributes>
			<prompt>Set the number of independent analyses (-k)</prompt>
			<format>
				<language>perl</language>
				<code> (defined $value)? " -k $value" : ""</code>
			</format>
			<vdef>
				<value>2</value>
			</vdef>
			<group>2</group>
	    </attributes>
	</parameter>	
	
<!-- -a alpha 	? is the a priori level of discordance among loci. Default ? is 1. -->
	<parameter type="Float">
		<name>set_alpha</name>
		<attributes>
			<prompt>Set alpha, the a priori level of discordance among loci.  (-a)</prompt>
			<format>
				<language>perl</language>
				<code> (defined $value)? " -a $value" : ""</code>
			</format>
			<vdef>
				<value>1</value>
			</vdef>
			<group>2</group>
	    </attributes>
	</parameter>
	
<!-- -s1 seed1 	Default is 1234 -->
	<parameter type="Integer">
		<name>set_seed1</name>
		<attributes>
			<prompt>Set seed1 (-s1)</prompt>
			<format>
				<language>perl</language>
				<code> (defined $value)? " -s1 $value" : ""</code>
			</format>
			<group>2</group>
	    </attributes>
	</parameter>
	
<!-- -s2 seed2 	Default is 5678.-->
	<parameter type="Integer">
		<name>set_seed2</name>
		<attributes>
			<prompt>Set seed2 (-s2)</prompt>
			<format>
				<language>perl</language>
				<code> (defined $value)? " -s2 $value" : ""</code>
			</format>
			<group>2</group>
	    </attributes>
	</parameter>
	
<!-- -cf cutoff 	All splits with estimated sample-wide CF above this cutoff will be included in the list to have their summary information and their genome-wide CF displayed. Default is 0.05. -->
	<parameter type="Integer">
		<name>set_cfcutoff</name>
		<attributes>
			<prompt>Set cf cutoff (-cf)</prompt>
			<format>
				<language>perl</language>
				<code> (defined $value)? " -cf $value" : ""</code>
			</format>
			<group>2</group>
			<comment>
<value>All splits with estimated sample-wide CF above this cutoff will be included in the list to have their summary information and their genome-wide CF displayed. Default is 0.05.</value>
			</comment>
	    </attributes>
	</parameter>

<!-- -p file-with-prune table	Default is to only consider taxa common to all genes, and prune all other taxa from the trees. This option allows the user to indicate which taxa should be retained in the analysis. 
									These taxa are specifed in a standard translate table, in a separate input file. -->
	<parameter type="InFile">
		<name>prune_table</name>
		<attributes>
			<prompt>Upload file to indicate which taxa should be retained in the analysis (-p)</prompt>
			<format>
				<language>perl</language>
				<code> (defined $value)? " -p prune_table.txt" : ""</code>
			</format>
			<filenames>prune_table.txt</filenames>
			<group>2</group>
			<comment>
<value>While the default is to only consider taxa common to all genes, and prune all other taxa from the trees, this option allows the user to indicate which taxa should be retained in the analysis. 
These taxa can be specifed by uploading a standard translate table.</value>
			</comment>
	    </attributes>
	</parameter>
	
<!-- **calculate-pairs 	Use this option to calculate the posterior probability that pairs of loci share the same tree. Default is to NOT use this option. -->
	<parameter type="Switch">
		<name>calc_pairs</name>
		<attributes>
			<prompt>Calculate the posterior probability that pairs of loci share the same tree. (--calculate-pairs)</prompt>
			<format>
				<language>perl</language>
				<code> ($value)? " --calculate-pairs" : ""</code>
			</format>
			<vdef>
				<value>0</value>
			</vdef>
			<group>2</group>
			<comment>
<value>While the default is to only consider taxa common to all genes, and prune all other taxa from the trees, this option allows the user to indicate which taxa should be retained in the analysis. 
These taxa can be specifed by uploading a standard translate table.</value>
			</comment>
	    </attributes>
	</parameter>
	
<!-- **use-independence-prior Use this option to assume a priori that loci choose their trees independently of each other. This is equivalent to setting alpha  =  infinity. Default is to NOT use this option. -->
	<parameter type="Switch">
		<name>use_independence_prior</name>
		<attributes>
			<prompt>Assume that loci choose their trees independently of each other.  (--use-independence-prior)</prompt>
			<format>
				<language>perl</language>
				<code> ($value)? " --use-independence-prior" : ""</code>
			</format>
			<vdef>
				<value>0</value>
			</vdef>
			<group>2</group>
			<ctrls>
				<ctrl>
					<message>Sorry, you cannot choose both the independence prior and MCMCMC</message>
					<language>perl</language>
					<code>$set_nchains ne 1 &amp;&amp; $use_independence_prior</code>
				</ctrl>
			</ctrls>
			<comment>
<value>Use this option to assume a priori that loci choose their trees independently of each other. This is equivalent to setting alpha = infinity.</value>
			</comment>
	    </attributes>
	</parameter>
	
<!-- **use-update-groups 		Use this option to permit all loci in a group to be updated to another tree. Default is to use this option, because it improves mixing. -->
<!-- **do-not-use-update-groups 	Use this option to disable the update that changes the tree of all loci in a group in a single update. Default is to NOT use this option. -->
	<parameter type="Switch">
		<name>do_not_use_update_groups</name>
		<attributes>
			<prompt>Disable the update that changes the tree of all loci in a group in a single update.  ( --do-not-use-update-groups )</prompt>
			<format>
				<language>perl</language>
				<code> ($value)? " --do-not-use-update-groups ": ""</code>
			</format>
			<vdef>
				<value>0</value>
			</vdef>
			<group>2</group>
	    </attributes>
	</parameter>

		</parameters>
	</paragraph>
</parameter>

<parameter type="Paragraph">
	<paragraph>
		<name>output_files</name>
		<prompt>Specify Output files</prompt>
		<parameters>
		
<!-- **create-sample-file 		Use this option for saving samples of gene-to-tree maps. Default is to NOT use this option: samples are not saved. Saving all samples can slow down the program. -->
	<parameter type="Switch">
		<name>create_sample_file</name>
		<attributes>
			<prompt>Save samples of gene-to-tree maps. Can slow program (--create-sample-file)</prompt>
			<format>
				<language>perl</language>
				<code> ($value)? "--create-sample-file" : ""</code>
			</format>
			<vdef>
				<value>0</value>
			</vdef>
			<group>2</group>
	    </attributes>
	</parameter>

<!-- -s subsample-rate 	Use this option for thinning the sample. All post-burnin samples will be used for summarizing the posterior distribution of gene-to-tree maps, but you may choose to save just a 
	sub-sample of these gene-to-tree maps. One sample will be saved every s updates. 
	This option will have an effect only if option **create-sample-file is chosen. Default is 1: no thinning. -->
	<parameter type="Integer">
		<name>set_subsamprate</name>
		<attributes>
			<prompt>Set the subsample-rate (-s)</prompt>
			<precond>
				<language>perl</language>
				<code>$create_sample_file</code>
			</precond>
			<format>
				<language>perl</language>
				<code> (defined $value)? " -s $value" : ""</code>
			</format>
			<vdef>
				<value>1</value>
			</vdef>
			<group>2</group>
			<comment>
<value>Use the -s option for thinning the sample. All post-burnin samples will be used for summarizing the posterior distribution of gene-to-tree maps, but you may choose to save just a 
sub-sample of these gene-to-tree maps. One sample will be saved every s updates. This option will have an effect only if option **create-sample-file is chosen. Default is 1: no thinning..</value>
			</comment>
	    </attributes>
	</parameter>	
			
	
<!-- **create-joint-file 			This option creates a .joint file. NOT created by default. -->
	<parameter type="Switch">
		<name>create_joint_file</name>
		<attributes>
			<prompt>Create a .joint file. (--create-joint-file)</prompt>
			<format>
				<language>perl</language>
				<code> ($value)? " --create-joint-file" : ""</code>
			</format>
			<vdef>
				<value>0</value>
			</vdef>
			<group>2</group>
	    </attributes>
	</parameter>
	
<!-- **create-single-file This option creates a .single file. NOT created by default.-->
	<parameter type="Switch">
		<name>create_single</name>
		<attributes>
			<prompt>Create a .single file. (--create-single-file)</prompt>
			<format>
				<language>perl</language>
				<code> ($value)? " --create-single-file" : ""</code>
			</format>
			<vdef>
				<value>0</value>
			</vdef>
			<group>2</group>
	    </attributes>
	</parameter>
	  
		</parameters>
	</paragraph>
</parameter>

<!-- begin results -->
<!-- The following output files describe the input data, input parameters, and progress history. 

	.out 				Gives the date, version (1.2), input file names, parameters used, running time and progress history. If MCMCMC is used, this file will also indicate the acceptance history of swaps between chains. 
	.input 			Gives the list of input files. There should be one file per locus. 
	.single 			Gives a table with tree topologies in rows and loci in columns. The entries in the table are posterior probabilities of trees from the separate locus analyses. It is a one-file summary of the frst step of BCA. -->

	<!--.out 	Gives the date, version (1.2), input file names, parameters used, running time and progress history. If MCMCMC is used, this file will also indicate the acceptance history of swaps between chains.-->
		<parameter type="Results">
			<name>info_outfile</name>
			<attributes>
				<filenames>*.out</filenames>
			</attributes>
		</parameter>
		
	<!-- 	.input 			Gives the list of input files. There should be one file per locus. -->	
		<parameter type="Results">
			<name>out_infiles</name>
			<attributes>
				<filenames>*.input</filenames>
			</attributes>
		</parameter>
		
	<!-- 	.single 			Gives a table with tree topologies in rows and loci in columns. The entries in the table are posterior probabilities of trees from the separate locus analyses. It is a one-file summary of the frst step of BCA.  -->	
		<parameter type="Results">
			<name>out_single</name>
			<attributes>
				<filenames>*.single</filenames>
			</attributes>
		</parameter>

<!-- The following files give the full results as well as various result summaries. The goal of BCA this is to estimate the primary concordance tree. 
This tree is formed by all clades with concordance factors (CF) greater than 50%, and possibly other clades. The CF of a clade is the proportion of loci that have the clade. 
Sample-wide refers to loci in the sample and genome-wide refers to loci in the entire genome. -->
							
<!--.	.concordance 	Main output: this file frst gives the primary concordance tree topology in parenthetical format and again the same tree with the posterior means of sample-wide CFs as edge lengths. This concordance tree
	is currently fully resolved, possibly including clades that are in less than 50% of gene trees. The user might want to unresolve those clades in case the conficting clades have lower but similar concordance
	factors. The list of clades in the primary concordance tree follows, with information on their sample-wide and genome-wide CFs: posterior mean and 95% credibility intervals. Inference on genome-wide CFs
	assumes that loci were sampled at random from an infnite genome. Finally, the file gives the posterior distribution of sample-wide CFs of all clades, sorted by their mean CF. In this list however, CFs are expressed
	in number of loci instead of proportions. -->
		<parameter type="Results">
			<name>info_main</name>
			<attributes>
				<filenames>*.concordance </filenames>
			</attributes>
		</parameter>
		
	<!-- .cluster 		Gives the posterior distribution of the number of clusters, as well as credibility intervals. A cluster is a group of loci sharing the same tree topology. Loci in diferent clusters have diferent tree topologies. . -->	
		<parameter type="Results">
			<name>out_cluster</name>
			<attributes>
				<filenames>*.cluster</filenames>
			</attributes>
		</parameter>
		
	<!-- 	.pairs 		Gives an l by l similarity matrix, l being the number of loci. Entries are the posterior probability that two given loci share the same tree. .  -->	
		<parameter type="Results">
			<name>out_pairs</name>
			<attributes>
				<filenames>*.pairs</filenames>
			</attributes>
		</parameter>
		
	<!--	.gene 		For each locus, gives the list of all topologies supported by the locus (index and parenthetical description). For each topology is indicated the
							posterior probability that the locus has this tree given the locus's data ('single' column) and given all loci's data ('joint' column).-->
		<parameter type="Results">
			<name>info_gene</name>
			<attributes>
				<filenames>*.gene</filenames>
			</attributes>
		</parameter>
		
	<!-- 	.sample 	Gives the list of gene-to-tree maps sampled by bucky. with n post¬burnin updates and subsampling every s steps, this file contains n/s lines, one for each saved sample. 
							Each line contains the number of accepted updates (to be compared to the number of genes * sub-sampling rate), the number of clusters in the gene-to-tree map (loci mapped to the 
							same tree topology are in the same cluster), the log-posterior probability of the gene-to-tree map up to an additive constant followed by the gene-to-tree map. If there are l loci, this map is just a list of l trees. 
							Trees are given by their indices. The correspondence between tree index and tree parenthetical description can be found in the .gene or .single file.  -->	
		<parameter type="Results">
			<name>out_sample</name>
			<attributes>
				<filenames>*.sample.*</filenames>
			</attributes>
		</parameter>
		
	<!-- .joint 	Gives a table with topologies in rows and loci in columns, similar to file .single file. Topologies are named by their indices as well as by their parenthetical descriptions. 
					Entries are posterior probabilities (averaged across all runs) that each locus was mapped to each topology. -->	
		<parameter type="Results">
			<name>out_joint</name>
			<attributes>
				<filenames>*.joint</filenames>
			</attributes>
		</parameter>
		
		<!-- .txt	return text files -->	
		<parameter type="Results">
			<name>out_text</name>
			<attributes>
				<filenames>*.txt</filenames>
			</attributes>
		</parameter>
			
	<!-- all output files -->	
		<parameter type="Results">
			<name>commandline</name>
			<attributes>
				<filenames>COMMANDLINE</filenames>
			</attributes>
		</parameter>
       
  </parameters>
</pise>



