<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE pise SYSTEM "http://www.phylo.org/dev/rami/PARSER/pise.dtd">

<pise>

  <head>
    <title>ClustalW_Tree</title>
    <version>1.82</version>
    <description>Infer Phylogenetic Tree from a Multiple Sequence Alignment</description>
    <authors>Des Higgins</authors>
    <reference>Thompson, J.D., Higgins, D.G. and Gibson, T.J. (1994) CLUSTAL W: improving the sensitivity of progressive multiple sequence alignment through sequence weighting, positions-specific gap penalties and weight matrix choice. Nucleic Acids Research, 22:4673-4680.</reference>
    <category>Phylogeny / Alignment</category>
  </head>
  

  <command>clustalw_tree</command>
  
  <parameters>
    
    <parameter ismandatory="1" iscommand="1" ishidden="1" type="String">
      <name>clustalw</name>
      <attributes>
	
	<format>
	  <language>perl</language>
	  <code>"clustalw"</code>
	</format>
	<group>0</group>
	
      </attributes>
    </parameter>

	<!-- <parameter ismandatory="1" issimple="1"  type="Sequence"> -->
    <parameter ismandatory="1" issimple="1" isinput="1" type="Sequence">
      <name>infile</name>
      <attributes>
	<precond>
	  <language>perl</language>
	  <code>$actions ne "-profile" &amp;&amp; $actions ne "-sequences"</code>
	</precond>

	<prompt>Sequences File  (or Alignment File for Bootstrap and Tree actions) (-infile)</prompt>
	<format>
		<language>perl</language>
		<!-- <code>  " -infile=$value"</code> -->
		<code>  " -infile=infile.fasta"</code> 
		<!-- 
		<language>seqlab</language>
		<code>  " -infile=value"</code>
		-->
	</format>
	<group>1</group>
	<seqfmt>
		<value>8</value>
		<value>3</value>
		<value>4</value>
		<value>15</value>
		<value>100</value>
	</seqfmt>
	<pipe>
		<pipetype>readseq_ok_alig</pipetype>
			<language>perl</language>
			<code>1</code>
		<pipetype>seqsfile</pipetype>
			<language>perl</language>
			<code>1</code>
	</pipe>
	<!-- Added for Swami -->
     <filenames>infile.fasta</filenames>
	 <!-- -->
      </attributes>
    </parameter>

    <parameter ismandatory="1" type="Excl">
      <name>actions</name>
      <attributes>
	
	<prompt>Actions</prompt>
	<format>
	  <language>perl</language>
	  <code> " $value" </code>
	</format>
	<group>2</group>
	<vdef><value>-tree</value></vdef>
	
	<vlist>
	<!--
	  <value>-align</value>
	  <label>-align: do full multiple alignment</label>
	  <value>-profile</value>
	  <label>-profile: merge two alignments (PROFILE1 and 2) by profile or structure alignment</label>
	  <value>-sequences</value>
	  <label>-sequences: sequentially add PROFILE2 sequences to PROFILE1 alignment</label>
	  -->
	  <value>-tree</value>
	  <label>-tree: calculate NJ tree</label>
	  <value>-bootstrap</value>
	  <label>-bootstrap: bootstrap a NJ tree</label>
	</vlist>
	
      </attributes>
    </parameter>
    
    
    
 
	  
	  <parameter ishidden="1" type="OutFile">
	    <name>newtree</name>
	    <attributes>
	      
	      <prompt>File for new guide tree (-newtree)</prompt>
	      <format>
		<language>perl</language>
		<!-- <code> ($value)? " -newtree=$value" : "" </code> -->
	     <code> " -newtree=newtree.dnd"  </code>
		  </format>
	      <group>2</group>
	      <precond>
		<language>perl</language>
		<code>($actions =~ /align/ )</code>
	      </precond>
		  <!-- Added for Swami-->
		  <filenames>newtree.dnd</filenames>
		  <!---->
	    </attributes>
	  </parameter>
	  



<parameter type="Paragraph">
<paragraph>
<name>trees</name>
<prompt>Tree parameters</prompt>
<precond>
	<language>perl</language>
	<code> ($actions =~ /tree/) </code>
</precond>
<group>2</group>
<comment>
	<value>If you ask for an alignment, the program automatic computes the tree as well; but you can also ask for a tree, given an alignment (file .aln), with specific options.</value>
	<value>The method used is the NJ (Neighbour Joining) method of Saitou and Nei. First you calculate distances (percent divergence) between all pairs of sequence from a multiple alignment; second you apply the NJ method to the distance matrix.</value>
</comment>
<parameters>

	<parameter  type="Switch">
	<name>kimura</name>
	<attributes>

		<prompt>Use Kimura's correction (multiple substitutions) ? (-kimura)</prompt>
		<format>
			<language>perl</language>
			<code> ($value)?" -kimura":""</code>
		</format>
		<vdef><value>0</value></vdef>
		<group>2</group>
		<comment>
			<value>For small divergence (say &lt;10%) this option makes no difference. For greater divergence, this option corrects for the fact that observed distances underestimate actual evolutionary distances. This is because, as sequences diverge, more than one substitution will happen at many sites. However, you only see one difference when you look at the present day sequences. Therefore, this option has the effect of stretching (for DNA or proteins) are both due to Motoo Kimura. See the documentation for details. </value>
			<value>For VERY divergent sequences, the distances cannot be reliably corrected. You will be warned if this happens. Even if none of the distances in a data set exceed the reliable threshold, if you bootstrap the data, some of the bootstrap distances may randomly exceed the safe limit.</value>
		</comment>
	<precond>
		<language>perl</language>
		<code> ($actions =~ /tree/) </code>
	</precond>

	</attributes>
	</parameter>

	<parameter  type="Switch">
	<name>tossgaps</name>
	<attributes>

		<prompt>Ignore positions with gaps ? (-tossgaps)</prompt>
		<format>
			<language>perl</language>
			<code> ($value)?" -tossgaps":""</code>
		</format>
		<vdef><value>0</value></vdef>
		<group>2</group>
		<comment>
			<value>With this option, any alignment positions where ANY of the sequences have a gap will be ignored. This means that 'like' will be compared to 'like' in all distances. It also, automatically throws away the most ambiguous parts of the alignment, which are concentrated around gaps (usually). The disadvantage is that you may throw away much of the data if there are many gaps. </value>
		</comment>
	<precond>
		<language>perl</language>
		<code> ($actions =~ /tree/) </code>
	</precond>

	</attributes>
	</parameter>

	<parameter type="Integer">
	<name>bootstrap</name>
	<attributes>

		<prompt>Bootstrap a NJ tree (give the number of bootstraps, 0 for none) (-bootstrap)</prompt>
		<format>
			<language>perl</language>
			<code>  ($value &gt; 0 &amp;&amp; $value != $vdef)? " -bootstrap=$value":"" </code>
		</format>
		<vdef><value>1000</value></vdef>
		<group>2</group>
		<comment>
			<value>BOOTSTRAPPING is a method for deriving confidence values for the groupings in a tree (first adapted for trees by Joe Felsenstein). It involves making N random samples of sites from the alignment (N should be LARGE, e.g. 500 - 1000); drawing N trees (1 from each sample) and counting how many times each grouping from the original tree occurs in the sample trees. You must supply a seed number for the random number generator. Different runs with the same seed will give the same answer. See the documentation for details.</value>
		</comment>
	<precond>
		<language>perl</language>
		<code> ($actions =~ /bootstrap/) </code>
	</precond>

	</attributes>
	</parameter>

	<parameter type="Excl">
	<name>bootlabels</name>
	<attributes>

		<prompt>Phylip bootstrap positions (-bootlabels)</prompt>
		<format>
			<language>perl</language>
			<code>(defined $value &amp;&amp; $value ne $vdef )? " -bootlabels=$value":""</code>
		</format>
		<vdef><value>node</value></vdef>
		<group>2</group>
		<vlist>
			<value>node</value>
			<label>NODE labels</label>
			<value>branch</value>
			<label>BRANCH labels</label>
		</vlist>
		<comment>
			<value>The bootstrap values written in the phylip tree file format can be assigned either to branches or nodes. The default is to write the values on the nodes, as this can be read by several commonly-used tree display programs. But note that this can lead to confusion if the tree is rooted and the bootstraps may be better attached to the internal branches: Software developers should ensure they can read the branch label format.</value>
		</comment>
	<precond>
		<language>perl</language>
		<code> ($actions =~ /bootstrap/) </code>
	</precond>

	</attributes>
	</parameter>

	<parameter type="Integer">
	<name>seed</name>
	<attributes>

		<prompt>Seed number for bootstraps (-seed)</prompt>
		<format>
			<language>perl</language>
			<code> (defined $value)?" -seed=$value":""</code>
		</format>
		<group>2</group>
	<precond>
		<language>perl</language>
		<code> ($actions =~ /bootstrap/) </code>
	</precond>

	</attributes>
	</parameter>

	<parameter type="Excl">
	<name>outputtree</name>
	<attributes>

		<prompt>Output tree/distance format (-outputtree)</prompt>
		<format>
			<language>perl</language>
			<code> ($value &amp;&amp; $value ne $vdef)?" -outputtree=$value":""</code>
		</format>
		<vdef><value>PHYLIP</value></vdef>
		<group>2</group>
		<vlist>
			<!--
			<value>DIST</value>
			<label>Phylip format distance matrix</label>
			-->
			<value>NJ</value>
			<label>Clustal format</label>
			<value>PHYLIP</value>
			<label>Phylip format tree</label>
			<value>NEXUS</value>
			<label>NEXUS format tree</label>
		</vlist>
		<comment>
		<value>Clustal format output: This format is verbose and lists all of the distances between the sequences and the number of alignment positions used for each. The tree is described at the end of the file. It lists the sequences that are joined at each alignment step and the branch lengths. After two sequences are joined, it is referred to later as a NODE. The number of a NODE is the number of the lowest sequence in that NODE. </value>
		<value>Phylip format tree output: This format is the New Hampshire format, used by many phylogenetic analysis packages. It consists of a series of nested parentheses, describing the branching order, with the sequence names and branch lengths. It can be used by the RETREE, DRAWGRAM and DRAWTREE programs of the PHYLIP package to see the trees graphically. This is the same format used during multiple alignment for the guide trees. </value>
		<value>The distance matrix only: This format just outputs a matrix of all the pairwise distances in a format that can be used by the Phylip package. It used to be useful when one could not produce distances from protein sequences in the Phylip package but is now redundant (Protdist of Phylip 3.5 now does this). </value>
		<value>NEXUS format tree:  This format is used by several popular phylogeny programs, including PAUP and MacClade. </value>
		</comment>
	<precond>
		<language>perl</language>
		<code> ($actions =~ /tree/) </code>
	</precond>

	</attributes>
	</parameter>

</parameters>
</paragraph>

</parameter>



    <parameter ishidden="1" type="Results">
      <name>aligfile</name>
      <attributes>
	
	<filenames>*.aln *.gde *.phy</filenames>
	<pipe>
	  <pipetype>readseq_ok_alig</pipetype>
	  <language>perl</language>
	  <code>1</code>
	</pipe>
	
      </attributes>
    </parameter>

    <parameter ishidden="1" type="Results">
      <name>readseq_ok_aligfile</name>
      <attributes>
	
	<precond>
	  <language>perl</language>
	  <code>$output eq "GCG" || $output eq "PIR" || $output eq "PHYLIP" || $phylip_alig</code>
	</precond>
	<filenames>*.phy *.msf *.pir</filenames>
	<pipe>
	  <pipetype>readseq_ok_alig</pipetype>
	  <language>perl</language>
	  <code>1</code>
	</pipe>
	
      </attributes>
    </parameter>
 
    <parameter ishidden="1" type="Results">
      <name>newtreefile</name>
      <attributes>
	
	<filenames>*.nj *.dst</filenames>
	
      </attributes>
    </parameter>
    
    <parameter ishidden="1" type="Results">
      <name>phylipnewtreefile</name>
      <attributes>
	
	<filenames>*.dnd *.ph *.phb</filenames>
	<pipe>
	  <pipetype>phylip_tree</pipetype>
	  <language>perl</language>
	  <code>1</code>
	</pipe>
	
      </attributes>
    </parameter>
   
   
    

  </parameters>
</pise>
