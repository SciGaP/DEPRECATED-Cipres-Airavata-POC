<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE pise SYSTEM "http://www.phylo.org/dev/rami/PARSER/pise.dtd" [
<!ENTITY runtime SYSTEM "http://www.phylo.org/dev/rami/XMLDIR/triton_run_time.xml">
]>

<pise>

  <head>
    <title>MBSUM</title>
    <version>1.3.2</version>
    <description>Prepare MrBayes .t files for BUCKy</description>
    <authors>C. Ané, B. Larget, D.A. Baum, S.D. Smith, A. Rokas</authors>
    <reference>C. Ané, B. Larget, D.A. Baum, S.D. Smith, A. Rokas (2007). Bayesian estimation of concordance among gene trees. Molecular Biology and Evolution 24(2), 412-426.</reference>
    <category>Phylogeny / Alignment</category>
  </head>
  
  <command>mbsum</command>
 
<!-- ***************************************************************************************
                MBSUM insteface created on or about 6/15/200 by mamiller 
      *************************************************************************************** -->
 <!-- Running mbsum 
Type this for a brief help message: mbsum **help mbsum -h 

Purpose and Output.
It is advised to have one directory containing the MrBayes output of all individual locus analyses.
Typically, in this directory each file of the form *.t is a MrBayes output file from one single locus. 
Use mbsum to summarize all files from the same locus. You want mbsum to create a file <filenare>.in 
for each locus. The extension .in just means input (for later analysis by bucky). Output files *.in
from mbsum will typically look like the following, containing a list of tree topologies and a tally representing
the trees' posterior probabilities from a given locus (as obtained in the frst step of BCA). 

translate 
	1 Seer, 
	2 Spar, 
	3 Smik, 
	4 Skud, 
	5 Sbay, 
	6 Seas, 
	7 Sklu, 
	8 Calb; 
(1,(2,(3,(4,(5,((6,7),8)))))); 24239
(1,(2,(3,(4,(5,(6,(7,8))))))); 15000
(1,(2,(3,(4,(5,((6,8),7)))))); 2983
(1,(2,(3,((4,5),((6,7),8))))); 2590
(1,(2,((3,((6,7),8)),(4,5)))); 2537
(1,(2,((3,(6,(7,8))),(4,5)))); 1097
(1,(2,(3,((4,5),(6,(7,8)))))); 995
(1,(2,(3,((4,5),((6,8),7))))); 163
(1,(2,(3,((4,((6,7),8)),5)))); 145
(1,(2,((3,((6,8),7)),(4,5)))); 96
(1,(2,((3,(4,5)),((6,7),8)))); 66
(1,(2,(3,((4,(6,(7,8))),5)))); 51
(1,(2,((3,(4,5)),(6,(7,8))))); 22
(1,(2,(3,((4,((6,8),7)),5)))); 15
(1,(2,((3,(4,5)),((6,8),7)))); 1 

Syntax and Options. To run mbsum for a single data file, type: 

mbsum [-h] [**help] [-n #] [-o filename] [**version] <inputfilenare(s»> 

For example, let's say an alignment mygene.nex was analyzed with MrBayes with two runs, and sampled trees are 
in files mygene.run1.t and mygene.run2.t. These two sample files include, say, 5000 burnin trees each. 
To summarize these 2 runs use:

mbsum -n 5OOO -o mygene mygene.run1.t mygene.run2.t 

or more generally

mbsum -n 5OOO -o mygene mygene.run?.t 

Here is a description of the available options. 
-h or [**help] 							prints a help message describing the options then quits.

-n # or [**skip #]						this option allows the user to skips lines of trees before actually starting the tally tree topologies. The default is 0, i.e no tree is skipped. The same number of trees will be skipped in each input file. 
 
-o filename or **out filename	sets the output file name. A single output file will be created even if there are multiple input files. The tally combines all trees (except skipped trees) found in all files. 

**version 								prints the program's name and version then quits. 	

Example: the raw data and output from MrBayes are provided for the very first gene in the set analyzed in ?.
They are located in $BUCKY HOME/bucky/data/yeast/yOOO/
	 
The tree files from MrBayes, named yOOO.run1.t through yOOO.run4.t, each contain 501 trees. They can be summarized with: 

mbsum -n 5O1 -o yOOO.in $BUCKY HOME/bucky/data/yeast/yOOO/yOOO.run?.t 

Warnings. mbsum will overwrite a file named filename if such a file exists.  It is assumed that the same taxon is used to root all the trees for all loci.
This assumption is met if tree files are generated by MrBayes and if the same taxon appears frst for all genes, because MrBayes uses the frst taxon by default to root the trees.
Note also that MrBayes and BUCKy infer unrooted trees. Rooting is only used when writing trees in parenthetical format. 
From version 1.3, mbsum and bucky use translate tables, so that taxa may appear in a diferent order for diferent genes (but make sure the same taxon is consistently used as outgroup).
******************************************************************************************************* -->

  <parameters>

  	&runtime;
 
 <!-- this parameter calls the program mbsum. -->   
    <parameter ismandatory="1" iscommand="1" ishidden="1" type="String">
		<name>mbsum_invoke</name>
		<attributes>
			<format>
				<language>perl</language>
				<code>"mbsum"</code>
			</format>
			<group>0</group>	
		</attributes>
	</parameter>

<!-- this parameter provides the first MB input file. We will allow up to 10. -->
    <parameter ismandatory="1" issimple="1" isinput="1" type="InFile" >
		<name>mb_infile1</name>
		<attributes>
			<prompt>Sequences File  (or Alignment File for Bootstrap and Tree actions) (-infile)</prompt>
			<group>20</group>
			<format>
				<language>perl</language>
				<code>"mbsum_run1.t"</code>
			</format>
			<filenames>mbsum_run1.t</filenames>
		</attributes>
    </parameter>

<!-- invisible parameters -o filename or **out filename	sets the output file name. A single output file will be created even if there are multiple input files. The tally combines all trees (except skipped trees) found in all files.  -->
	<parameter type="String" issimple="1" ishidden="1">
		<name>set_outfile_name</name>
		<attributes>
			<format>
				<language>perl</language>
				<code>" -o mbsum.in"</code>
			</format>
			<group>3</group>
	    </attributes>
	</parameter>

<!-- visible parameters -->
<!-- 	this parameter allows the user to specify skipped lines, or burn-in value .
		-n # or [**skip #]						this option allows the user to skips lines of trees before actually starting the tally tree topologies.
		The default is 0, i.e no tree is skipped. The same number of trees will be skipped in each input file -->
		
	<parameter type="Integer" issimple="1">
		<name>skipped_lines</name>
		<attributes>
			<prompt>Specify lines of trees to skip, aka burn-in value  (-n)</prompt>
			<format>
				<language>perl</language>
				<code> (defined $value)? " -n $value" : ""</code>
			</format>
			<group>2</group>
			<comment>
<value>The -n parameter allows the user to skip lines of trees before actually starting the tally tree topologies.
		The default is 0, i.e no tree is skipped. The same number of trees will be skipped in each input file</value>
			</comment>
	    </attributes>
	</parameter>

	<!--this parameter asks how many infiles the user wishes to provide -->	
		<parameter type="Integer" issimple="1">
		<name>num_files</name>
		<attributes>
			<prompt>How many files do you wish to combine?</prompt>
			<group>4</group>
			<ctrls>
				<ctrl>
					<message>Sorry, you must chose between 1 and 10 files for analysis</message>
					<language>perl</language>
					<code>$value &lt; 1</code>
				</ctrl>
				<ctrl>
					<message>Sorry, you cannot select more than 10 files  for analysis</message>
					<language>perl</language>
					<code>$value &gt; 10</code>
				</ctrl>
			</ctrls>
			<comment>
<value>Use mbsum to summarize all files from the same locus. You want mbsum to create a file .in 
for each locus. The extension .in just means input (for later analysis by bucky). Output files *.in from mbsum will typically look like the following, 
containing a list of tree topologies and a tally representing the trees' posterior probabilities from a given locus (as obtained in the frst step of BCA). </value>
			</comment>
	    </attributes>
	</parameter>
	  
   <!-- these parameters provide the other nine MB input files, allowing up to 10-->
    <parameter issimple="1" type="InFile" >
		<name>mb_infile2</name>
		<attributes>
			<prompt>Second Input file for mbsum</prompt>
			<group>21</group>
			<filenames>mbsum_run2.t</filenames>
			<precond>
				<language>perl</language>
				<code>$num_files &gt; 1</code>
			</precond>
			<format>
				<language>perl</language>
				<code>"mbsum_run2.t"</code>
			</format>
		</attributes>
    </parameter>
    
    <parameter issimple="1" type="InFile" >
		<name>mb_infile3</name>
		<attributes>
			<prompt>Third Input file for mbsum</prompt>
			<group>22</group>
			<filenames>mbsum_run3.t</filenames>
			<precond>
				<language>perl</language>
				<code>$num_files &gt; 2</code>
			</precond>
			<format>
				<language>perl</language>
				<code>"mbsum_run3.t"</code>
			</format>
		</attributes>
    </parameter>
 
     <parameter issimple="1" type="InFile" >
		<name>mb_infile4</name>
		<attributes>
			<prompt>Fourth Input file for mbsum</prompt>
			<group>23</group>
			<filenames>mbsum_run4.t</filenames>
			<precond>
				<language>perl</language>
				<code>$num_files &gt; 3</code>
			</precond>
			<format>
				<language>perl</language>
				<code>"mbsum_run4.t"</code>
			</format>
		</attributes>
    </parameter>

	<parameter issimple="1" type="InFile" >
		<name>mb_infile5</name>
		<attributes>
			<prompt>Fifth Input file for mbsum</prompt>
			<group>24</group>
			<filenames>mbsum_run5.t</filenames>
			<precond>
				<language>perl</language>
				<code>$num_files &gt; 4</code>
			</precond>
			<format>
				<language>perl</language>
				<code>"mbsum_run5.t"</code>
			</format>
		</attributes>
    
    </parameter>
    	<parameter issimple="1" type="InFile" >
		<name>mb_infile6</name>
		<attributes>
			<prompt>Sixth Input file for mbsum</prompt>
			<group>25</group>
			<filenames>mbsum_run6.t</filenames>
			<precond>
				<language>perl</language>
				<code>$num_files &gt; 5</code>
			</precond>
			<format>
				<language>perl</language>
				<code>"mbsum_run6.t"</code>
			</format>
		</attributes>
    </parameter>
    
    <parameter issimple="1" type="InFile" >
		<name>mb_infile7</name>
		<attributes>
			<prompt>Seventh Input file for mbsum</prompt>
			<group>26</group>
			<filenames>mbsum_run7.t</filenames>
			<precond>
				<language>perl</language>
				<code>$num_files &gt; 6</code>
			</precond>
			<format>
				<language>perl</language>
				<code>"mbsum_run7.t"</code>
			</format>
		</attributes>
    </parameter>
    
    <parameter issimple="1" type="InFile" >
		<name>mb_infile8</name>
		<attributes>
			<prompt>Eighth Input file for mbsum</prompt>
			<group>27</group>
			<filenames>mbsum_run8.t</filenames>
			<precond>
				<language>perl</language>
				<code>$num_files &gt; 7</code>
			</precond>
			<format>
				<language>perl</language>
				<code>"mbsum_run8.t"</code>
			</format>
		</attributes>
    </parameter>
    
    <parameter issimple="1" type="InFile" >
		<name>mb_infile9</name>
		<attributes>
			<prompt>Ninth Input file for mbsum</prompt>
			<group>28</group>
			<filenames>mbsum_run9.t</filenames>
			<precond>
				<language>perl</language>
				<code>$num_files &gt; 8</code>
			</precond>
			<format>
				<language>perl</language>
				<code>"mbsum_run9.t"</code>
			</format>
		</attributes>
    </parameter>
    
    <parameter issimple="1" type="InFile" >
		<name>mb_infile10</name>
		<attributes>
			<prompt>Tenth Input file for mbsum</prompt>
			<group>29</group>
			<filenames>mbsum_run10.t</filenames>
			<precond>
				<language>perl</language>
				<code>$num_files &gt; 9</code>
			</precond>
			<format>
				<language>perl</language>
				<code>"mbsum_run10.t"</code>
			</format>
		</attributes>
    </parameter>
	  
	<!-- all output files -->
		<parameter type="Results">
			<name>all_outputfiles</name>
			<attributes>
				<filenames>*</filenames>
			</attributes>
		</parameter>
       
  </parameters>
</pise>



