<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE pise SYSTEM "http://www.phylo.org/dev/rami/PARSER/pise.dtd">

<pise>

  <head>
    <title>Clique</title>
    <version>Phylip 3.66</version>
    <description>Compatibility for Two State Characters</description>
        <authors>Felsenstein</authors>
    <reference>Felsenstein, J.  2007.  PHYLIP (Phylogeny Inference Package) version 3.66. Distributed by the author.  Department of Genetics, University of Washington, Seattle.</reference>
    <reference>Felsenstein, J.  1989.  PHYLIP -- Phylogeny Inference Package (Version 3.2). Cladistics  5: 164-166.</reference>
    <category>Phylogeny / Alignment</category>
    <doclink>http://bioweb.pasteur.fr/docs/gensoft-evol.html#PHYLIP</doclink>
  </head>

  <command>clique</command>

  <parameters>
    
    <parameter iscommand="1" ishidden="1" type="String">
      <name>clique</name>
      <attributes>
	<format>
	  <language>perl</language>
	  <code>"clique &lt; params"</code>
	</format>
	<group>0</group>
      </attributes>
    </parameter>
    
	<!-- <parameter ismandatory="1" issimple="1"  type="InFile"> -->
    <parameter ismandatory="1" issimple="1" isinput="1" type="InFile">
      <name>infile</name>
      <attributes>

	<prompt>Input File</prompt>
	<format>
	  <language>perl</language>
	 <!-- <code>"ln -sf $infile infile; "</code> -->
	   <code>"ln -sf infile.phylip infile; "</code>
	</format>
	<group>-10</group>
	<comment>
	  <value>Example input file:</value>
	  <value>&#xA0;&#xA0;&#xA0;&#xA0;5&#xA0;&#xA0;&#xA0;&#xA0;6</value>
	  <value>Alpha&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;110110</value>
	  <value>Beta&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;110000</value>
	  <value>Gamma&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;100110</value>
	  <value>Delta&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;001001</value>
	  <value>Epsilon&#xA0;&#xA0;&#xA0;001110</value>
	</comment>
	  <!-- Added for Swami-->
	  <filenames>infile.phylip</filenames>
	  <!-- -->
      </attributes>
    </parameter>

    <parameter type="Paragraph">
      <paragraph>
	<name>clique_opt</name>
	<prompt>Clique options</prompt>
	<parameters>

	  <parameter type="Switch">
	    <name>use_ancestral_state</name>
	    <attributes>
	      <prompt>Upload an Ancestral states file</prompt>
	      <format>
		<language>perl</language>
		<code>($value) ? "A\\n" : ""</code>
	      </format>
	      <group>1</group>
	      <paramfile>params</paramfile>
	      <comment>
<value>The A (Ancestral states) option allows the user to specify ancestral states for each character. These may be 0, 1 or ?, the latter indicating that the ancestral state is unknown.</value>
<value>In the program Clique the ancestor is included explicitly as a species in the character matrix (it is a distinct file in other Phylip programs).</value>
	      </comment>
	    </attributes>
	  </parameter>
	  
	  <!-- Added for Swami -->
	  <parameter type="InFile">
	    <name>ancestral_state_file</name>
	    <attributes>
	      <prompt>Ancestors state filefile</prompt>
	      <format>
		<language>perl</language>
		<code>""</code>
	      </format>
	      <group>1</group>
	     <filenames>ancestors</filenames>
		 <precond>
			<language>perl</language>
			<code>$use_ancestral_state</code>
		 </precond>
	    </attributes>
	  </parameter>
<!-- -->

	  <parameter type="Switch">
	    <name>spec_min_clique_size</name>
	    <attributes>
	      
	      <prompt>Specify minimum clique size? (C)</prompt>
	      <format>
		<language>perl</language>
		<code>($value)? "C\\n$min_clique_size\\n" : ""</code>
	      </format>
	      <vdef><value>0</value></vdef>
	      <group>3</group>
	      <paramfile>params</paramfile>
<comment>
<value>The C (Clique Size) option allows the user to specify a minimum clique size and print out all cliques (and their associated trees) greater than or equal to than that size.
The program prompts you for the minimum clique size. Thus by setting the minimum clique size to 1, all cliques (each with their respective trees)
can be shown. If the largest clique has 23 characters, you run the program with a minimum clique size of 18 to list all cliques within 5 characters of the largest one.</value>
</comment>
	    </attributes>
	  </parameter>
	  <parameter ismandatory="1" type="Integer">
	    <name>min_clique_size</name>
	    <attributes>
	      <prompt>Minimum clique size</prompt>
	      <format>
		<language>perl</language>
		<code>""</code>
	      </format>
	      <group>2</group>
	      <precond>
		<language>perl</language>
		<code>$spec_min_clique_size</code>
	      </precond>
	      
	      <ctrls>
		<ctrl>
		  <message>You must enter a numeric value, greater than 0</message>
		  <language>perl</language>
		  <code>($min_clique_size !~ /^\d+(\.\d+)?$/) || ($min_clique_size &lt; 0)</code>
		</ctrl>
	      </ctrls>
	      <comment>
		<value>This option specifies a minimum clique size, and prints out all cliques (and their associated trees) greater than or equal to than that size.</value>
	      </comment>
	      <paramfile>params</paramfile>
	    </attributes>
	  </parameter>

	</parameters>
      </paragraph>

    </parameter>

    <parameter type="Paragraph">
      <paragraph>
	<name>bootstrap</name>
	<prompt>Multiple Data Options</prompt>
	<parameters>

	  <parameter type="Switch">
	    <name>multiple_dataset</name>
	    <attributes>
	      
	      <prompt>Analyze multiple data sets (M)</prompt>
	      <format>
		<language>perl</language>
		<code>($value)? "M\\nD\\n$datasets_nb\\n" : ""</code>
	      </format>
	      <vdef><value>0</value></vdef>
	      <group>10</group>
	      <paramfile>params</paramfile>
<comment><value>The M (Multiple data sets) option. This option is included to allow bootstrapping. Using the program Seqboot, one can take any DNA, protein, restriction sites, gene frequency or binary character data set and make multiple data sets by bootstrapping. 
Trees can be produced for all bootstrapped data sets using the M option. 
These can be written to the tree output file if that option is left in force. 
The multi-tree output file can be routed to the program Consense to create a majority rule consensus tree
that can be used to make confidence intervals. The present version of the package allows bootstrapping
with Seqboot and Consense.</value>

<value>Here is a (very small) sample input file with two five-species data sets:</value> 

<value>&#xA0;&#xA0;&#xA0;&#xA0;5&#xA0;&#xA0;&#xA0;6</value>
<value>Alpha&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CCACCA</value>
<value>Beta&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CCAAAA</value>
<value>Gamma&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CAACCA</value>
<value>Delta&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;AACAAC</value>
<value>Epsilon&#xA0;&#xA0;&#xA0;AACCCA</value>
<value>&#xA0;&#xA0;&#xA0;&#xA0;5&#xA0;&#xA0;&#xA0;6</value>
<value>Alpha&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CCACCA</value>
<value>Beta&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CCAAAA</value>
<value>Gamma&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CAACCA</value>
<value>Delta&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;AACAAC</value>
<value>Epsilon&#xA0;&#xA0;&#xA0;AACCCA</value>
<value>The program can take multiple weights instead of multiple data sets.
It can do bootstrapping by reading in one data set,
together with a file of weights that show how the characters (or sites) are to be reweighted in each bootstrap sample.
Thus a site that is omitted in a bootstrap sample has effectively been given weight 0, while a site that has been
duplicated has effectively been given weight 2. The required weights file can be produced using Seqboot,
by setting the option to produce a wieghts file instead instead of producing a file of multiple data sets. 
It can be saved and used as the input weights file.</value>
<value>The main use of this option will be to allow all of the methods in these programs to be bootstrapped.
Using the program Seqboot one can take any DNA, protein, restriction sites, gene frequency or binary character
data set and make multiple data sets by bootstrapping.
Trees can be produced for all of these using the M option.
They will be written to the tree output file if that option is left in force.
The program Consense can be used to create a majority rule consensus tree which can be used to make confidence intervals.
</value></comment>
	    </attributes>
	  </parameter>

	  <parameter ismandatory="1" type="Integer">
	    <name>datasets_nb</name>
	    <attributes>
	      
	      <prompt>How many data sets</prompt>
	      <format>
		<language>perl</language>
		<code>""</code>
	      </format>
	      <group>9</group>
	      <ctrls>
		<ctrl>
		  <message>enter a value &gt; 0 ; there must be no more than 1000 datasets for this server</message>
		  <language>perl</language>
		  <code>($value &gt; 1000) || ($value &lt; 0)</code>
		</ctrl>
	      </ctrls>
	      <precond>
		<language>perl</language>
		<code>$multiple_dataset</code>
	      </precond>
	      
	    </attributes>
	  </parameter>
	  
	  <parameter type="Switch">
	    <name>consense</name>
	    <attributes>
	      <prompt>Compute a consensus tree</prompt>
	      <format>
		<language>perl</language>
		<code>($value)? "; cp infile infile.clique; cp outtree outtree.clique; cp outfile outfile.clique; mv treefile intree; consense &lt; consense.params; cp outtree outtree.consense; cp outfile outfile.consense; mv outtree.clique outtree; mv infile.clique infile; mv outfile.clique outfile" : ""</code>
	      </format>
	      <vdef><value>0</value></vdef>
	      <group>10</group>
	      <precond>
		<language>perl</language>
		<code>$multiple_dataset &amp;&amp; $print_treefile</code>
	      </precond>
	      
	    </attributes>
	  </parameter>
	  
	</parameters>
      </paragraph>
    </parameter>

    <parameter type="Paragraph">
      <paragraph>
	<name>output</name>
	<prompt>Output options</prompt>
	<parameters>
	  
	  <parameter type="Switch">
	    <name>print_matrix</name>
	    <attributes>
	      
	      <prompt>Print out compatibility matrix (3)</prompt>
	      <format>
		<language>perl</language>
		<code>($value)? "" : "3\\n"</code>
	      </format>
	      <vdef><value>1</value></vdef>
	      <group>1</group>
	      <paramfile>params</paramfile>
	      
	    </attributes>
	  </parameter>

	  <parameter type="Switch">
	    <name>print_tree</name>
	    <attributes>
	      
	      <prompt>Print out tree (4)</prompt>
	      <format>
		<language>perl</language>
		<code>($value)? "" : "4\\n"</code>
	      </format>
	      <vdef><value>1</value></vdef>
	      <group>1</group>
	      <comment>
		<value>Tells the program to print a semi-graphical picture of the tree in the outfile.</value>
	      </comment>
	      <paramfile>params</paramfile>
	      
	    </attributes>
	  </parameter>
	  
	  <parameter type="Switch">
	    <name>print_treefile</name>
	    <attributes>
	      
	      <prompt>Write out trees onto tree file (5)</prompt>
	      <format>
		<language>perl</language>
		<code>($value)? "" : "5\\n"</code>
	      </format>
	      <vdef><value>1</value></vdef>
	      <group>1</group>
	      <comment>
		<value>Saves the tree in a treefile (a standard Newick representation of trees).</value>
	      </comment>
	      <paramfile>params</paramfile>
	      
	    </attributes>
	  </parameter>
	  
	  <parameter type="Switch">
	    <name>printdata</name>
	    <attributes>
	      
	      <prompt>Print out the data at start of run (1)</prompt>
	      <format>
		<language>perl</language>
		<code>($value)? "1\\n" : ""</code>
	      </format>
	      <vdef><value>0</value></vdef>
	      <group>1</group>
	      <paramfile>params</paramfile>
	      
	    </attributes>
	  </parameter>
	  
	  <parameter type="Switch">
	    <name>indent_tree</name>
	    <attributes>

	      <prompt>Indent treefile</prompt>
	      <format>
		<language>perl</language>
		<code>($value) ? " &amp;&amp; indenttree -o outtree.indent outtree" : ""</code>
	      </format>
	      <vdef><value>0</value></vdef>
		  <!-- <group>1000</group>-->
	      <group>99</group>
	    </attributes>
	  </parameter>

	</parameters>
      </paragraph>

    </parameter>

    <parameter type="Paragraph">
      <paragraph>
	<name>other_options</name>
	<prompt>Other options</prompt>
	<parameters>
	  
	  <parameter type="Integer">
	    <name>outgroup</name>
	    <attributes>
	      
	      <prompt>Outgroup root (default, use as outgroup species 1) (O)</prompt>
	      <format>
		<language>perl</language>
		<code>($value &amp;&amp; $value != $vdef)? "O\\n$value\\n" : "" </code>
	      </format>
	      <vdef><value>1</value></vdef>
	      <group>1</group>
	      <paramfile>params</paramfile>
		    <comment>
		    <value> The O (Outgroup) option is valid only if the tree is not rooted by the Ancestral States option.
		    It specifies which species is on the line leading to the root of the tree. 
		    For example, if the outgroup is a species "Mouse" then the root of the tree will be placed in the middle of the
		    branch connected to this species, with Mouse branching off on one side of the root and the lineage leading
		    to the rest of the tree on the other. When selected, the number of the outgroup must be identified (the species are
		    numbered in the order they occur in the input file). Entering 6 causes the sixth species in the data set
		    to be taken as the outgroup (the sixth in the first data set if there are multiple data sets).
		    Outgroup-rooting will not be attempted if the data have already established a root for the
		    tree, such as from a user-defined tree. The inferred tree as printed out is still an unrooted tree,
		    though the outgroup is connected to the bottommost node so that it is easy to visually convert the tree
		    into rooted form.</value>
		    </comment>      
		     <comment>
		    <value>&#169;Copyright 1980-2007. University of Washington.</value>
		     </comment>
	      <ctrls>
		<ctrl>
		  <message>Please enter a value greater than 0</message>
		  <language>perl</language>
		  <code>$value &lt; 1</code>
		</ctrl>
	      </ctrls>

	    </attributes>
	  </parameter>
	  
	</parameters>
      </paragraph>
      
    </parameter>

    <parameter type="Results">
      <name>outfile</name>
      <attributes>

	<filenames>outfile</filenames>
	
      </attributes>
    </parameter>
    
    <parameter type="Results">
      <name>treefile</name>
      <attributes>
	
	<precond>
	  <language>perl</language>
	  <code>$print_treefile</code>
	</precond>
	<filenames>outtree</filenames>
	<pipe>
	  <pipetype>phylip_tree</pipetype>
	  <language>perl</language>
	  <code>1</code>
	</pipe>

      </attributes>
    </parameter>
    
    <parameter type="Results">
      <name>indented_treefile</name>
      <attributes>
	
	<precond>
	  <language>perl</language>
	  <code>$print_treefile &amp;&amp; $indent_tree</code>
	</precond>
	<filenames>outtree.dnd</filenames>
	
      </attributes>
    </parameter>
    
    <parameter type="Results">
      <name>params</name>
      <attributes>
	
	<filenames>params</filenames>
	
      </attributes>
    </parameter>
    
    <parameter ishidden="1" type="String">
      <name>confirm</name>
      <attributes>
	
	<format>
	  <language>perl</language>
	  <code>"Y\\n"</code>
	</format>
	<!-- <group>1000</group>-->
	<group>99</group>
	<paramfile>params</paramfile>
	
      </attributes>
    </parameter>
    
    <parameter ishidden="1" type="String">
      <name>terminal_type</name>
      <attributes>
	<format>
	  <language>perl</language>
	  <code>"0\\n"</code>
	</format>
	<!-- <group>-1</group> -->
	<group>0</group>
	<paramfile>params</paramfile>
      </attributes>
    </parameter>
 
  
    <parameter type="Results">
      <name>tmp_params</name>
      <attributes>
	<filenames>*.params</filenames>
      </attributes>
    </parameter>

    <parameter ishidden="1" type="String">
      <name>consense_confirm</name>
      <attributes>
        <format>
          <language>perl</language>
          <code>"Y\\n"</code>
        </format>
        <!-- <group>1000</group>-->
		<group>99</group>
        <precond>
          <language>perl</language>
          <code>$consense</code>
        </precond>
        <paramfile>consense.params</paramfile>
      </attributes>
    </parameter>
    
    <parameter ishidden="1" type="String">
      <name>consense_terminal_type</name>
      <attributes>
        <format>
          <language>perl</language>
          <code>"T\\n"</code>
        </format>
        <!-- <group>-2</group>-->
		<group>0</group>
        <precond>
          <language>perl</language>
          <code>$consense</code>
        </precond>
        <paramfile>consense.params</paramfile>
      </attributes>
    </parameter>

    <parameter type="Results">
      <name>consense_outfile</name>
      <attributes>
        <precond>
          <language>perl</language>
          <code>$consense</code>
        </precond>
        <filenames>outfile.consense</filenames>
      </attributes>
    </parameter>

    <parameter type="Results">
      <name>consense_treefile</name>
      <attributes>
        <precond>
        <language>perl</language>
          <code>$consense</code>
        </precond>
        <filenames>outtree.consense</filenames>
      </attributes>
    </parameter>
    
  </parameters>

</pise>
