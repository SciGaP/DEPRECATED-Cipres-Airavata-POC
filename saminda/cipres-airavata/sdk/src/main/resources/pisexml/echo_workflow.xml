<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pise SYSTEM "http://www.phylo.org/dev/rami/PARSER/pise2.dtd">
<pise>
	<head>
		<title>Running Echo in Localhost</title>
		<version>1.0</version>
		<description>Test description</description>
		<authors>Saminda</authors>
		<reference>
			no refs
		</reference>
		<category>Phylogeny / Alignment</category>
	</head>
	
	<command>echo_workflow</command>
	
<!--
*****************************************************************************************************************************************
Created by Mark Miller for CSG, 9_1_2011 or thereabouts.
*****************************************************************************************************************************************
Basic setup: 
The BEAST program is Java interface over a C code implementation. Input files for BEAST are in BEAST XML format. The input files can theoretically
be created by a human, but in practice they are created by the auxiliary program called BEAUti. Since we dont have the resource to provide an interactive web  version
of BEAUti, we will provide a very simple interface that simple accepts the BEAUti file lets it run BEAST.
	
Teragrid/XSEDE:
Waynes assessment of parallel speedup is as follows:

To achieve high parallel speedup when running BEAST with the BEAGLE library, there must be either

1. tens of partitions of similar size 
2. thousands of distinct patterns of characters within each partition.
	
or both. GPUs are only useful when Condition 2 is met.

Of the iuser who requested BEAST, four provided data sets. 
The conditions for high levels of speedup were not met in these four data set, so we expect only modest speedups. 
	

* Wayne currently recommends that all CIPRES runs of BEAST
   . run on Trestles with 8 threads in the shared queue and
   . use the BEAGLE SSE library.

Two types of threaded parallelization are available and can be used together.
   . BEAST allows a separate thread for each partition
   . BEAGLE allows an arbitrary number of threads within each partition.

Appended are two example run scripts.  Compared to a single-threaded run without the BEAGLE library, . the speedup for Julien's case is about 2, while the speedup for Heidi's case is about 4.
Although the speedup for Julien's case is small, the run time is modest, so that is probably a reasonable compromise versus using even fewer threads.

The seed is optional and should be included only if specified by the user.

We ask the user how many partitions they have, and then we set the run parameters accordingly

The user manual is at http://beast.bio.ed.ac.uk/Main_Page and dates from 2007! :)

Run script for data from Julien with 2 partitions having 237 and 27 patterns (more files on Trestles at /home/pfeiffer/BEAST.1.6.1_trestles/Julien-2genes100k/Julien-2genes100k.beast-t2.beagle_SSE.t4.shared
)

#!/bin/bash
#PBS -N Julien-2genes100k.beast-t2.beagle_SSE.t4
#PBS -q shared
#PBS -l nodes=1:ppn=8
#PBS -l walltime=1:00:00
#PBS -m abe
#PBS -M pfeiffer@sdsc.edu
#PBS -V
#PBS -A use320
cd $PBS_O_WORKDIR
export BEAST=/home/pfeiffer/BEAST-1.6.1
export BEAGLE=/home/pfeiffer/BEAGLE
java -Xmx15000m -Djava.library.path="$BEAST/lib:$BEAGLE/lib" -jar $BEAST/lib/beast.jar -seed 12345 -threads 2 -beagle_SSE -beagle_instances 4 /home/pfeiffer/BEAST.1.6.1_trestles/Julien-2genes100k/Julien-2genes100k.xml

Run script for data from Heidi with 27 partitions having 26 to 245 patterns (more files on Trestles at
/home/pfeiffer/BEAST.1.6.1_trestles/Heidi10k/Heidi10k.beast-t8.beagle_SSE.shared)

#!/bin/bash
#PBS -N Heidi50M.beast-t8.beagle_SSE
#PBS -q shared
#PBS -l nodes=1:ppn=8
#PBS -l walltime=1:00:00
#PBS -m abe
#PBS -M pfeiffer@sdsc.edu
#PBS -V
#PBS -A use320
cd $PBS_O_WORKDIR
export BEAST=/home/pfeiffer/BEAST-1.6.1
export BEAGLE=/home/pfeiffer/BEAGLE
java -Xmx15000m -Djava.library.path="$BEAST/lib:$BEAGLE/lib" -jar $BEAST/lib/beast.jar -seed 12345 -threads 8 -beagle_SSE /home/pfeiffer/BEAST.1.6.1_trestles/Heidi10k/Heidi10k.xml

-->
<!-- modified on 10/7/2011
	added the -beagle scaling option; 
changed the logic for submission for more than 4 partitions.
<parameters> -->
	
<!-- We upgraded to 7.2.4, skipping 7.2.3 because of a reported major issue with the 7.2.3 release.
	There was a change in the beagle scaling flags with this upgrade. The default is now "delayed" which gives a performance hit
	to some kinds of data sets. As a result, we have left the default as dynamic, and added delayed as an option (the default is delayed with current beagle code -->

<parameters>
	
<!--  submission on trestles: the invocation line and any needed thread specification  -->
					<parameter ismandatory="1" ishidden="1" type="String">
						<name>beast_trestles</name>
						<attributes>
							<precond>
								<language>perl</language>
								<code>!$no_beagle</code>		
							</precond>
							<format>
								<language>perl</language>		
								<code>"<![CDATA[beastwrapper ]]>"</code>
							</format>
							<group>0</group>
						</attributes>
					</parameter>							
					
<!--  submission on trestles: the invocation line and any needed thread specification  -->
					<parameter ismandatory="1" ishidden="1" type="String">
						<name>beast_nobeagle_trestles</name>
						<attributes>
							<precond>
								<language>perl</language>
								<code>$no_beagle</code>		
							</precond>
							<format>
								<language>perl</language>		
								<code>"<![CDATA[beastonlywrapper ]]>"</code>
							</format>
							<group>0</group>
						</attributes>
					</parameter>
								
					
<!-- this section defines the file scheduler.conf that accompanies the command line to the TG resource. It instructs the machine how to run the job.  --> 
<!-- 1 shared node and 8 threads for all jobs  -->									
				<parameter type="String" ishidden="1" >
					<name>number_nodes</name>
					<attributes>
						<group>2</group>
						<paramfile>scheduler.conf</paramfile>
						<precond>
							<language>perl</language>
							<code>!$no_beagle</code>
						</precond>
						<format>
							<language>perl</language>
							<code>
									"nodes=1\\n" .
									"threads_per_process=8\\n"
							</code>
						</format>
					</attributes>
				</parameter>
<!-- end number of nodes  -->		
		
<!-- this specifies command line flags based on partitions 
			      BEAST      BEAGLE
Partitions	  threads  		threads  		Command options for threads & BEAGLE

       1        		1        		8    			(null)   	-beagle_SSE -beagle_instances 8
     2-3        		2        		4  			-threads 2 		-beagle_SSE -beagle_instances 4
     > = 4        		4        		2  			-threads 4 		-beagle_SSE -beagle_instances 2
     revised 10/7/2011 according to instructions from Wayne  -->
<!-- the configuration was revised 8/19/2013 with noew information 
				      BEAST      BEAGLE
Partitions	  threads  		threads  		Command options for threads & BEAGLE

       1        		1        		8    			(null)   	-beagle_SSE -beagle_instances 8
     2-3        		2        		4  			-threads 8 		-beagle_SSE -beagle_instances 4
     > = 4        		4        		2  			-threads 8 		-beagle_SSE -beagle_instances 2
	
	-->
<!-- partitions =1 -->
		<parameter issimple="1" ishidden="1" type="String">
			<name>partions_1</name>
			<attributes>
				<precond>
					<language>perl</language>
					<code>!$is_partitioned &amp;&amp; !$no_beagle</code>
				</precond>
				<format>
					<language>perl</language>
					<code> "-beagle_SSE -beagle_instances 8"</code>
				</format>
				<group>4</group>
			</attributes>
		</parameter>

<!-- partitions = 2-3 -->
		<parameter issimple="1" ishidden="1" type="String">
			<name>partions_2</name>
			<attributes>
				<precond>
					<language>perl</language>
					<code>$nu_partitions &gt; 1 &amp;&amp; $nu_partitions &lt; 4 &amp;&amp; !$no_beagle</code>
				</precond>
				<format>
					<language>perl</language>
					<code> "-threads 8 -beagle_SSE -beagle_instances 4"</code>
				</format>
				<group>4</group>
			</attributes>
		</parameter>

<!-- partitions >= 4 -->
		<parameter issimple="1" ishidden="1" type="String">
			<name>partions_4</name>
			<attributes>
				<precond>
					<language>perl</language>
					<code>$nu_partitions &gt; 3 &amp;&amp; !$no_beagle</code>
				</precond>
				<format>
					<language>perl</language>
					<code> "-threads 8 -beagle_SSE -beagle_instances 2"</code>
				</format>
				<group>4</group>
			</attributes>
		</parameter>
<!-- command line for runs without beagle -->
<!-- 1 partition no beagle -->
		<parameter issimple="1" ishidden="1" type="String">
			<name>beagle_partions_1</name>
			<attributes>
				<precond>
					<language>perl</language>
					<code>$no_beagle</code>
				</precond>
				<format>
					<language>perl</language>
					<code> "-threads 8 "</code>
				</format>
				<group>4</group>
			</attributes>
		</parameter>
	<!-- 1 shared node and 1 thread -->									
				<parameter type="String" ishidden="1" >
					<name>number_nodes_no1</name>
					<attributes>
						<precond>
							<language>perl</language>
							<code>$no_beagle</code>
						</precond>
						<group>2</group>
						<paramfile>scheduler.conf</paramfile>
						<format>
							<language>perl</language>
							<code>
									"nodes=1\\n" .
									"mpi_processes=1\\n" .
									"threads_per_process=8\\n"
							</code>
						</format>
					</attributes>
				</parameter>
<!-- end number of nodes  -->

<!-- on advice from Bryan and Wayne, all noBEAGLE jobs run the same now....
	2 partitions. no beagle -->
<!--		<parameter issimple="1" ishidden="1" type="String">
			<name>beagle_partions_2</name>
			<attributes>
				<precond>
					<language>perl</language>
					<code>$no_beagle &amp;&amp; $nu_partitions eq 2 </code>
				</precond>
				<format>
					<language>perl</language>
					<code> "-threads 2 "</code>
				</format>
				<group>4</group>
			</attributes>
		</parameter> -->
	
<!-- 1 shared node and 2 threads -->									
<!--				<parameter type="String" ishidden="1" >
					<name>number_nodes_no2</name>
					<attributes>
						<precond>
							<language>perl</language>
							<code>$no_beagle &amp;&amp; $nu_partitions eq 2 </code>
						</precond>
						<group>2</group>
						<paramfile>scheduler.conf</paramfile>
						<format>
							<language>perl</language>
							<code>
									"nodes=1\\n" .
									"threads_per_process=2\\n"
							</code>
						</format>
					</attributes>
				</parameter> -->
	
<!-- 3 partitions. no beagle 	
		<parameter issimple="1" ishidden="1" type="String">
			<name>beagle_partions_3</name>
			<attributes>
				<precond>
					<language>perl</language>
					<code>$no_beagle &amp;&amp; $nu_partitions eq 3 </code>
				</precond>
				<format>
					<language>perl</language>
					<code> "-threads 3 "</code>
				</format>
				<group>4</group>
			</attributes>
		</parameter>-->
	
<!-- 1 shared node and 3 threads 									
				<parameter type="String" ishidden="1" >
					<name>number_nodes_no3</name>
					<attributes>
						<precond>
							<language>perl</language>
							<code>$no_beagle &amp;&amp; $nu_partitions eq 3 </code>
						</precond>
						<group>2</group>
						<paramfile>scheduler.conf</paramfile>
						<format>
							<language>perl</language>
							<code>
									"nodes=1\\n" .
									"threads_per_process=3\\n"
							</code>
						</format>
					</attributes>
				</parameter> -->

<!-- 4 partitions. no beagle 	
		<parameter issimple="1" ishidden="1" type="String">
			<name>beagle_partions_4</name>
			<attributes>
				<precond>
					<language>perl</language>
					<code>$no_beagle &amp;&amp; $nu_partitions eq 4 </code>
				</precond>
				<format>
					<language>perl</language>
					<code> "-threads 4 "</code>
				</format>
				<group>4</group>
			</attributes>
		</parameter>-->
	
<!-- 1 shared node and 4 threads 								
				<parameter type="String" ishidden="1" >
					<name>number_nodes_no4</name>
					<attributes>
						<precond>
							<language>perl</language>
							<code>$no_beagle &amp;&amp; $nu_partitions eq 4 </code>
						</precond>
						<group>2</group>
						<paramfile>scheduler.conf</paramfile>
						<format>
							<language>perl</language>
							<code>
									"nodes=1\\n" .
									"threads_per_process=4\\n"
							</code>
						</format>
					</attributes>
				</parameter>-->	
	
<!-- 5 partitions. no beagle	
		<parameter issimple="1" ishidden="1" type="String">
			<name>beagle_partions_5</name>
			<attributes>
				<precond>
					<language>perl</language>
					<code>$no_beagle &amp;&amp; $nu_partitions eq 5 </code>
				</precond>
				<format>
					<language>perl</language>
					<code> "-threads 5 "</code>
				</format>
				<group>4</group>
			</attributes>
		</parameter> -->	

<!-- 1 shared node and 5 threads 									
				<parameter type="String" ishidden="1" >
					<name>number_nodes_no5</name>
					<attributes>
						<precond>
							<language>perl</language>
							<code>$no_beagle &amp;&amp; $nu_partitions eq 5 </code>
						</precond>
						<group>2</group>
						<paramfile>scheduler.conf</paramfile>
						<format>
							<language>perl</language>
							<code>
									"nodes=1\\n" .
									"threads_per_process=5\\n"
							</code>
						</format>
					</attributes>
				</parameter> -->	
	
<!-- 6 partitions. no beagle 	
		<parameter issimple="1" ishidden="1" type="String">
			<name>beagle_partions_6</name>
			<attributes>
				<precond>
					<language>perl</language>
					<code>$no_beagle &amp;&amp; $nu_partitions eq 6 </code>
				</precond>
				<format>
					<language>perl</language>
					<code> "-threads 6 "</code>
				</format>
				<group>4</group>
			</attributes>
		</parameter> -->	
	
<!-- 1 shared node and 6 threads 									
				<parameter type="String" ishidden="1" >
					<name>number_nodes_no6</name>
					<attributes>
						<precond>
							<language>perl</language>
							<code>$no_beagle &amp;&amp; $nu_partitions eq 6 </code>
						</precond>
						<group>2</group>
						<paramfile>scheduler.conf</paramfile>
						<format>
							<language>perl</language>
							<code>
									"nodes=1\\n" .
									"threads_per_process=6\\n"
							</code>
						</format>
					</attributes>
				</parameter> -->	
	
<!-- 7 partitions. no beagle 	
		<parameter issimple="1" ishidden="1" type="String">
			<name>beagle_partions_7</name>
			<attributes>
				<precond>
					<language>perl</language>
					<code>$no_beagle &amp;&amp; $nu_partitions eq 7 </code>
				</precond>
				<format>
					<language>perl</language>
					<code> "-threads 7 "</code>
				</format>
				<group>4</group>
			</attributes>
		</parameter> -->	
	
<!-- 1 shared node and 7 threads 									
				<parameter type="String" ishidden="1" >
					<name>number_nodes_no7</name>
					<attributes>
						<precond>
							<language>perl</language>
							<code>$no_beagle &amp;&amp; $nu_partitions eq 7 </code>
						</precond>
						<group>2</group>
						<paramfile>scheduler.conf</paramfile>
						<format>
							<language>perl</language>
							<code>
									"nodes=1\\n" .
									"threads_per_process=7\\n"
							</code>
						</format>
					</attributes>
				</parameter> -->	
	
<!-- 8 partitions. no beagle 
		<parameter issimple="1" ishidden="1" type="String">
			<name>beagle_partions_8</name>
			<attributes>
				<precond>
					<language>perl</language>
					<code>$no_beagle &amp;&amp; $nu_partitions &gt; 7 </code>
				</precond>
				<format>
					<language>perl</language>
					<code> "-threads 8 "</code>
				</format>
				<group>4</group>
			</attributes>
		</parameter> -->	
	
	<!-- 1 shared node and 8 threads -->									
				<parameter type="String" ishidden="1" >
					<name>number_nodes_no8</name>
					<attributes>
					<precond>
						<language>perl</language>
						<code>$no_beagle &amp;&amp; $nu_partitions &gt; 7 </code>
					</precond>
						<group>2</group>
						<paramfile>scheduler.conf</paramfile>
						<format>
							<language>perl</language>
							<code>
									"nodes=1\\n" .
									"threads_per_process=8\\n"
							</code>
						</format>
					</attributes>
				</parameter>

<!-- partitions >= 8 -->
<!--	COMMENTED OUT	<parameter issimple="1" ishidden="1" type="String">
			<name>partions_8</name>
			<attributes>
				<precond>
					<language>perl</language>
					<code>$nu_partitions &gt; 7</code>
				</precond>
				<format>
					<language>perl</language>
					<code> "-threads 8 -beagle_SSE"</code>
				</format>
				<group>4</group>
			</attributes>
		</parameter> -->
		
<!-- input file specification -->
<!-- the input file to be operated on ends the command line -->
		<parameter ismandatory="1" isinput="1" type="Sequence">
			<name>infile</name>
			<attributes>
				<prompt>Input File (must be in BEAST XML format)</prompt>
				<format>
					<language>perl</language>
					<code>"infile.xml"</code>
				</format>
				<group>99</group>
<!-- this file designator seems to come at the end of the command string, so we set if for 99 currently -->
				<filenames>infile.xml</filenames>
			</attributes>
		</parameter>
<!-- Results section. To start we return all results files available-->

		<parameter ishidden="1" type="Results">
			<name>all_results</name>
			<attributes>
				<filenames>*</filenames>
			</attributes>
		</parameter>
		
<!-- This section provides visible queries that help configure the interface  -->

<!-- this sets the run time -->
				<parameter type="Float" issimple="1" ismandatory="1">
					<name>runtime</name> 
					<attributes>
						<group>1</group>
						<paramfile>scheduler.conf</paramfile>
						<prompt>Maximum Hours to Run (up to 334 hours)</prompt>
						<vdef>
							<value>0.5</value>
						</vdef>
						<ctrls>
							<ctrl>
								<message>The maximum hours to run must be less than 334</message>
								<language>perl</language>
								<code>$runtime &gt; 334.0</code>
							</ctrl>
						</ctrls>
						<format>
							<language>perl</language>
							<code>"runhours=$value\\n"</code>
						</format>

<!-- provide feedback on number of cpu hrs to be consumed; all runs are the same, but this must be keyed to a visible param, so here we make it conditional on a non-zero run time. -->
						<warns>
							<warn>
								<message>The job will run on 8 processors as configured. If it runs for the entire configured time, it will consume 8 x $runtime cpu hours</message>
								<language>perl</language>
								<code>!$no_beagle &amp;&amp; $runtime ne 0 </code>
							</warn>
							<warn>
								<message>The job will run on 1 processor as configured (jobs without BEAGLE run on a single processor. If it runs for the entire configured time, it will consume 1 x $runtime cpu hours</message>
								<language>perl</language>
								<code>$no_beagle &amp;&amp; $runtime ne 0 </code>
							</warn>
						</warns>
						<comment>
<value>Estimate the maximum time your job will need to run. We recommend testimg initially with a &lt; 0.5hr test run because Jobs set for 0.5 h or less depedendably run immediately in the "debug" queue. 
Once you are sure the configuration is correct, you then increase the time. The reason is that jobs &gt; 0.5 h are submitted to the "normal" queue, where jobs configured for 1 or a few hours times may
	run sooner than jobs configured for the full 168 hours. 
</value>
						</comment>
					</attributes>
				</parameter>

<!-- Determine whether the data set is partitioned, this will determine how the job is run. -->
				<parameter issimple="1" ismandatory="1" type="Switch">
					<name>is_partitioned</name>
					<attributes>
						<group>0</group>
						<prompt>My data set is partitioned</prompt>
						<vdef>
							<value>0</value>
						</vdef>
						<comment>
							<value>This option will help the application determine how to run the job</value>
						</comment>
					</attributes>
				</parameter>
				
<!-- user must specify how many partitions they have -->
				<parameter issimple="1" ismandatory="1" type="Integer">
					<name>nu_partitions</name>
					<attributes>
						<group>0</group>
						<prompt>How many partitions does your data have?</prompt>
						<precond>
							<language>perl</language>
							<code>$is_partitioned</code>
						</precond>
						<ctrls>
							<ctrl>
								<message>Please enter an integer greater than 1 for the number of partitions. If you have just one partition, please uncheck the box that says "My data set is partitioned"</message>
								<language>perl</language>
								<code>$is_partitioned &amp;&amp; $nu_partitions &lt; 2 </code>
							</ctrl>
						</ctrls>
						<warns>
							<warn>
								<message>You have specified a large number of partitions; we are asking users with this type of data to contact us at customerservice@phylo.org, so we can explore better performance techniques with BEAST.</message>
								<language>perl</language>
								<code>$nu_partitions &gt;= 16</code>
							</warn>
						</warns>
						<comment>
							<value>This option will help the application determine how to run the job</value>
						</comment>
					</attributes>
				</parameter>

<!-- Dont use Beagle -->
			<parameter issimple="1" ishidden="0" type="Switch">
			<name>no_beagle</name>
			<attributes>
				<prompt>Do not use Beagle</prompt>
				<vdef>
					<value>0</value>				
				</vdef>
				<warns>
					<warn>
						<message>The Do not use Beagle option is intended only for cases when runs with Beagle fail. Runs without Beagle are slower and less efficient.</message>
						<language>perl</language>
						<code>$no_beagle == 1</code>
					</warn>
				</warns>
				<group>4</group>
				<comment>
<value>This option is offered because sometimes a bug in the interface between BEAST and BEAGLE prevents a run from completing. Use this option if you wish to run a data set that 
has failed using the normal BEAST/BEAGLE implementation. Runs made this way are always slower, so use this option as a last resort.</value>
				</comment>
			</attributes>
		</parameter>
		
<!-- The user is permitted to specify a seed -->
		<parameter issimple="1" ishidden="0" type="Switch">
			<name>spec_seed</name>
			<attributes>
				<prompt>Specify a seed for this run (by default a random seed is used)</prompt>
				<vdef>
					<value>0</value>				
				</vdef>
				<group>4</group>
				<comment>
<value>This option allows the user to specify the random seed BEAST uses, so results can be compared between runs.</value>
				</comment>
			</attributes>
		</parameter>

		<parameter issimple="1" ishidden="0" type="Integer">
			<name>seed_val</name>
			<attributes>
				<prompt>Enter the seed value here</prompt>
				<precond>
					<language>perl</language>
					<code>$spec_seed</code>
				</precond>
				<format>
					<language>perl</language>
					<code> "-seed $value"</code>
				</format>
				<vdef>
					<value>12345</value>				
				</vdef>
				<group>4</group>
			</attributes>
		</parameter>
	
		<parameter issimple="1" ismandatory="1" ishidden="1" type="String">
			<name>beagle_scaling</name>
			<attributes>
				<prompt>Set the Beagle Scaling Parameter (the choice can affect performance)</prompt>
				<precond>
					<language>perl</language>
					<code>!$no_beagle</code>
				</precond>
				<format>
					<language>perl</language>
					<code> "-beagle_scaling dynamic"</code>
				</format>
<!--	made this hidden, because the choices are lower than with no beagle	-->
<!--				<vlist>
					<value>always</value>
					<label>always</label> 
					<value>dynamic</value>
					<label>dynamic</label>
					<value>delayed</value>
					<label>delayed</label> 
					<value>none</value>
					<label>none</label>
				</vlist> 
					<value>dynamic</value>				
				</vdef> -->

<!--						<warns>
					<warn>
						<message>Some discrete data sets will require the delayed option. If BEAST fails under your current selection, please re-try using the delayed setting.</message>
						<language>perl</language>
						<code>$beagle_scaling ne "delayed"</code>
					</warn>
					<warn>
						<message>Selecting the delayed value is necessary for some discrete data sets, but it can decrease performance significantly on some data sets.</message>
						<language>perl</language>
						<code>$beagle_scaling eq "delayed"</code>
					</warn>
				</warns> 
				<comment>
<value>Some data sets require no scaling, so a choice of scaling:none may improve your job's performance; however, many jobs do require scaling. In particular, some discrete data sets require delayed scaling.
AFrom the BEAST mail list, it seems that in general, if your job fails, it is worthwhile to try different values for this parameter. Also, if you have long runs to make, it is useful to look at the impact of this parameter on performance with some short test jobs. 
In our test data, dynamic scaling runs faster than or the same as delayed scaling, except of course in cases where dynaimc scaling fails for a particular data set.</value>
				</comment> -->
				<group>4</group>
			</attributes>
		</parameter> 
</parameters>	
</pise>


