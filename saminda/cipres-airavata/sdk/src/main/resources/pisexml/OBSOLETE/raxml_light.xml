<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE pise SYSTEM "http://www.phylo.org/dev/rami/PARSER/pise2.dtd">
<pise>
	<head>
		<title>RAxML_Light_XSEDE</title>
		<version>1.0.5</version>
		<description>RAxML-Light is a stripped down RAxML version for conducting tree searches for very large trees (DNA ONLY) under the CAT approximation and GAMMA model of rate heterogeneity, run on XSEDE</description>
		<authors>Alexandros Stamatakis, Christian Goll, Wayne Pfeiffer</authors>
		<reference>Stamatakis A. RAxML-VI-HPC: maximum likelihood-based phylogenetic analyses with thousands of taxa and mixed models.Bioinformatics. 2006 Nov 1;22(21):2688-90</reference>
		<category>Phylogeny / Alignment</category>
		<doclink>http://icwww.epfl.ch/~stamatak/index-Dateien/countManual7.0.0.php  </doclink>
	</head>
	
	<command>raxml_light</command>
	
<!-- 
###########################################################################################################################
	Created around 12/15/2011 by mamiller, based on information and a script developed by Wayne Pfeiffer and Christian Goll
###########################################################################################################################
	
This bash script performs a comprehensive analysis by submitting many separate jobs involving RAxML, RAxML-Light, and Parsimonator 
instead of a single job using only RAxML. It is for DNA data only. The command to execute is

    /home/pfeiffer//RAxML-Light.sh <input options>

The following is an example:

1.  /home/pfeiffer/RAxML-Light.sh 
2. -s SALAMIN_404.phy 
3. 2-bsearches 100 
4. 2-rsearches 20 
99. 2-submit

The input options are described in the usage subroutine.
	
Default values are as follows:
	
RAXMLSERIAL=/home/diag/opt/raxml/7.2.8/bin/raxmlHPC-SERIAL
PARSIMONATOR=/home/pfeiffer/Parsimonator-1.0.2/parsimonator-SSE3
RAXMLLIGHT=/home/pfeiffer/RAxML-Light-1.0.5g/raxmlLight-PTHREADS
3. bsearches=100
4. rsearches=20
5. BMAX=500
6. RMAX=100
7. usebest=""
serialqueue=shared
parsqueue=normal
searchqueue=normal
parscores=1
searchcores=8
parscoresperjob=32
searchcoresperjob=32
8. parshours=1
9. searchhours=1
10. account=use320
99. submit=""
11. substitution_model=GTRCAT
12. bseed=12345
13. pseed=12345
14. auto=autoMRE
save_memory=""

******************************************************************************
Options that users should be able to specify are:

	2-bsearches   number of bootstrap searches on replica alignments
	2-rsearches   number of regular searches on original alignment
    2-parshours   (max wall time to generate parsimony tree)
    2-searchhours (max wall time for searching)
	
	
	Additional options are:

2-usebest           use best trees found in bootstrap searches for regular searches on original alignment
	
**********************************************************************************************************
We will not allow users to set these parameters
**********************************************************************************************************
2-serialqueue       queue for serial jobs
2-parallelqueue	    queue for parallel search jobs
2-parscores	        number of cores to generate a parsimony tree
2-searchcores       number of cores for a search
**********************************************************************************************************
2-account	        account number
2-submit            submit jobs after writing run files

	
RAxML options

	-s  sequence file name
	-m  substitution model
	-b  seed for generating bootstrap replicas

Parsimonator options are:
	-p  seed for generating first parsimony tree in a sequence of searches

RAxML Light option
	-S  save memory
>The other input options can be left at their default values except for

    2-account
    2-submit

You need to specify your own account and always specify 2-submit .

-->
	
	<parameters>
<!-- Hidden parameters -->		
<!-- Set the basic command line -->	
					<parameter ishidden="1" type="String">
						<name>raxmllight_invocation</name>
						<attributes>
							<format>
								<language>perl</language>
								<code>"RAxML-Light.sh"</code>
							</format>
							<group>1</group>
						</attributes>
					</parameter>
		
<!--create the scheduler file -->
<!--					<parameter ishidden="1" type="String">
						<name>raxmlhpc_light_scheduler</name>
						<attributes>
							<paramfile>scheduler.conf</paramfile>
							<format>
								<language>perl</language>
								<code>
									"jobtype=xx\\n" .
									"threads_per_process=xx\\n" .
									"nodes=1\\n"
								</code>
								</format>
							<group>0</group>
						</attributes>
					</parameter> -->

<!--required input file -->
<!--					<parameter ismandatory="1" issimple="1" isinput="1" type="InFile">
						<name>infile</name>
						<attributes>
							<format>
								<language>perl</language>
								<code>" -s infile"</code>
							</format>
							<group>2</group>
							<filenames>infile</filenames>
						</attributes>
					</parameter> -->
		
<!-- 2-account account number: can terri do this and add it to the command line -->
<!--				<parameter ishidden="1" type="String">
						<name>submit_string</name>
						<attributes>
							<format>
								<language>perl</language>
								<code>" **account iplantaccountnumbervalue"</code>
							</format>
							<group>99</group>
						</attributes>
					</parameter> -->
		
<!-- 2-submit submit jobs after writing run files-->
<!--					<parameter ishidden="1" type="String">
						<name>submit_string</name>
						<attributes>
							<format>
								<language>perl</language>
								<code>" **submit"</code>
							</format>
							<group>99</group>
						</attributes>
					</parameter> -->

<!-- end invisible params -->
		
<!-- Parameters with visible controls start here -->
<!--		<parameter type="Float" issimple="1" ismandatory="1">
			<name>runtime</name>
			<attributes>
				<group>1</group>
				<paramfile>scheduler.conf</paramfile>
				<prompt>Maximum Hours to Run (click here for help setting this correctly)</prompt>
				<vdef>
					<value>0.25</value>
				</vdef>
				<format>
					<language>perl</language>
					<code>"runhours=$value \\n"</code>
				</format>
				<ctrls>
					<ctrl>
						<message>Sorry, the maximum hours must be less than 334</message>
						<language>perl</language>
						<code>$runtime &gt; 334.0</code>
					</ctrl>
				</ctrls>
				<warns>
					<warn>
						<message>The job will run on 8 processors as configured. If it runs for the entire configured time, it will consume 8 x $runtime cpu hours</message>
						<language>perl</language>
						<code>$runtime ne 0 </code>
					</warn>
				</warns>
				<comment>
<value>Estimate the maximum time your job will need to run. We recommend testimg initially with a &lt; 0.5hr test run because Jobs set for 0.5 h or less depedendably run immediately in the "debug" queue. 
Once you are sure the configuration is correct, you then increase the time. The reason is that jobs &gt; 0.5 h are submitted to the "normal" queue, where jobs configured for 1 or a few hours times may
run sooner than jobs configured for the full 334 hours. 
</value>
				</comment>
			</attributes>
		</parameter> -->
		
<!-- Optional mixed model file -->
<!-- If user doesn't enter a value the partition parameter won't be in the map that the web app sends the command renderer 
	(which evaluates the perl for parameters that are present), so we don't need to worry about making the format code conditional
	 since this parameter just won't be evaluated. Command renderer evaluates 3 types of parameters: 
	1) those that appear in the map coming from the gui, those that are	hidden, 3) those that are of type OutFile or Result. -->
<!--					<parameter type="InFile" issimple="1">
						<name>partition</name>
						<attributes>
							<prompt>Use a mixed/partitioned model? (-q)</prompt>
							<format>
								<language>perl</language>
								<code>" -q partitions.txt"</code>
							</format>
							<group>2</group>
							<filenames>partitions.txt</filenames>
							<comment>
					<value>The multipleModelFileName parameter (-q) allows you to upload a file that specifies the regions of your alignment for which an individual model of nucleotide substitution should be estimated. This will typically be used to infer trees for long (in terms of base pairs) multi-gene alignments. For example, if -m GTRGAMMA is used, individual alpha-shape parameters, GTR-rates, and empirical base frequencies will be estimated and optimized for each partition. Since Raxml can now handle mixed Amino Acid and DNA alignments, you must specify the data type in the partition file, before the partition name. For DNA, this means you have to add DNA to each line in the partition. For AA data you must specify the transition matrices for each partition: 
The AA substitution model must be the first entry in each line and must be separated by a comma from the gene name, just like the DNA token above. You can not assign different models of rate heterogeneity to different partitions, i.e. it will be CAT or CATI. for all partitions. Finally, if you have a concatenated DNA and AA alignments, with DNA data at positions 1 - 500 and AA data at 501-1000 with the WAG model the partition file should look as follows: DNA, gene1 = 1-500; WAG, gene2 = 501-1000. For more help see http://phylobench.vital-it.ch/raxml-bb/index.php?help=model.
</value>
							</comment>
						</attributes>
					</parameter> -->

	<!-- outgroup (-o) -->
<!--					<parameter type="String" issimple="1">
						<name>outgroup</name>
						<attributes>
							<prompt>Outgroup (one or more comma-separated outgroups, see comment for syntax)</prompt>
							<format>
								<language>perl</language>
								<code>(defined $value)? " -o $value " : "" </code>
							</format>
							<group>10</group>
							<comment>
<value>The correct syntax for the box is outgroup1,outgroup2,outgroupn. If white space is introduced (e.g. outgroup1, outgroup2, outgroupn) the program will fail with the message
"Error, you must specify a model of substitution with the '-m' option"
</value>					
							</comment>
						</attributes>
					</parameter> -->
<!-- constraint (-g) -->
		
<!--					<parameter type="InFile" issimple="1">
						<name>constraint</name>
						<attributes>
							<precond>
								<language>perl</language>
								<code>!defined $binary_backbone</code>
							</precond>
							<prompt>Constraint (-g)</prompt>
							<filenames>constraint.tre</filenames>
							<format>
								<language>perl</language>
					 
						parameters of type Results are always processed so we need to check
						whether we actually got a value entered.
					
								<code>(defined $value) ? "-g constraint.tre" : ""</code>
							</format>
							<group>2</group>
							<comment>
<value> This option allows you to specify an incomplete or comprehensive multifurcating constraint tree for the RAxML
search in NEWICK format. Initially, multifurcations are resolved randomly. If the tree is incomplete (does not contain
all taxa) the remaining taxa are added by using the MP criterion. Once a comprehensive (containing all taxa) bifurcating
tree is computed, it is further optimized under ML respecting the given constraints. Important: If you specify a 
non-comprehensive constraint, e.g., a constraint tree that does not contain all taxa, RAxML will assume that any taxa
that not found in the constraint topology are unconstrained, i.e., these taxa can be placed in any part of the tree.  As
an example consider an alignment with 10 taxa: Loach, Chicken, Human, Cow, Mouse, Whale, Seal, Carp, Rat, Frog.  If, for
example you would like Loach, Chicken, Human, Cow to be monophyletic you would specify the constraint tree as follows: </value>
<value> ((Loach, Chicken, Human, Cow),(Mouse, Whale, Seal, Carp, Rat, Frog)); </value>
<value> Moreover, if you would like Loach, Chicken, Human, Cow to be monophyletic and in addition Human, Cow to be 
monophyletic within that clade you could specify: </value>
<value> ((Loach, Chicken, (Human, Cow)),(Mouse, Whale, Seal, Carp, Rat, Frog)); </value>
<value> If you specify an incomplete constraint: </value>
<value> ((Loach, Chicken, Human, Cow),(Mouse, Whale, Seal, Carp)); </value>
<value> the two groups Loach, Chicken, Human, Cow and Mouse, Whale, Seal, Carp will be monophyletic, while Rat and Frog can
end up anywhere in the tree.</value>
							</comment>
						</attributes>
					</parameter> -->

<!-- user supplied starting tree (-t) -->		
<!--					<parameter issimple="1" type="InFile">
						<name>treetop</name>
						<attributes>
							<prompt>Supply a comprehensive starting tree (Must contain all taxa) (-t)</prompt>
						<precond>
								<language>perl</language>
								<code>!$bootstrap_seed</code>
							</precond>
							<format>
								<language>perl</language>
								<code>" -t start_tree.tre"</code>
							</format>
							<group>2</group>
							<filenames>start_tree.tre</filenames>
							<ctrls>
								<ctrl>
									<message>Sorry, you can't specify a random seed AND supply a starting tree</message>
									<language>perl</language>
									<code>defined $value &amp;&amp; $provide_parsimony_seed</code>
								</ctrl>
							</ctrls> 
							<comment>
<value>Specifies a user starting tree file in Newick format. .</value>
							</comment>
						</attributes>
					</parameter> -->

<!-- category (-c) -->
<!--					<parameter type="Integer" issimple="1" ismandatory="1">
						<name>number_cats</name>
						<attributes>
							<prompt>Specify the number of distinct rate categories (-c)</prompt>
							<format>
								<language>perl</language>
								<code>(defined $value)? " -c $value" : "" </code>
							</format>
							<vdef>
								<value>25</value>
							</vdef>
							<group>2</group>
							<precond>
								<language>perl</language>
								<code>($datatype eq "dna" &amp;&amp; $dna_model eq "GTRCAT" ) || ($datatype eq "protein" &amp;&amp; $prot_sub_model eq "PROTCAT"))</code>
							</precond>
							<comment>
					<value>This option allows you to specify the number of distinct rate categories, into which the individually optimized rates for each individual site are thrown under -m GTRCAT. The default of -c 25 works fine in most practical cases.
</value>
							</comment>
						</attributes>
					</parameter> -->
		
		
<!-- Choose the model for the run  -->
		<!-- is it protein or dna input ? -->
		<!--			<parameter type="Excl" issimple="1" ismandatory="1">
						<name>datatype</name>
						<attributes>
							<prompt>Sequence Type</prompt>
							<vlist>
								<value>protein</value>
								<label>Protein</label>
								<value>dna</value>
								<label>Nucleotide</label>
							</vlist>
							<vdef>
								<value>dna</value>
							</vdef>
							<group>2</group>
						</attributes>
					</parameter> -->
<!-- Estimate proportion of invariable sites, mlsearch is a precondition  -->
<!-- The control should be of type switch, but I need the value of the parameter to be either "I" or "", 
	 so I made it type Excl instead. -->
		<!-- enabled 1/20/2010 based on its inclusion in the black box -->
				 
<!-- Set the model for Nucleotide sequences  -->
<!--					<parameter type="Excl" issimple="1">
						<name>dna_model</name>
						<attributes>
							<prompt>Model for Tree Inference with DNA data (-m)</prompt>
							<format>
								<language>perl</language>
								<code>"-m $value"</code>
							</format>
							<vlist>
								<value>GTRCAT</value>
								<label>GTRCAT</label>
								<value>GTRGAMMA</value>
								<label>GTRGAMMA</label>
							</vlist>
							<group>2</group>
							<precond>
								<language>perl</language>
								<code>$datatype eq "dna"</code>
							</precond>
							<comment>
<value>The GTRCAT option specifies: GTR + Optimization of substitution rates + Optimization of site-specific evolutionary rates
which are categorized into numberOfCategories distinct rate categories for greater computational
efficiency. The GTRGAMMA option specifies: GTR + GAMMA model of rate heterogeneity. This uses 
4 hard-coded discrete rates to discretize the GAMMA distribution.</value>
							</comment>
						</attributes>
					</parameter>	-->
					

<!--   AMINO ACIDS:

"-m PROTCATmatrixName[F]": specified AA matrix + Optimization of substitution rates + Optimization of site-specific
	evolutionary rates which are categorized into numberOfCategories distinct rate categories for greater computational efficiency.

"-m PROTGAMMAmatrixName[F]": specified AA matrix + GAMMA model of rate heterogeneity. This uses 4 hard-coded discrete
	rates to discretize the GAMMA distribution.

With the optional "F" appendix you can specify if you want to use empirical base frequencies 
Please note that for partitioned models you can specify the per-gene/per-partition AA model in the mixed model file 
	(see standard RAxML manual for details). 
Also note that, if you estimate AA GTR parameters on a partitioned dataset, they will be linked (estimated jointly) 
across all partitions to avoid over-parametrization.
 -->
   
<!-- cat is the default in black box -->             		
<!--					<parameter type="Excl" ishidden="1" issimple="1">
						<name>prot_sub_model</name>
						<attributes>
							<precond>
								<language>perl</language>
								<code>$datatype eq "protein"</code>
							</precond>
							<format>
								<language>perl</language>
								<code>"-m $value$prot_matrix_spec$empirical"</code>
							</format>
							<vlist>
								<value>PROTCAT</value>
								<label>PROTCAT</label>
								<value>PROTGAMMA</value>
								<label>PROTGAMMA</label>
							</vlist>
							<group>2</group>
						</attributes>
					</parameter> -->
		
<!--Available AA substitution models: DAYHOFF, DCMUT, JTT, MTREV, WAG, RTREV, CPREV, VT, BLOSUM62, MTMAM, LG, MTART, 
	MTZOA, PMB, HIVB, HIVW, JTTDCMUT, FLU, AUTO, GTR
-->		
<!--						<parameter type="Excl" ismandatory="1" issimple="1">
						<name>prot_matrix_spec</name>
						<attributes>
							<prompt>Protein Substitution Matrix</prompt>
							<precond>
								<language>perl</language>
								<code>$datatype eq "protein"</code>
							</precond>
							<vlist>
								<value>DAYHOFF</value>
								<label>DAYHOFF</label>
								<value>DCMUT</value>
								<label>DCMUT</label>
								<value>JTT</value>
								<label>JTT</label>
								<value>MTREV</value>
								<label>MTREV</label>
								<value>WAG</value>
								<label>WAG</label>
								<value>RTREV</value>
								<label>RTREV</label>
								<value>CPREV</value>
								<label>CPREV</label>
								<value>VT</value>
								<label>VT</label>
								<value>BLOSUM62</value>
								<label>BLOSUM62</label>
								<value>MTMAM</value>
								<label>MTMAM</label>
								<value>LG</value>
								<label>LG</label>
								<value>MTART</value>
								<label>MTART</label>
								<value>MTZOA</value>
								<label>MTZOA</label>
								<value>PMB</value>
								<label>PMB</label>
								<value>HIVB</value>
								<label>HIVB</label>
								<value>HIVW</value>
								<label>HIVW</label>
								<value>JTTDCMUT</value>
								<label>JTTDCMUT</label>
								<value>FLU</value>
								<label>FLU</label>
								<value>AUTO</value>
								<label>AUTO</label>
								<value>GTR</value>
								<label>GTR</label>
							</vlist>
							<vdef>
								<value>JTT</value>
							</vdef>
							<ctrls>
								<ctrl>
									<message>Sorry, you cannot use the "AUTO" option with a partitioned dataset</message>
									<language>perl</language>
									<code>$value = "AUTO" &amp;&amp; defined $partition</code>
								</ctrl>		
							</ctrls> -->
<!--The AUTO ?model? is a new option (as of RAxML-Light v1.0.2) that will automatically determine the best (with respect to the 
	likelihood) protein substitution matrix. Essentially, every time RAxML re-estimates the model parameters during the tree search,
	it will loop over all protein substitution models (DAYHOFF, DCMUT, ..., FLU) except GTR and just use the model that yields the
	best likelihood. WARNING: AUTO should currently not be used for partitioned datasets, we have not figured out yet what the best
	way to determine this is, especially when branch lengths are jointly estimated across partirtions. AUTO also can be called in two
	flavors AUTO and AUTOF (using empirical base frequencies instead of the pre-defined ones). Typically you would want to use
	AUTOF since the likelihood scores will be better.-->
							
<!--							<comment>
<value>Note: FLOAT and invariable sites (I) options are not exposed here. If you require this option, please contact mmiller@sdsc.edu.</value>
<value>-m PROTCATmatrixName[F] uses the specified AA matrix + Optimization of substitution rates + Optimization of site-specific 
	evolutionary rates which are categorized into numberOfCategories distinct rate categories for greater computational efficiency.
</value>
<value>-m PROTGAMMAmatrixName[F] uses the specified AA matrix + GAMMA model of rate heterogeneity. This uses 4 hard-coded discrete rates to discretize the GAMMA distribution.
</value>
<value>Available AA substitution models: DAYHOFF, DCMUT, JTT, MTREV, WAG, RTREV, CPREV, VT, BLOSUM62, MTMAM, LG, MTART, MTZOA, PMB,
	HIVB, HIVW, JTTDCMUT, FLU, AUTO, GTR. With the optional "F" appendix you can specify if you want to use empirical base
	frequencies.</value>
<value> AUTO should currently not be used for partitioned datasets, we have not figured out yet what the best
way to determine this is, especially when branch lengths are jointly estimated across partitions. AUTO also can be called in two
flavors AUTO and AUTOF (using empirical base frequencies instead of the pre-defined ones). Typically you would want to use
AUTOF since the likelihood scores will be better.</value>
							</comment>
						</attributes>
					</parameter> -->

<!-- Empirical Base Frequencies -->
<!-- datatype=protein is a precondition, adds -F to end of -m model string; switch isnt used because it adds a 0! -->		
<!--		<parameter issimple="1" type="Excl" ismandatory="1">
			<name>empirical</name>
			<attributes>
				<prompt>Use empirical base frequencies?</prompt>
				<precond>
					<language>perl</language>
					<code>$datatype eq "protein"</code>
				</precond>
				<vlist>
					<value>F</value>
					<label>yes</label>
					<value></value>
					<label>no</label>
				</vlist>
				<vdef>
					<value></value>
				</vdef>
				<group>2</group>
				<comment>
<value>The empirical base frequency command is relevant for the protein datatype, and is used as a suffix to the -m model string PROTGAMMA_____
</value>
					
				</comment>
			</attributes>
		</parameter> -->
		
<!-- Regular searches iterations are set by the user; default=20  -->
<!--					<parameter type="String" ismandatory="1">
						<name>num_rsearches</name>
						<attributes>
							<prompt>Number of regular searches to perform (-rsearches)</prompt>
							<format>
								<language>perl</language>
								<code>(defined $value) ? " **rsearches $value " : ""</code>
							</format>
							<vdef>
								<value>20</value>	
							</vdef>
							<ctrls>
								<ctrl>
									<message>Sorry, the value for regular searches must be no more than 100</message>
									<language>perl</language>
									<code>$num_rsearches &gt; 100 </code>
								</ctrl>
							</ctrls>
							<group>4</group>
							<comment>
<value>This parameter sets the number of regular searches. The maximum number of regular searches is 100</value>
							</comment>
						</attributes>
					</parameter> -->
		
<!--      2-searchhours   (max wall time to do boot searches)  -->	
<!--					<parameter type="Integer" ismandatory="1" issimple="1">
						<name>search_hours</name>
						<attributes>
							<prompt>Maximum time for a Search (default = 1 h)</prompt>
							<format>
								<language>perl</language>
								<code>(defined $value) ? " **searchhours $value ":""</code>
							</format>
							<vdef>
								<value>1</value>
							</vdef>
						<ctrls>
								<ctrl>
									<message>Please enter a value for the maximum time for a search (default = 1 h)</message>
									<language>perl</language>
									<code>!defined $search_hours</code>
								</ctrl>
							</ctrls> 
							<group>9</group>
							<comment>
<value>The value enered here sets the maximum wall-clock time in hours for a search. Default is 1 h</value>
							</comment>
						</attributes>
					</parameter> -->
		
<!--      2-parshours   (max wall time to generate parsimony tree)  -->	
<!--					<parameter type="Integer" ismandatory="1" issimple="1">
						<name>pars_hours</name>
						<attributes>
							<prompt>Maximum time to generate first Parsimony Tree</prompt>
							<format>
								<language>perl</language>
								<code>(defined $value) ? " **parshours $value ":""</code>
							</format>
							<vdef>
								<value>1</value>
							</vdef>
						<ctrls>
								<ctrl>
									<message>Please enter a maximum time for the first parsimony tree search (default = 1 h)</message>
									<language>perl</language>
									<code>!defined $rsearch_seed</code>
								</ctrl>
							</ctrls>
							<group>8</group>
						</attributes>
					</parameter> -->
					
<!-- this sets -b, which is user-determined, and by default - 12345 -->
<!--					<parameter type="Integer" ismandatory="1" issimple="1">
						<name>rsearch_seed</name>
						<attributes>
							<prompt>Set seed for Parsimony Tree</prompt>
							<format>
								<language>perl</language>
								<code>(defined $value) ? " -p $value ":""</code>
							</format>
							<vdef>
								<value>12345</value>
							</vdef>
							<group>13</group>
							<comment>
<value>Keeping the same seed value makes the trees comparable between runs.</value>
							</comment>
						</attributes>
					</parameter> -->	
		
<!-- Bootstrap iterations are set by the user; default=100  -->
<!--					<parameter type="String" ismandatory="1">
						<name>num_bsearches</name>
						<attributes>
							<prompt>Number of bootstrap searches to perform (-bsearches)</prompt>
							<format>
								<language>perl</language>
								<code>(defined $value) ? " **bsearches $value " :""</code>
							</format>
							<vdef>
								<value>100</value>	
							</vdef>
							<group>3</group>
							<ctrls>
								<ctrl>
									<message>Sorry, the value of bootstrap searches must be no more than 500</message>
									<language>perl</language>
									<code>$num_bsearches &gt; 500 </code>
								</ctrl>
							</ctrls>
							<comment>
<value>This parameter sets the number of bootstrap searches. The maximum number of searches is 500.</value>
							</comment>
						</attributes>
					</parameter> -->
					
<!-- this sets -b, which is user-determined, and by default - 12345 -->
<!--					<parameter type="String" ismandatory="1" issimple="1">
						<name>bootstrap_seed</name>
						<attributes>
							<prompt></prompt>
							<format>
								<language>perl</language>
								<code>(defined $value) ? " -b $value ":""</code>
							</format>
							<vdef>
								<value>12345</value>
							</vdef>
							<group>12</group>
							<comment>
<value>Keeping the same seed value allows a comparison between runs.</value>
							</comment>
						</attributes>
					</parameter> -->
		
<!-- 2-usebest: use best trees found in bootstrap searches for regular searches on original alignment -->
<!--					<parameter type="Switch">
						<name>usebest</name>
						<attributes>
						<prompt>Use best trees found in bootstrap searches for regular searches on the original sequence alignment (-usebest)</prompt>
						<format>
							<language>perl</language>
							<code> ($value) ? " **usebest ":""</code>
						</format>
						<vdef>
							<value>0</value>
						</vdef>
						<group>7</group>
						<ctrls>
							<ctrl>
								<message>Sorry, to use the -usebest option the number of bootstrap searches must greater than or equal to the number of regular searches</message>
								<language>perl</language>
								<code>$bsearches &lt; $rsearches</code>
							</ctrl>
						</ctrls>
						<comment>
<value>The -usebest option selects the best tree from a set of bootstrap searches to begin regular searches. If this
	 option is not selected (add text here)</value>
						</comment>
						</attributes>
					</parameter> -->

<!-- -I  test for bootstopping convergence -->
<!--					<parameter type="Switch">
						<name>test_convergence</name>
						<attributes>
						<prompt>Test bootstraps for convergence (-I)</prompt>
						<format>
							<language>perl</language>
							<code> ($value) ? " -I ":""</code>
						</format>
						<vdef>
							<value>0</value>
						</vdef>
						<group>14</group>
						<comment>
<value>Add information here</value>
						</comment>
						</attributes>
					</parameter> -->
		
<!-- -n argument to specify output file suffix is required; here we let the user specify -->
<!-- commented out for now, check with wayne to see if it can be used
					<parameter type="String" ishidden="0">
						<name>outsuffix</name>
						<attributes>
						<format>
							<language>perl</language>
							<code>" -n $value"</code>
						</format>
						<group>1</group>
						</attributes>
					</parameter> -->
		
	 	<parameter type="Results">
				<name>all_outputfiles</name>
				<attributes>
					<filenames>*</filenames>
				</attributes>
			</parameter>		
	</parameters>
</pise>
