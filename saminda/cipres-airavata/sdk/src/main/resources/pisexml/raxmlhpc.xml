<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE pise SYSTEM "http://www.phylo.org/dev/rami/PARSER/pise.dtd">
<!--
	The new file created here is designed to permit a complete configuration of RAXML using all 
	command line parameters.  Doing an ML analysis after the bootstrap is optional. The default 
	settings will run the program under its "black box" settings.

	Note: values must be passed in for invariable, empirical, dna, and matrix, even if the precond 
	prevents them from being set, even when the default value is the empty string.  For example, 
	if we're passed invariable = empty string, then the format code for the model parameter is OK, 
	but if we are passed a parameter map that doesn't include invariable, when PiseCommandRenderer. 
	restituteFormat tries to replace variables for model's code and it finds a reference to a parameter 
	that doesn't exist it clobbers the whole code string.
-->
<!--

This interface evolved from the RAxML-VI-HPC version 7.0.4 interface  

These options are supported as of 1/28/2009:
	
	########################### required parameters#######################t (1/29/2009)


    -n      Specifies the name of the output file. We provide this.

    -s      Specify the name of the alignment data file in PHYLIP format. We provide this.
	
	-m   Model of Nucleotide or Amino Acid Substitution: 

         NUCLEOTIDES:

         "-m GTRCAT"                      : GTR + Optimization of substitution rates + Optimization of site-specific
                                            evolutionary rates which are categorized into numberOfCategories distinct 
                                            rate categories for greater computational efficiency
                                            if you do a multiple analysis with  "-#" but without bootstrapping the program
                                            will use GTRMIX instead
	
         "-m GTRGAMMA"                    : GTR + Optimization of substitution rates + GAMMA model of rate 
                                            heterogeneity (alpha parameter will be estimated)
	
         "-m GTRMIX"                      : Inference of the tree under GTRCAT
                                            and thereafter evaluation of the final tree topology under GTRGAMMA
	
         "-m GTRCAT_GAMMA"                : Inference of the tree with site-specific evolutionary rates.
                                            However, here rates are categorized using the 4 discrete GAMMA rates.
                                            Evaluation of the final tree topology under GTRGAMMA
	
         "-m GTRGAMMAI"                   : Same as GTRGAMMA, but with estimate of proportion of invariable sites  
	
         "-m GTRMIXI"                     : Same as GTRMIX, but with estimate of proportion of invariable sites 
	
         "-m GTRCAT_GAMMAI"               : Same as GTRCAT_GAMMA, but with estimate of proportion of invariable sites 

        AMINO ACIDS:

         "-m PROTCATmatrixName[F]"        : specified AA matrix + Optimization of substitution rates + Optimization of site-specific
                                            evolutionary rates which are categorized into numberOfCategories distinct 
                                            rate categories for greater computational efficiency
                                            if you do a multiple analysis with  "-#" but without bootstrapping the program
                                            will use PROTMIX... instead
	
         "-m PROTGAMMAmatrixName[F]"      : specified AA matrix + Optimization of substitution rates + GAMMA model of rate 
                                            heterogeneity (alpha parameter will be estimated)
	
         "-m PROTMIXmatrixName[F]"        : Inference of the tree under specified AA matrix + CAT and thereafter evaluation of the final tree
											topology under specified AA matrix + GAMMA
	
         "-m PROTCAT_GAMMAmatrixName[F]"  : Inference of the tree under specified AA matrix and site-specific evolutionary rates.
                                            However, here rates are categorized using the 4 discrete GAMMA rates.
                                            Evaluation of the final tree topology under specified AA matrix + GAMMA
	
         "-m PROTGAMMAImatrixName[F]"     : Same as PROTGAMMAmatrixName[F], but with estimate of proportion of invariable sites

         "-m PROTMIXImatrixName[F]"       : Same as PROTMIXmatrixName[F], but with estimate of proportion of invariable sites 
	
         "-m PROTCAT_GAMMAImatrixName[F]" : Same as PROTCAT_GAMMAmatrixName[F], but with estimate of proportion of invariable sites 

   Available AA substitution models: DAYHOFF, DCMUT, JTT, MTREV, WAG, RTREV, CPREV, VT, BLOSUM62, MTMAM, GTR
   With the optional "F" appendix you can specify if you want to use empirical base frequencies
   Please note that for mixed models you can in addition specify the per-gene AA model in
   the mixed model file (see manual for details)
	
	########################### current optional parameters exposed in the interface ####################### (1/29/2009)

	-f  select algorithm:

         "-f a": rapid Bootstrap analysis and search for best-scoring ML tree in one program run
	otherwise : DEFAULT
	
	-g   Specify the file name of a multifurcating constraint tree this tree does not need to be comprehensive, i.e. must not contain all taxa
	
	-o   Specify the name of a single outgroup or a comma-separated list of outgroups, eg "-o Rat" 
         or "-o Rat,Mouse", in case that multiple outgroups are not monophyletic the first name 
         in the list will be selected as outgroup, don't leave spaces between taxon names!
	
	-p   Specify a random number seed for the parsimony inferences. This allows you and others to reproduce
         your results (reproducible/verifiable experiments) and will help me debug the program. This option HAS NO
         EFFECT in the parallel MPI version.
	
	-q   Specify the file name which contains the assignment of models to alignment partitions for multiple models of substitution.
	     For the syntax of this file please consult the manual.

	-r   Specify the file name of a binary constraint tree. This tree does not need to be comprehensive, i.e. must not contain all taxa

	-x   Specify an integer number (random seed) and turn on rapid bootstrapping
	
	-#   Specify the number of alternative runs on distinct starting trees
         In combination with the "-b" option, this will invoke a multiple bootstrap analysis
		 DEFAULT: 1 single analysis
################################## (exposed on 1/28/2009) ########################################################################
    -b    Specify an integer number (random seed) and turn on bootstrapping DEFAULT: OFF

    -c    Specify number of distinct rate categories for RAxML when modelOfEvolution
            is set to GTRCAT or GTRMIX. Individual per-site rates are categorized into numberOfCategories rate 
            categories to accelerate computations. DEFAULT: 25

    -f      select algorithm:

              "-f b": draw bipartition information on a tree provided with "-t" based on multiple trees
                      (e.g. form a bootstrap) in a file specified by "-z"
              "-f d": new rapid hill-climbing 

    -i      Initial rearrangement setting for the subsequent application of topological 
            changes phase.  DEFAULT: determined by program

    -t      Specify a user starting tree file name in Newick format

    -y      If you want to only compute a parsimony starting tree with RAxML specify "-y",
            the program will exit after computation of the starting tree. DEFAULT: OFF

    -z     Specify the file name of a file containing multiple trees e.g. from a bootstrap that shall be used to 
			draw bipartition values onto a tree provided with "-t", It can also be used to compute per site log 
			likelihoods in combination with "-f g".

##################################(added on 5/5/2009)########################################################################################

I made some changes top grouping, so parameters are written on the command line in the order specified by the manual

	-E 	excludefile specify a range of characters to exclude

###################################(modified 8/3/2009)#######################################################################################
made the parsimony seed option invalid when the -y option is in force. 

##################################(added on 9/1/2009)########################################################################################

I exposed the -f h option in response to a user request	
also reorganized the order of commands to insure that -f commands come first
	
-->
<pise>
	<head>
		<title>RAxML-VI-HPC</title>
		<version>7.0.4</version>
		<description>Phylogenetic tree inference using maximum likelihood/rapid bootstrapping.</description>
		<authors>Alexandros Stamatakis</authors>
		<reference>Stamatakis A. RAxML-VI-HPC: maximum likelihood-based phylogenetic analyses with thousands of 
			taxa and mixed models.Bioinformatics. 2006 Nov 1;22(21):2688-90
		</reference>
		<category>Phylogeny / Alignment</category>
		<doclink>http://icwww.epfl.ch/~stamatak/index-Dateien/countManual7.0.0.php  </doclink>
	</head>
	<command>raxmlhpc</command>
	<parameters>
		<!-- command name -->
		<parameter ishidden="1" type="String">
			<name>raxmlhpc</name>
			<attributes>
				<format>
					<language>perl</language>
					<code>"raxmlHPC"</code>
				</format>
				<group>0</group>
			</attributes>
		</parameter>
		<!-- required input file -->
		<parameter ismandatory="1" issimple="1" isinput="1" type="InFile">
			<name>infile</name>
			<attributes>
				<prompt>Sequences File (relaxed phylip format) (-s)</prompt>
				<format>
					<language>perl</language>
					<code>" -s infile"</code>
				</format>
				<group>5</group>
				<filenames>infile</filenames>
			</attributes>
		</parameter>
		
<!-- -n argument to specify output file suffix is required -->
		<parameter type="String" ishidden="1">
			<name>outsuffix</name>
			<attributes>
				<format>
					<language>perl</language>
					<code>" -n result"</code>
				</format>
				<group>6</group>
			</attributes>
		</parameter> 
		
<!-- catchall to route std out to a log file -->
<!--		<parameter type="String" ishidden="1">
			<name>out_logifle</name>
			<attributes>
				<format>
					<language>perl</language>
					<code>" > output.txt"</code>
				</format>
				<group>99</group>
			</attributes>
		</parameter> -->
		
<!-- visible parameters -->
		
		<parameter type="Excl" issimple="1" ismandatory="1">
			<name>datatype</name>
			<attributes>
				<prompt>Sequence Type</prompt>
				<vlist>
					<value>protein</value>
					<label>Protein</label>
					<value>dna</value>
					<label>DNA</label>
				</vlist>
				<vdef>
					<value>dna</value>
				</vdef>
				<group>10</group>
			</attributes>
		</parameter>
		
<!-- -m argument to specify substitution model is required -->
<!-- mmiller changed the way this is done  I exposed the other nucleic acid model options on 8/3/2009 -->
<!--          "-m GTRCAT"                      : GTR + Optimization of substitution rates + Optimization of site-specific
                                            evolutionary rates which are categorized into numberOfCategories distinct 
                                            rate categories for greater computational efficiency
                                            if you do a multiple analysis with  "-#" but without bootstrapping the program
                                            will use GTRMIX instead
	
         "-m GTRGAMMA"                    : GTR + Optimization of substitution rates + GAMMA model of rate 
                                            heterogeneity (alpha parameter will be estimated)
	
         "-m GTRMIX"                      : Inference of the tree under GTRCAT
                                            and thereafter evaluation of the final tree topology under GTRGAMMA
	
         "-m GTRCAT_GAMMA"                : Inference of the tree with site-specific evolutionary rates.
                                            However, here rates are categorized using the 4 discrete GAMMA rates.
                                            Evaluation of the final tree topology under GTRGAMMA -->

		<parameter type="Excl" issimple="1" ismandatory="1">
			<name>dna_model</name>
			<attributes>
				<prompt>DNA GTR model (-m)</prompt>
				<precond>
					<language>perl</language>
					<code>$datatype eq "dna"</code>
				</precond> 
				<vlist>
					<value>GTRCAT</value>
					<label>GTRCAT</label>
					<value>GTRGAMMA</value>
					<label>GTRGAMMA</label>
					<value>GTRMIX</value>
					<label>GTRMIX</label>
					<value>GTRCAT_GAMMA</value>
					<label>GTRCAT_GAMMA</label>
				</vlist>
				<vdef>
					<value>GTRGAMMA</value>
				</vdef>
				<format>
					<language>perl</language>
					<code>"-m $value"</code>
				</format>
				<group>10</group>
				<comment>
					<value>The command line delivered specifies the model for DNA data.  The options are as follows: 
					GTRCAT = GTR + Optimization of substitution rates + Optimization of site-specific evolutionary 
					rates which are categorized into numberOfCategories distinct rate categories for greater 
					computational efficiency; GTRGAMMA = GTR + Optimization of substitution rates + GAMMA model 
					of rate heterogeneity (alpha parameter will be estimated); GTRMIX = Inference of the tree under 
					GTRCAT and thereafter evaluation of the final tree topology under GTRGAMMA; GTRCAT_GAMMA = Inference of 
					the tree with site-specific evolutionary rates, where rates are categorized using the 4 discrete 
					GAMMA rates. The program's author supports the use of Gamma models.</value> 
				</comment> 
			</attributes>
		</parameter>
		
		<parameter issimple="1" type="Excl">
			<name>matrix</name>
			<attributes>
				<prompt>Protein Substitution Matrix</prompt>
				<precond>
					<language>perl</language>
					<code>$datatype eq "protein"</code>
				</precond>
				<format>
					<language>perl</language>
					<code>"-m PROTGAMMA$value"</code>
				</format>
				<group>10</group>
				<vlist>
					<value>DAYHOFF</value>
					<label>DAYHOFF</label>
					<value>DCMUT</value>
					<label>DCMUT</label>
					<value>JTT</value>
					<label>JTT</label>
					<value>MTREV</value>
					<label>MTREV</label>
					<value>WAG</value>
					<label>WAG</label>
					<value>RTREV</value>
					<label>RTREV</label>
					<value>CPREV</value>
					<label>CPREV</label>
					<value>VT</value>
					<label>VT</label>
					<value>BLOSUM62</value>
					<label>BLOSUM62</label>
					<value>MTMAM</value>
					<label>MTMAM</label>
				</vlist>
				<vdef>
					<value>DAYHOFF</value>
				</vdef>
				<comment>
					<value>The substitution matrix is relevant for the protein datatype, and is used as a suffix to the -m model 
					string PROTGAMMA_ .  Only the use of GAMMA protein models is supported today, at the request of the developer 
					of RAxML.</value>
				</comment>
			</attributes>
		</parameter> 
		<!-- Parameters with visible controls start here -->
		<!-- is it protein or dna input ? -->

		<!-- outgroup (-o) -->
		<parameter type="String" issimple="1">
			<name>outgroup</name>
			<attributes>
				<prompt>Outgroup (the name of one or more comma separated outgroups)</prompt>
				<format>
					<language>perl</language>
					<code>(defined $value)? " -o '$value' " : "" </code>
				</format>
				<group>10</group>
			</attributes>
		</parameter>
		
		<!--category (-c) -->
		<parameter type="Integer" issimple="1" ismandatory="1">
			<name>number_cats</name>
			<attributes>
				<prompt>Specify the number of distinct rate categories (-c)</prompt>
				<format>
					<language>perl</language>
					<code>(defined $value)? " -c $value" : "" </code>
				</format>
				<vdef>
					<value>25</value>
				</vdef>
				<group>10</group>
				<comment>
					<value>This option allows you to specify the number of distinct rate categories, into which the 
					individually optimized rates for each individual site are thrown under -m GTRCAT. The default of
					-c 25 works fine in most practical cases.</value>
				</comment>
			</attributes>
		</parameter>
		
		<!-- starting tree, repaired 8/6/2009 -->
		<parameter issimple="1" type="InFile">
			<name>treetop</name>
			<attributes>
				<prompt>Supply a starting tree (-t)</prompt>
				<format>
					<language>perl</language>
					<code>" -t start_tree.tre"</code>
				</format>
				<group>2</group>
				<filenames>start_tree.tre</filenames>
				<comment>
					<value>Specifies a user starting tree file in Newick format. Branch lengths of that tree will 
					be ignored. Note that you can also specify a non-comprehensive (not containing all taxa in 
					the alignment) starting tree now. This might be useful if newly aligned/sequenced taxa have been 
					added to your alignment. Initially, taxa will be added to the tree using the MP criterion. 
					The comprehensive tree will then be optimized under ML.</value>
				</comment>
			</attributes>
		</parameter>
					
		<!-- rearrangement (-i) -->
		<parameter type="Switch" issimple="1" ismandatory="1">
			<name>rearrangement_yes</name>
			<attributes>
				<prompt>Specify an initial rearrangement setting (-i)</prompt>
				<vdef>
					<value>0</value>
				</vdef>
			</attributes>
		</parameter>
		<parameter type="Integer" issimple="1" ismandatory="1">
			<name>number_rearrange</name>
			<attributes>
				<prompt>Specify the distance from original pruning point (-i)</prompt>
				<format>
					<language>perl</language>
					<code>(defined $value)? " -i $value" : "" </code>
				</format>
				<vdef>
					<value>10</value>
				</vdef>
				<precond>
					<language>perl</language>
					<code>$rearrangement_yes</code>
				</precond>
				<group>15</group>
				<comment>
					<value>This option allows you to specify an initial rearrangement setting for the initial 
					phase of the search algorithm. If you specify e.g. -i 10; the pruned subtrees will be 
					inserted up to a distance of 10 nodes away from their original pruning point. If you 
					don_t specify -i; a "good" initial rearrangement setting will automatically be determined by RAxML.  </value>
				</comment>
			</attributes>
		</parameter>
		<!-- rev 2 -->
		<!-- constraint (-g) -->
		<parameter type="InFile" issimple="1">
			<name>constraint</name>
			<attributes>
				<precond>
					<language>perl</language>
					<code>! defined $binary_backbone &amp;&amp; !$startingtreeonly</code>
				</precond>
				<prompt>Constraint (-g)</prompt>
				<filenames>constraint.tre</filenames>
				<format>
					<language>perl</language>
					<!-- 
						parameters of type Results are always processed so we need to check
						whether we actually got a value entered.
					-->
					<code>defined $value ? " -g constraint.tre" : ""</code>
				</format>
				<group>15</group>
				<comment>
					<value> This option allows you to specify an incomplete or comprehensive multifurcating constraint 
					tree for the RAxML search in NEWICK format. Initially, multifurcations are resolved 
					randomly. If the tree is incomplete (does not contain all taxa) the remaining taxa are added by 
					using the MP criterion. Once a comprehensive (containing all taxa) bifurcating tree 
					is computed, it is further optimized under ML respecting the given constraints. Important: If you 
					specify a non-comprehensive constraint, e.g., a constraint tree that does not contain all taxa, 
					RAxML will assume that any taxa that not found in the constraint topology 
					are unconstrained, i.e., these taxa can be placed in any part of the tree.  As an example 
					consider an alignment with 10 taxa: Loach, Chicken, Human, Cow, Mouse, Whale, Seal, Carp, 
					Rat, Frog.  If, for example you would like Loach, Chicken, Human, Cow to be monophyletic you 
					would specify the constraint tree as follows: </value>
					<value> ((Loach, Chicken, Human, Cow),(Mouse, Whale, Seal, Carp, Rat, Frog)); </value>
					<value> Moreover, if you would like Loach, Chicken, Human, Cow to be monophyletic and in 
					addition Human, Cow to be monophyletic within that clade you could specify: </value>
					<value> ((Loach, Chicken, (Human, Cow)),(Mouse, Whale, Seal, Carp, Rat, Frog)); </value>
					<value> If you specify an incomplete constraint: </value>
					<value> ((Loach, Chicken, Human, Cow),(Mouse, Whale, Seal, Carp)); </value>
					<value> the two groups Loach, Chicken, Human, Cow and Mouse, Whale, Seal, Carp will be 
					monophyletic, while Rat and Frog can end up anywhere in the tree.  </value>
				</comment>
			</attributes>
		</parameter>
		<!-- binary backbone (-r) -->
		<parameter type="InFile" issimple="1">
			<name>binary_backbone</name>
			<attributes>
				<precond>
					<language>perl</language>
					<code>! defined $constraint</code>
				</precond>
				<prompt>Binary Backbone (-r)</prompt>
				<filenames>binary_backbone.tre</filenames>
				<format>
					<language>perl</language>
					<!-- 
						parameters of type Results are always processed so we need to check
						whether we actually got a value entered.
					-->
					<code>(defined $value) ? " -r binary_backbone.tre" : ""</code>
				</format>
				<group>15</group>
				<comment>
					<value>This option allows you to pass a binary/bifurcating constraint/backbone tree in 
					NEWICK format to RAxML. Note, that using this option only makes sense if this tree 
					contains less taxa than the input alignment. The remaining taxa will initially be 
					added by using the MP criterion. Once a comprehensive tree with all taxa has been 
					obtained it will be  optimized under ML respecting the restrictions of the constraint tree.
					</value>
				</comment>
			</attributes>
		</parameter>
		<!-- Optional mixed  model file -->
		<!-- If user doesn't enter a value the partition parameter won't be in the map that the web app sends 
		the command renderer (which evaluates the perl for parameters that are present), so we don't need 
		to worry about making the format code conditional since this parameter just won't be evaluated.
		Command renderer evaluates 3 types of parameters: 1) those that appear in the map coming from the gui, 
		those that are	hidden, 3) those that are of type OutFile or Result. -->
		<parameter type="InFile" issimple="1">
			<name>partition</name>
			<attributes>
				<prompt>Use a mixed/partitioned model? (-q)</prompt>
				<format>
					<language>perl</language>
					<code>" -q part"</code>
				</format>
				<group>15</group>
				<filenames>part</filenames>
				<comment>
					<value>The multipleModelFileName parameter (-q) allows you to upload a file that specifies the regions 
					of your alignment for which an individual model of nucleotide substitution should be estimated. 
					This will typically be used to infer trees for long (in terms of base pairs) multi-gene 
					alignments. For example, if -m GTRGAMMA is used, individual alpha-shape parameters, GTR-rates, 
					and empirical base frequencies will be estimated and optimized for each partition. Since Raxml can 
					now handle mixed Amino Acid and DNA alignments, you must specify the data type in the partition 
					file, before the partition name. For DNA, this means you have to add DNA to each line in the 
					partition. For AA data you must specify the transition matrices for each partition: 
					The AA substitution model must be the first entry in each line and must be separated by a 
					comma from the gene name, just like the DNA token above. You can not assign different models of 
					rate heterogeneity to different partitions, i.e. it will be either CAT, GAMMA, GAMMAI etc. 
					For all partitions, as specified with -m. Finally, if you have a concatenated DNA and AA alignments, 
					with DNA data at positions 1 - 500 and AA data at 501-1000 with the WAG model the partition file 
					should look as follows: DNA, gene1 = 1-500; WAG, gene2 = 501-1000</value>
				</comment>
			</attributes>
		</parameter>
		<!-- rev 5 -->
		<!-- Estimate proportion of invariable sites, mlsearch is a precondition  -->
		<!-- The control should be of type switch, but I need the value of the parameter to be either "I" or "", so I made 
		it type Excl instead. -->
		<!-- disabled 5/5/2009 based on information in the manual -->
		<parameter issimple="1" type="Excl" ismandatory="1">
			<name>invariable</name>
			<attributes>
				<prompt>Estimate proportion of invariable sites (GTRGAMMA + I) (currently disabled)</prompt>
				<precond>
					<language>perl</language>
					<code>$placeholder</code>
				</precond>
				<vlist>
					<value>I</value>
					<label>yes</label>
					<value/>
					<label>no</label>
				</vlist>
				<vdef>
					<value>0</value>
				</vdef>
				<group>15</group>
				<comment>
					<value>This option is disabled in keeping with the developers best advice.</value>
				</comment>
			</attributes>
		</parameter>
		<!-- Substitution matrix for protein datatype, datatype=protein is a precondition -->
		<!-- Is used to build the -m model string -->
		<!-- A value must be selected when datatype=protein, so I added a vdef, so users wont have a job fail accidentally; 
		this also highlights where the value needs to be set by populating the box with text-->
		<!-- Empirical Base Frequencies -->
		<!-- datatype=protein is a precondition, adds -F to end of -m model string -->

		<!-- Optional excludes these characters -->
		<!-- If user doesn't enter a value, the parameter won't be in the map that the web app sends the command renderer 
		(which evaluates the perl for parameters that are present), so we don't need to worry about making the format code 
		conditional; if null, this parameter just won't be evaluated. Command renderer evaluates 3 types of parameters: 
		1) those that appear in the map coming from the gui, those that are hidden, 3) those that are of type OutFile or Result. -->
		<parameter type="InFile" issimple="1">
			<name>exclude_file</name>
			<attributes>
				<prompt>Create an input file that excludes the range of positions specifed in this file (-E)</prompt>
				<format>
					<language>perl</language>
					<code>" -E excl"</code>
				</format>
				<group>15</group>
				<filenames>excl</filenames>
				<comment>
					<value>This option is used to excludes specific positions in the matrix. For example, uploading a file
					that contains the tesxt: 100-200 300-400 will create a file that excludes all columns between positions
					100 and 200 as well as all columns between positions 300 and 400. Note that the boundary numbers (positions 100, 200, 300, 
					and 400) will also be excluded. To exclude a single column write (100-100). This option does not 
					run an analysis but just prints an alignment file without the excluded columns. Save this file to your 
					data area, and then run the real analysis. If you use a mixed model, an appropriately adapted model file 
					will also be written. The ntax element of the phylip files is automatically corrected Example: raxmlHPC -E excl
						-s infile -m GTRCAT -q part -n TEST. In this case the files with columns excluded will be named
						infile.excl and part.excl. </value>
				</comment>
			</attributes>
		</parameter>
		
		
		<parameter type="Paragraph">
			<paragraph>
				<name>set_analysis</name>
				<prompt>Select the Analysis</prompt>
				<parameters>
					<!-- rev 3 -->
					<!-- added for jbmunro -->
					<parameter type="Switch">
						<name>startingtreeonly</name>
						<attributes>
							<prompt>Only compute a randomized parsimony starting tree (-y)</prompt>
							<format>
								<language>perl</language>
								<code> ($value)?" -y":""</code>
							</format>
							<vdef>
								<value>0</value>
							</vdef>
							<precond>
								<language>perl</language>
								<code>!$mlsearch &amp;&amp; !$bipartitions &amp;&amp; ! defined $constraint &amp;&amp; !$log_likelihood</code>
							</precond>
							<group>15</group>
							<comment>
								<value>If you want to only compute a randomized parsimony starting tree with RAxML and not execute an ML 
								analysis of the tree specify -y. The program will exit after computation of the starting tree. This 
								option can be useful if you want to assess the impact of randomized MP and Neighbor Joining starting trees 
								on your search algorithm. They can also be used e.g. as starting trees for Derrick Zwickls GARLI program for 
								ML inferences, which needs comparatively good starting trees to work well above approximately 500 taxa. </value>
							</comment>
						</attributes>
					</parameter>
					<!-- added for jbmunro -->
					<!-- -f d:	DEFAULT, RAxML will execute the new (as of version 2.2.1) and significantly faster rapid hill-climbing algorithm [3]. -->
					<!-- added for jbmunro -->
<!--	not needed, defaultn condition
				<parameter type="Switch">
						<name>hillclimb</name>
						<attributes>
							<prompt>Use the new, faster rapid hill-climbing algorithm (-f d)</prompt>
							<format>
								<language>perl</language>
								<code> ($value)?" -f d ":""</code>
							</format>
							<vdef>
								<value>1</value>
							</vdef>
							<group>1</group>
							<precond>
								<language>perl</language>
								<code>!$mlsearch &amp;&amp; !$bipartitions &amp;&amp; !$startingtreeonly &amp;&amp; !$log_likelihood</code>
							</precond>
							<comment>
								<value>This is the deault option. RAxML will execute the new (as of version 2.2.1) and significantly 
								faster rapid hill-climbing algorithm</value>
							</comment>
						</attributes>
					</parameter> -->
					
					<!-- added for jbmunro -->
					<parameter type="Switch">
						<name>bipartitions</name>
						<attributes>
							<prompt>Draw bipartitions onto a single tree topology. (-f b)</prompt>
							<format>
								<language>perl</language>
								<code> ($value)?" -f b ":""</code>
							</format>
							<vdef>
								<value>0</value>
							</vdef>
							<group>1</group>
							<precond>
								<language>perl</language>
								<code>!$startingtreeonly &amp;&amp; !$log_likelihood &amp;&amp; !$mlsearch</code>
							</precond>
							<ctrls>
								<ctrl>
									<message>To use the -f b option you must specify a best tree with "-t" and file containing multiple trees with the "-z" option</message>
									<language>perl</language>
									<code>$bipartitions &amp;&amp; ( !defined $bunchotops || !defined $treetop)</code>
									</ctrl>
							</ctrls>
							<comment>
								<value>When this is specified, RAxML draws the bipartitions using a bunch of topologies 
								(typically boot-strapped trees) specified with -z onto a single tree topology specified 
								by -t (typically the best-scoring ML tree). </value>
							</comment>
						</attributes>
					</parameter>

<!-- -f h:	RAxML will compute a log likelihood test (SH-test [21]) between a best tree passed via -t and a bunch of 
other trees passed via -z. Example: raxmlHPC -f h -t ref -z trees -s alg -m GTRGAMMA -n TEST. -->
<!-- added for Ryan Lower  raxmlHPC   -->
					<parameter type="Switch">
						<name>log_likelihood</name>
						<attributes>
							<prompt>Compute a log likelihood test (-f h)</prompt>
							<format>
								<language>perl</language>
								<code> ($value)?" -f h ":""</code>
							</format>
							<vdef>
								<value>0</value>
							</vdef>
							<group>1</group>
						<precond>
								<language>perl</language>
								<code>!$startingtreeonly &amp;&amp; !$mlsearch &amp;&amp; !$bipartitions</code>
							</precond>
							<ctrls>
								<ctrl>
									<message>To use the -f h option you must specify a best tree with "-t" and file containing multiple trees with the "-z" option</message>
									<language>perl</language>
									<code>$log_likelihood &amp;&amp; (!defined $bunchotops || !defined $treetop)</code>
									</ctrl>
							</ctrls>
							<comment>
								<value>When this is specified,  RAxML will compute a log likelihood test (SH-test [21]) between a best 
								tree passed via -t and a bunch of other trees passed via -z. Example: raxmlHPC -f h -t ref -z trees 
								-s alg -m GTRGAMMA -n TEST.. </value>
							</comment>
						</attributes>
					</parameter>
					
					<!-- added for jbmunro -->
					<parameter type="InFile">
						<name>bunchotops</name>
						<attributes>
							<prompt>File with topologies for bipartitions. (-z)</prompt>
							<format>
								<language>perl</language>
								<code>(defined $value)? " -z topologies_file.tre" : "" </code>
							</format>
							<group>2</group>
							<filenames>topologies_file.tre</filenames>
							<precond>
								<language>perl</language>
								<code>$bipartitions || $log_likelihood &amp;&amp; !$startingtreeonly</code>
							</precond>
							<ctrls>
								<ctrl>
									<message>You must specify a starting tree (via the -t option above) to use this option</message>
									<language>perl</language>
									<code>! defined $treetop</code>
								</ctrl>
							</ctrls> 
							<comment>
								<value>The -z option is used in combination with the -f b,-f h,-f m,-f n options. The uploaded file 
								should contain a number of trees in NEWICK format.  The file should contain one tree per line 
								without blank lines between trees. For example, you can directly read in a RAxML bootstrap result 
								file.  </value>
							</comment>
						</attributes>
					</parameter>
					<!-- added for jbmunro -->

				</parameters>
			</paragraph>
		</parameter>
		<!-- rev 4 -->
		<!-- rev 4 -->
		<parameter type="Paragraph">
			<paragraph>
				<name>bootstrap_config</name>
				<prompt>Configure Bootstrapping</prompt>
				<parameters>
					<!--add for jbmunro-->
					<!-- I split the seeds  into invocation, and number entry, due to command line conflicts -->
					<parameter type="Switch" ismandatory="1">
						<name>mulparambootstrap_seed</name>
						<attributes>
							<prompt>Conduct Multiparametric Bootstrapping? (-b)</prompt>
							<vdef>
								<value>0</value>
							</vdef>
							<precond>
								<language>perl</language>
								<code>!$bootstrap_seed &amp;&amp; !$startingtreeonly &amp;&amp; !$mlsearch</code>
							</precond>
							<comment>
								<value>This option allows you to turn on non-parametric bootstrapping. To allow for reproducibility of 
								runs in the sequential program, you have to specify a random number seed.  Note however, that parallel 
								bootstraps are not reproducible if you do not provide a fixed starting tree with -t or a parsimony 
								random seed via -p.  </value>
							</comment>
						</attributes>
					</parameter>
					
					<parameter type="Integer" ismandatory="1">
						<name>mulparambootstrap_seed_val</name>
						<attributes>
							<prompt>Enter a random seed value for multi-parametric bootstrapping</prompt>
							<format>
								<language>perl</language>
								<code>($value) ? " -b $value" : ""</code>
							</format>
							<vdef>
								<value>12345</value>
							</vdef>
							<precond>
								<language>perl</language>
								<code>$mulparambootstrap_seed</code>
							</precond>
							<group>15</group>
							<comment>
								<value>This random number is provided to assure that there is comparability between runs.  </value>
							</comment>
						</attributes>
					</parameter>
					<!--add for jbmunro-->
					<!-- I split the seeds  into invocation, and number entry, due to command line conflicts -->
					<parameter type="Switch" ismandatory="1">
						<name>bootstrap_seed</name>
						<attributes>
							<prompt>Conduct rapid bootstrapping? (-x)</prompt>
							<vdef>
								<value>0</value>
							</vdef>
							<precond>
								<language>perl</language>
								<code>!$mulparambootstrap_seed  &amp;&amp; !$startingtreeonly</code>
							</precond> 
							<comment>
								<value>This option offers a novel rapid Bootstrapping algorithm that is faster by at least one 
								order of magnitude than all other current implementations (RAxML 2.2.3, GARLI, PHYML).  The 
								results obtained are qualitatively comparable to those obtained via the standard RAxML BS 
								algorithm and, more importantly, the deviations in support values between the rapid and the 
								standard RAxML BS algorithm are smaller than those induced by using a different search strategy, 
								e.g. GARLI or PHYML. This rapid BS search can be combined with a rapid ML search on the 
								original alignment and thus allows users to conduct a full ML analysis within one single program run.</value>
							</comment>
						</attributes>
					</parameter>

					<parameter type="Integer" ismandatory="1">
						<name>bootstrap_seed_val</name>
						<attributes>
							<prompt>Enter a random seed value for rapid bootstrapping</prompt>
							<format>
								<language>perl</language>
								<code>($value) ? " -x $value" : ""</code>
							</format>
							<vdef>
								<value>12345</value>
							</vdef>
							<group>15</group>
							<precond>
								<language>perl</language>
								<code>$bootstrap_seed &amp;&amp; !$mulparambootstrap_seed  &amp;&amp; !$startingtreeonly</code>
							</precond>
							<comment>
								<value>This random number is provided to assure that there is comparability between runs.</value>
							</comment>
						</attributes>
					</parameter>
					<!-- rev 6 -->
					<!-- Do maximum likelihood search after bootstrap -->

					<parameter type="Switch">
						<name>mlsearch</name>
						<attributes>
							<prompt>Conduct a rapid Bootstrap analysis and search for the best-scoring ML tree in one single program 
							run. (-f a)</prompt>
							<format>
								<language>perl</language>
								<code> ($value)?" -f a ":""</code>
							</format>
							<vdef>
								<value>0</value>
							</vdef>
							<group>15</group>
							<comment>
								<value>Tell RAxML to conduct a Rapid Bootstrap analysis (-x) and search for the best-scoring ML 
								tree in one single program run.</value>
							</comment>
							<precond>
								<language>perl</language>
								<code>!$bipartitions &amp;&amp; !$startingtreeonly &amp;&amp; $bootstrap_seed</code>
							</precond>
						</attributes>
					</parameter>

					<!-- rev 3 -->
					<!-- -p 12345 is required by default, otherwise the command line fails. This setup allows the user to specify a 
					different seed, however.	-->

					<!--add for jbmunro-->
					<!-- I split the seeds  into invocation, and number entry, due to command line conflicts -->
					<parameter type="Switch" ismandatory="1">
						<name>provide_parsimony_seed</name>
						<attributes>
							<prompt>Specify a random seed value for parsimony inferences</prompt>
							<vdef>
								<value>0</value>
							</vdef>
							<precond>
								<language>perl</language>
								<code>!$startingtreeonly</code>
							</precond>
							<comment>
								<value>Specify a random number seed. The -p option allows you and others to reproduce your results 
								(reproducible/verifiable experiments) and will help Alexis debug the program. Do not use this option 
								if you want to generate multiple different starting trees.</value>
							</comment>
						</attributes>
					</parameter>

					<parameter type="Integer" ismandatory="1">
						<name>parsimony_seed_val</name>
						<attributes>
							<prompt>Enter a random seed value for parsimony inferences</prompt>
							<format>
								<language>perl</language>
								<code>($value) ? " -p $value" : ""</code>
							</format>
							<vdef>
								<value>12345</value>
							</vdef>
							<group>15</group>
							<precond>
								<language>perl</language>
								<code>$provide_parsimony_seed</code>
							</precond>
						</attributes>
					</parameter>
					
<!--	I replaced this with a split inference, so the parsimony tree alone will work ok.  
				<parameter type="Integer" ismandatory="1">
						<name>parsimony_seed_val</name>
						<attributes>
							<prompt>Specify a random number seed for the parsimony inferences.</prompt>
							<format>
								<language>perl</language>
								<code>"-p $value"</code>
							</format>
							<vdef>
								<value>12345</value>
							</vdef>
							<group>2</group>
							<comment>
								<value>A Maximum Parsimony starting tree is constructed if no user-defined tree is provided. This 
								random number is provided to assure that there is comparability between runs by keeping a consistent 
								starting tree.  </value>
							</comment>
						</attributes>
					</parameter> -->
					
					<!-- I split the seeds  into invocation and number entry, due to command line conflicts -->
					<!-- rev 6 -->
					<!-- Bootstrap iterations, either 100 or auto -->
					<!-- I split the seeds  into invocation, and number entry, due to command line conflicts -->
					<parameter type="Switch" ismandatory="1">
						<name>specify_bootstraps</name>
						<attributes>
							<prompt>Specify the number of bootstraps? (no = auto)</prompt>
							<vdef>
								<value>0</value>
							</vdef>
							<format>
								<language>perl</language>
<!-- The # seems to need to be quoted to prevent the shell from	treating it as a comment character, when we pass the command to ssh. Double up the quote so perl passes it on. 
								-->
								<code>($value) ? " -\\# $bootstop ":"-\\# auto"</code>
							</format>
							<precond>
								<language>perl</language>
								<code>$bootstrap_seed || $mulparambootstrap_seed</code>
							</precond>
						</attributes>
					</parameter>
					<parameter type="Integer" ismandatory="1">
						<name>bootstop</name>
						<attributes>
							<prompt>Bootstrap iterations (-#)</prompt>
							<vdef>
								<value>100</value>
							</vdef>
							<precond>
								<language>perl</language>
								<code>$specify_bootstraps &amp;&amp; !$startingtreeonly</code>
							</precond>
							<group>15</group>
							<comment>
								<value>Specifies the number of alternative runs on distinct starting trees. If 10, RAxML computes 10 
								distinct ML trees starting from 10 distinct randomized maximum parsimony starting trees. In combination 
								with the Random seed for rapid bootstrap (-x) invoke a rapid BS analysis.  </value>
							</comment>
						</attributes>
					</parameter>
				</parameters>
			</paragraph>
		</parameter>
		
		<!-- When we're done with raxml, run consense on the bootstrapped trees to produce
		a file with a consense tree in "outtree".  A file named outfile is also produced
		by we don't want to return it to the user.
		-->

				
<!-- return all results files -->
<!-- all results are returned in one command today, so we cna allow users to name their runs. we cna change this in the future by uncommenting,
but it will remove the ability of the outputfile extension to be chosen by the user. -->

		<parameter type="Results">
			<name>all_commandline</name>
			<attributes>
				<filenames>COMMANDLINE</filenames>
			</attributes>
		</parameter>

		<parameter type="Results">
			<name>input_matrix</name>
			<attributes>
				<filenames>infile</filenames>
			</attributes>
		</parameter>
				
		<parameter type="Results">
			<name>input_starting_tree</name>
			<attributes>
				<filenames>start_tree.tre</filenames>
			</attributes>
		</parameter>
		
		<parameter type="Results">
			<name>input_topologies</name>
			<attributes>
				<filenames>topologies_file.tre</filenames>
			</attributes>
		</parameter>
	
		<parameter type="Results">
			<name>input_partition</name>
			<attributes>
				<filenames>part</filenames>
			</attributes>
		</parameter>
		
		<parameter type="Results">
			<name>input_constraint</name>
			<attributes>
				<filenames>constraint.tre</filenames>
			</attributes>
		</parameter>
		
		<parameter type="Results">
			<name>input_binary_backbone</name>
			<attributes>
				<filenames>binary_backbone.tre</filenames>
			</attributes>
		</parameter>	
	
		<parameter type="Results">
			<name>input_exclude</name>
			<attributes>
				<filenames>excl</filenames>
			</attributes>
		</parameter>		
		
	<!-- this element can bring back every file named by the parameter -n result -->


		
		<!-- output files from raxml -->
			

		<parameter type="Results"> 
			<name>results_files</name>
			<attributes>
				<filenames>*.result</filenames>
			</attributes>
		</parameter> 

		<parameter type="Results">
			<name>results_files_reduced</name>
			<attributes>
				<filenames>*.reduced</filenames>
			</attributes>
		</parameter>
		
		<parameter type="Results">
			<name>results_files_exclude</name>
			<attributes>
				<filenames>*.excl</filenames>
			</attributes>
		</parameter>
		
<!--		<parameter type="OutFile">
			<name>txt_results</name>
			<attributes>
				<filenames>*.txt</filenames>
			</attributes>
		</parameter> -->
						
		<parameter type="Results">
			<name>results_thresh</name>
			<attributes>
				<filenames>*.threshold</filenames>
			</attributes>
		</parameter> 
		
		
<!--comment in for checkpointing
		<parameter type="Results">
			<name>checkpoint_number</name>
			<attributes>
				<filenames>*.$exampleRun.$thresholdnumber</filenames>
			</attributes>
		</parameter>  -->
		
<!-- you need this if you implement 	checkpointing 	
		<parameter type="OutFile">
			<name>checkpoint_results</name>
			<attributes>
				<filenames>*.checkpointnumber</filenames>
			</attributes>
		</parameter> -->
				
		
	</parameters>
</pise>
