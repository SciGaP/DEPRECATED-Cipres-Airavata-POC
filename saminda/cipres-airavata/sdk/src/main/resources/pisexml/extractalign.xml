<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE pise SYSTEM "http://www.phylo.org/dev/rami/PARSER/pise.dtd">

<pise>
	<head>
		<title>Extractalign</title>
		<version>Emboss 6.0.0</version>
		<description>Extract a region from a sequence alignment</description>
		<authors>Gary Williams</authors>
		<reference>P. Rice, I. Longden, and A. Bleasby EMBOSS: The European Molecular Biology Open Software Suite (2000) Trends in Genetics 16(6) 276--277</reference>
		<category>Nucleic Acid Sequence, Protein Sequence</category>
		<doclink></doclink>
	</head>
	
	<command>extractalign</command>
<!-- prepared by mamiller around 9/20/2009
Description 
extractalign allows you to specify one or more regions of a sequence alignment to extract sub-sequences from to build up a resulting sub-sequence alignment. extractakign reads in a sequence alignment and a set of regions of that alignment as specified by pairs of start and end positions (either on the command-line or contained in a file) using gapped alignment positions as the coordinates, and writes out the specified regions of the input sequence in the order in which they have been specified. Thus, if the sequence "AAAGGGTTT" has been input and the regions: "7-9, 3-4" have been specified, then the output sequence will be: "TTTAG". 

Usage 

Here is a sample session with extractalign 
Extract the region from position 10 to 20: 
 

% extractalign dna.msf result.seq -regions '11-30' 
Extract regions from a sequence alignment	 


Command line arguments 
Standard (Mandatory) qualifiers:

[-sequence]          	sequence   Sequence filename and optional format, or reference (input USA)
-regions            	range      [Whole sequence] Regions to extract.
                                  
								A set of regions is specified by a set of pairs of positions. The positions are integers.They are separated by any non-digit, non-alpha character.
                                Examples of region specifications are: 24-45, 56-78  1:45, 67=99;765..888 1,5,8,10,23,45,57,99.

[-outseq]       seqoutall  default=fasta Sequence set(s)  filename and optional format (output USA)
					we dont support output qualifier

Additional (Optional) qualifiers:
-separate           boolean   default=false 
								If this is set true then each specified region is written out as a separate sequence. The name of the sequence is created from the name of the original 
								sequence with the start and end positions of the range appended with underscore characters between them, eg: XYZ region 2 to 34 is written as: XYZ_2_34

Advanced (Unprompted) qualifiers: (none)  -->
   
	<parameters>
		<!-- command name -->
		<parameter ishidden="1" type="String">
			<name>extractseq_invoke</name>
			<attributes>
				<format>
					<language>perl</language>
					<code>"extractalign -auto -warning -error"</code>
				</format>
				<group>0</group>
			</attributes>
		</parameter>

<!-- required input file -->
<!-- it would be nice to expose the db qption, but we are not sure how to do this, since an input file is required 
the address of the db is <code>" /projects/ngbw_db1/data/databases/fasta/$value"</code> -->

		<parameter ismandatory="1" issimple="1" isinput="1" type="InFile">
			<name>infile</name>
			<attributes>
				<format>
					<language>perl</language>
					<code>"-sequence infile"</code>
				</format>
				<group>5</group>
				<filenames>infile</filenames>
			</attributes>
		</parameter>
		
<!-- HIDDEN PARAMS -->	
<!-- specify output file [-outseq]  seqoutall  [.] Sequence set(s)  filename and optional format (output USA) -->		
		<parameter type="String" ishidden="1">
			<name>output_file</name>
			<attributes>
				<format>
					<language>perl</language>
					<code> " -outseq outfile"</code>
				</format>
				<group>99</group>
			</attributes>
		</parameter>
		
<!-- VISIBLE PARAMS -->
<!-- SIMPLE VISIBLE PARAMS -->

<!-- -regions            	range      [Whole sequence] Regions to extract.
                                  
								  A set of regions is specified by a set of pairs of positions. The positions are integers.They are separated by any non-digit, non-alpha character.
                                  Examples of region specifications are: 24-45, 56-78  1:45, 67=99;765..888 1,5,8,10,23,45,57,99 -->

				<parameter type="String" ismandatory="1" issimple="1">
					<name>regions_option</name>
					<attributes>
						<prompt>Enter the regions to extract, separated by commas (-regions)</prompt>
						<format>
							<language>perl</language>
							<code>"-regions $value"</code>
						</format>
						<comment>
							<value>Regions to be extracted are specified by a numerical pairs, eg 45-67, where the two numbers specify the starting and ending positions to be extracted. Each range must be specified by integers. If you wish to extract multiple sequences in a range, you may separate them by commas, as follows: 24-45, 56-78. Other non alphanumeric characters can be used. The followinfg are valid entries:   1:45, 67=99;765..888 1,5,8,10,23,45,57,9</value>
						</comment>
					</attributes>
				</parameter>
<!-- It would be good to add this option

You can specifiy a file of ranges to extract by giving the '-regions' qualifier the value '@' followed by the name of the file containing the ranges. (eg: '-regions @myfile'). 

The format of the range file is: 

Comment lines start with '#' in the first column. 
Comment lines and blank lines are ignored. 
The line may start with white-space. 
There are two positive (integer) numbers per line separated by one or more space or TAB characters. 
The second number must be greater or equal to the first number. 
There can be optional text after the two numbers to annotate the line. 
White-space before or after the text is removed. 
An example range file is: 
h
# this is my set of ranges
12   23
 4   5       this is like 12-23, but smaller
67   10348   interesting region -->

				
		<parameter type="Excl" issimple="1">
			<name>outseq_sformat</name> 
			<attributes> 
				<prompt>Output format for output</prompt> 
				<vlist>
					<value>fasta</value>
					<label>fasta</label>
					<value>gcg</value>
					<label>gcg</label>
					<value>embl</value>
					<label>embl</label>
					<value>swiss</value>
					<label>swiss</label>
					<value>ncbi</value>
					<label>ncbi</label>
					<value>nbrf</value>
					<label>nbrf</label>
					<value>genbank</value>
					<label>genbank</label> 
					<value>ig</value> 
					<label>ig</label> 
					<value>text</value> 
					<label>text</label> 
					<value>asn1</value> 
					<label>asn1</label> 
				</vlist>
				<vdef>
					<value>fasta</value>
				</vdef>
				<format>
					<language>perl</language>
					<code>" -osformat2 $value -osextension2 $value"</code>
				</format>
				<group>3</group>
			</attributes>
		</parameter>

		<parameter type="Results">
			<name>all_results</name>
			<attributes>
				<filenames>*</filenames>
			</attributes>
		</parameter>
		
	</parameters>
</pise>
