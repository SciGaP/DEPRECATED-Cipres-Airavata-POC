<?xml version="1.0" encoding="UTF-8"?>
<!-- This web.xml file is not required when using Servlet 3.0 container, see implementation details http://jersey.java.net/nonav/documentation/latest/jax-rs.html -->
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">

		<listener>
			<listener-class>org.ngbw.cipresrest.webresource.Startup</listener-class>
		</listener>

 		<servlet>
			<servlet-name>cipresrest_application</servlet-name>
			<servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>

			<!-- This tells jersey to load all our classes (or those annotated with @provider)
			under the specified root package, org.ngbw.cipresrest  -->
			<init-param>
				<param-name>jersey.config.server.provider.packages</param-name>
				<param-value>org.ngbw.cipresrest</param-value>
			</init-param>

			<!-- Tells jersey to load a specific provider class that enables use of @RolesAllowed -->
			<!-- This doesn't seem to work.  isUserInRole() is never called. -->
			<init-param>
				<param-name>jersey.config.server.provider.classnames</param-name>
				<param-value>org.glassfish.jersey.server.filter.RolesAllowedDynamicFeature</param-value>
			</init-param>
				
			<!-- This is what you need to do to use MultiPartFeature.  All the docs and examples
			talk about registering this on a ResourceConfig object.  This is apparently the
			equivalent. -->
			<init-param>
				<param-name>jersey.config.server.provider.classnames</param-name>
				<param-value>org.glassfish.jersey.media.multipart.MultiPartFeature</param-value>
			</init-param>


			<!-- This should map to org.glassfish.jersey.message.MessageProperties.XML_FORMAT_OUTPUT -->
			<!-- Returned XML is formatted with line breaks and indentation.  Great for debugging. -->
			<init-param>
				<param-name>jersey.config.xml.formatOutput</param-name>
				<param-value>true</param-value>
			</init-param>

			<!-- Don't buffer outbound data inorder to determine content length -->
			<!-- I'm doing this to see what client does when server doesn't send content length or sends 0 -->
			<init-param>
				<param-name>jersey.config.contentLength.buffer</param-name>
				<param-value>0</param-value>
			</init-param>



			<load-on-startup>1</load-on-startup>
		</servlet>
		<servlet-mapping >
			<servlet-name >cipresrest_application</servlet-name >
			<url-pattern>/*</url-pattern>
		</servlet-mapping >




	<!--
		<init-param>
			<param-name>com.sun.jersey.spi.container.ContainerRequestFilters</param-name>
			<param-value>org.ngbw.cipresrest.auth.SecurityFilter</param-value>
		</init-param>
		<init-param>
			<param-name>com.sun.jersey.spi.container.ResourceFilters</param-name>
			<param-value>com.sun.jersey.api.container.filter.RolesAllowedResourceFilterFactory</param-value>
		</init-param>
	-->
</web-app >
